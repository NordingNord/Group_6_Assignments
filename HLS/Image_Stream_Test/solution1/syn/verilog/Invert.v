// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Invert_Invert,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.098000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=2138,HLS_SYN_LUT=2602,HLS_VERSION=2020_2}" *)

module Invert (
        ap_clk,
        ap_rst_n,
        Data_In_TDATA,
        Data_In_TVALID,
        Data_In_TREADY,
        Data_In_TKEEP,
        Data_In_TSTRB,
        Data_In_TUSER,
        Data_In_TLAST,
        Data_In_TID,
        Data_In_TDEST,
        Data_Out_TDATA,
        Data_Out_TVALID,
        Data_Out_TREADY,
        Data_Out_TKEEP,
        Data_Out_TSTRB,
        Data_Out_TUSER,
        Data_Out_TLAST,
        Data_Out_TID,
        Data_Out_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_pp1_stage0 = 9'd64;
parameter    ap_ST_fsm_pp1_stage1 = 9'd128;
parameter    ap_ST_fsm_state32 = 9'd256;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] Data_In_TDATA;
input   Data_In_TVALID;
output   Data_In_TREADY;
input  [3:0] Data_In_TKEEP;
input  [3:0] Data_In_TSTRB;
input  [1:0] Data_In_TUSER;
input  [0:0] Data_In_TLAST;
input  [4:0] Data_In_TID;
input  [5:0] Data_In_TDEST;
output  [31:0] Data_Out_TDATA;
output   Data_Out_TVALID;
input   Data_Out_TREADY;
output  [3:0] Data_Out_TKEEP;
output  [3:0] Data_Out_TSTRB;
output  [1:0] Data_Out_TUSER;
output  [0:0] Data_Out_TLAST;
output  [4:0] Data_Out_TID;
output  [5:0] Data_Out_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    Data_In_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    Data_Out_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter11;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln61_reg_904;
reg   [0:0] icmp_ln61_reg_904_pp1_iter11_reg;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter12;
wire    ap_block_pp1_stage0;
reg   [12:0] indvar_flatten_reg_262;
reg   [31:0] tmp_data_V_reg_853;
reg   [3:0] ref_tmp_keep_reg_860;
reg   [3:0] ref_tmp_strb_reg_865;
reg   [1:0] ref_tmp_user_reg_870;
reg   [0:0] tmp_last_V_reg_875;
reg   [4:0] ref_tmp_id_reg_879;
reg   [5:0] ref_tmp_dest_reg_884;
reg   [15:0] trunc_ln35_1_reg_889;
wire    ap_CS_fsm_state3;
reg   [7:0] trunc_ln35_2_reg_894;
wire   [12:0] add_ln61_fu_506_p2;
reg   [12:0] add_ln61_reg_899;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state11_pp1_stage0_iter2;
wire    ap_block_state13_pp1_stage0_iter3;
wire    ap_block_state15_pp1_stage0_iter4;
wire    ap_block_state17_pp1_stage0_iter5;
wire    ap_block_state19_pp1_stage0_iter6;
wire    ap_block_state21_pp1_stage0_iter7;
wire    ap_block_state23_pp1_stage0_iter8;
wire    ap_block_state25_pp1_stage0_iter9;
wire    ap_block_state27_pp1_stage0_iter10;
wire    ap_block_state29_pp1_stage0_iter11;
reg    ap_block_state31_pp1_stage0_iter12;
reg    ap_block_state31_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln61_fu_512_p2;
reg   [0:0] icmp_ln61_reg_904_pp1_iter1_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter2_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter3_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter4_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter5_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter6_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter7_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter8_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter9_reg;
reg   [0:0] icmp_ln61_reg_904_pp1_iter10_reg;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_state10_pp1_stage1_iter1;
wire    ap_block_state12_pp1_stage1_iter2;
wire    ap_block_state14_pp1_stage1_iter3;
wire    ap_block_state16_pp1_stage1_iter4;
wire    ap_block_state18_pp1_stage1_iter5;
wire    ap_block_state20_pp1_stage1_iter6;
wire    ap_block_state22_pp1_stage1_iter7;
wire    ap_block_state24_pp1_stage1_iter8;
wire    ap_block_state26_pp1_stage1_iter9;
wire    ap_block_state28_pp1_stage1_iter10;
reg    ap_block_state30_pp1_stage1_iter11;
reg    ap_block_state30_io;
reg    ap_block_pp1_stage1_11001;
wire   [63:0] grp_fu_288_p1;
reg   [63:0] conv_reg_938;
reg    ap_enable_reg_pp1_iter2;
wire   [63:0] grp_fu_291_p1;
reg   [63:0] conv1_reg_943;
reg   [63:0] conv2_reg_948;
reg    ap_enable_reg_pp1_iter3;
wire   [63:0] grp_fu_277_p2;
reg   [63:0] mul_reg_953;
reg    ap_enable_reg_pp1_iter5;
wire   [63:0] grp_fu_282_p2;
reg   [63:0] mul1_reg_958;
reg   [63:0] mul2_reg_963;
reg    ap_enable_reg_pp1_iter6;
reg   [63:0] mul2_reg_963_pp1_iter7_reg;
reg   [63:0] mul2_reg_963_pp1_iter8_reg;
wire   [63:0] grp_fu_273_p2;
reg   [63:0] add_reg_968;
reg    ap_enable_reg_pp1_iter8;
reg   [63:0] val_reg_973;
reg    ap_enable_reg_pp1_iter10;
wire   [63:0] reg_fu_577_p1;
reg   [63:0] reg_reg_978;
wire   [31:0] select_ln329_fu_772_p3;
reg   [31:0] select_ln329_reg_983;
wire    ap_CS_fsm_state6;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter9;
reg   [12:0] Image_address0;
reg    Image_ce0;
reg    Image_we0;
reg   [31:0] Image_d0;
wire   [31:0] Image_q0;
reg   [12:0] Image_address1;
reg    Image_ce1;
wire   [31:0] Image_q1;
reg   [12:0] ap_phi_mux_indvar_flatten_phi_fu_266_p4;
wire   [63:0] zext_ln35_fu_377_p1;
wire   [63:0] zext_ln35_1_fu_408_p1;
wire   [63:0] zext_ln35_2_fu_492_p1;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln35_3_fu_501_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln63_fu_518_p1;
wire   [63:0] zext_ln65_fu_526_p1;
wire   [63:0] zext_ln67_fu_555_p1;
reg   [31:0] R_fu_136;
reg   [31:0] G_fu_140;
reg   [31:0] B_fu_144;
reg   [31:0] Mask_fu_148;
wire   [31:0] shl_ln36_1_fu_413_p2;
reg   [31:0] ap_sig_allocacmp_Mask_load_2;
reg   [31:0] ap_sig_allocacmp_Mask_load_6;
reg   [31:0] ap_sig_allocacmp_Mask_load_3;
reg   [31:0] ap_sig_allocacmp_Mask_load_7;
wire   [31:0] shl_ln36_2_fu_445_p2;
wire   [31:0] shl_ln36_3_fu_477_p2;
reg   [31:0] ap_sig_allocacmp_Mask_load;
reg   [31:0] ap_sig_allocacmp_Mask_load_1;
wire   [31:0] shl_ln36_fu_382_p2;
reg   [31:0] grp_load_fu_304_p1;
reg   [31:0] grp_load_fu_316_p1;
reg   [31:0] indx_fu_152;
wire   [31:0] grp_fu_322_p2;
reg   [31:0] ap_sig_allocacmp_indx_load_4;
reg   [31:0] ap_sig_allocacmp_indx_load_5;
wire   [31:0] indx_2_fu_534_p2;
reg    ap_block_pp1_stage1_01001;
wire   [31:0] grp_fu_307_p2;
wire  signed [31:0] sext_ln35_fu_403_p1;
wire  signed [31:0] sext_ln35_1_fu_488_p1;
wire  signed [31:0] sext_ln35_2_fu_497_p1;
reg   [63:0] grp_fu_273_p0;
reg   [63:0] grp_fu_273_p1;
reg   [63:0] grp_fu_277_p0;
reg   [63:0] grp_fu_277_p1;
reg   [31:0] grp_fu_288_p0;
reg   [31:0] grp_fu_307_p1;
wire   [23:0] trunc_ln1_fu_393_p4;
wire   [31:0] and_ln35_2_fu_427_p2;
wire   [31:0] and_ln35_3_fu_459_p2;
wire   [10:0] exp_fu_584_p4;
wire   [51:0] trunc_ln315_fu_598_p1;
wire   [52:0] p_Result_1_fu_606_p3;
wire   [62:0] trunc_ln306_fu_580_p1;
wire   [11:0] zext_ln311_fu_594_p1;
wire  signed [11:0] sh_amt_fu_624_p2;
wire  signed [11:0] sh_amt_1_fu_648_p2;
wire   [6:0] tmp_fu_658_p4;
wire   [31:0] trunc_ln328_fu_602_p1;
wire  signed [31:0] sext_ln326_fu_654_p1;
wire   [0:0] icmp_ln337_fu_668_p2;
wire   [31:0] shl_ln339_fu_674_p2;
wire  signed [31:0] sext_ln331_fu_688_p1;
wire   [53:0] zext_ln320_fu_614_p1;
wire   [53:0] zext_ln331_fu_692_p1;
wire   [53:0] lshr_ln331_fu_696_p2;
wire   [0:0] icmp_ln323_fu_618_p2;
wire   [0:0] icmp_ln327_fu_630_p2;
wire   [0:0] or_ln327_fu_706_p2;
wire   [0:0] icmp_ln330_fu_642_p2;
wire   [0:0] xor_ln327_fu_712_p2;
wire   [0:0] and_ln330_fu_718_p2;
wire   [0:0] icmp_ln329_fu_636_p2;
wire   [0:0] and_ln330_1_fu_724_p2;
wire   [31:0] trunc_ln331_fu_702_p1;
wire   [31:0] select_ln330_fu_730_p3;
wire   [0:0] xor_ln323_fu_746_p2;
wire   [0:0] and_ln327_fu_752_p2;
wire   [31:0] select_ln323_fu_738_p3;
wire   [0:0] or_ln329_fu_766_p2;
wire   [31:0] select_ln327_fu_758_p3;
wire   [31:0] select_ln337_fu_680_p3;
wire   [0:0] p_Result_s_fu_780_p3;
wire   [31:0] sub_ln455_fu_787_p2;
wire   [31:0] tmp_data_V_1_fu_792_p3;
reg    grp_fu_273_ce;
reg    grp_fu_277_ce;
reg    grp_fu_282_ce;
reg    grp_fu_288_ce;
reg    grp_fu_291_ce;
wire    ap_CS_fsm_state32;
wire    regslice_both_Data_Out_V_data_V_U_apdone_blk;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_Data_In_V_data_V_U_apdone_blk;
wire   [31:0] Data_In_TDATA_int_regslice;
wire    Data_In_TVALID_int_regslice;
reg    Data_In_TREADY_int_regslice;
wire    regslice_both_Data_In_V_data_V_U_ack_in;
wire    regslice_both_Data_In_V_keep_V_U_apdone_blk;
wire   [3:0] Data_In_TKEEP_int_regslice;
wire    regslice_both_Data_In_V_keep_V_U_vld_out;
wire    regslice_both_Data_In_V_keep_V_U_ack_in;
wire    regslice_both_Data_In_V_strb_V_U_apdone_blk;
wire   [3:0] Data_In_TSTRB_int_regslice;
wire    regslice_both_Data_In_V_strb_V_U_vld_out;
wire    regslice_both_Data_In_V_strb_V_U_ack_in;
wire    regslice_both_Data_In_V_user_V_U_apdone_blk;
wire   [1:0] Data_In_TUSER_int_regslice;
wire    regslice_both_Data_In_V_user_V_U_vld_out;
wire    regslice_both_Data_In_V_user_V_U_ack_in;
wire    regslice_both_Data_In_V_last_V_U_apdone_blk;
wire   [0:0] Data_In_TLAST_int_regslice;
wire    regslice_both_Data_In_V_last_V_U_vld_out;
wire    regslice_both_Data_In_V_last_V_U_ack_in;
wire    regslice_both_Data_In_V_id_V_U_apdone_blk;
wire   [4:0] Data_In_TID_int_regslice;
wire    regslice_both_Data_In_V_id_V_U_vld_out;
wire    regslice_both_Data_In_V_id_V_U_ack_in;
wire    regslice_both_Data_In_V_dest_V_U_apdone_blk;
wire   [5:0] Data_In_TDEST_int_regslice;
wire    regslice_both_Data_In_V_dest_V_U_vld_out;
wire    regslice_both_Data_In_V_dest_V_U_ack_in;
wire   [31:0] Data_Out_TDATA_int_regslice;
reg    Data_Out_TVALID_int_regslice;
wire    Data_Out_TREADY_int_regslice;
wire    regslice_both_Data_Out_V_data_V_U_vld_out;
wire    regslice_both_Data_Out_V_keep_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_keep_V_U_vld_out;
wire    regslice_both_Data_Out_V_strb_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_strb_V_U_vld_out;
wire    regslice_both_Data_Out_V_user_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_user_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_user_V_U_vld_out;
wire    regslice_both_Data_Out_V_last_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_last_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_last_V_U_vld_out;
wire    regslice_both_Data_Out_V_id_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_id_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_id_V_U_vld_out;
wire    regslice_both_Data_Out_V_dest_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_dest_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
end

Invert_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

Invert_Image #(
    .DataWidth( 32 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
Image_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Image_address0),
    .ce0(Image_ce0),
    .we0(Image_we0),
    .d0(Image_d0),
    .q0(Image_q0),
    .address1(Image_address1),
    .ce1(Image_ce1),
    .q1(Image_q1)
);

Invert_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_273_p0),
    .din1(grp_fu_273_p1),
    .ce(grp_fu_273_ce),
    .dout(grp_fu_273_p2)
);

Invert_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_277_p0),
    .din1(grp_fu_277_p1),
    .ce(grp_fu_277_ce),
    .dout(grp_fu_277_p2)
);

Invert_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv1_reg_943),
    .din1(64'd4603462445507809378),
    .ce(grp_fu_282_ce),
    .dout(grp_fu_282_p2)
);

Invert_sitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_4_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_288_p0),
    .ce(grp_fu_288_ce),
    .dout(grp_fu_288_p1)
);

Invert_sitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_4_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(G_fu_140),
    .ce(grp_fu_291_ce),
    .dout(grp_fu_291_p1)
);

Invert_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Data_In_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TDATA),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_data_V_U_ack_in),
    .data_out(Data_In_TDATA_int_regslice),
    .vld_out(Data_In_TVALID_int_regslice),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_data_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_In_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TKEEP),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_keep_V_U_ack_in),
    .data_out(Data_In_TKEEP_int_regslice),
    .vld_out(regslice_both_Data_In_V_keep_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_keep_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_In_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TSTRB),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_strb_V_U_ack_in),
    .data_out(Data_In_TSTRB_int_regslice),
    .vld_out(regslice_both_Data_In_V_strb_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_strb_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 2 ))
regslice_both_Data_In_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TUSER),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_user_V_U_ack_in),
    .data_out(Data_In_TUSER_int_regslice),
    .vld_out(regslice_both_Data_In_V_user_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_user_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_Data_In_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TLAST),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_last_V_U_ack_in),
    .data_out(Data_In_TLAST_int_regslice),
    .vld_out(regslice_both_Data_In_V_last_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_last_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 5 ))
regslice_both_Data_In_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TID),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_id_V_U_ack_in),
    .data_out(Data_In_TID_int_regslice),
    .vld_out(regslice_both_Data_In_V_id_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_id_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 6 ))
regslice_both_Data_In_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TDEST),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_dest_V_U_ack_in),
    .data_out(Data_In_TDEST_int_regslice),
    .vld_out(regslice_both_Data_In_V_dest_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_dest_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Data_Out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_Out_TDATA_int_regslice),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(Data_Out_TREADY_int_regslice),
    .data_out(Data_Out_TDATA),
    .vld_out(regslice_both_Data_Out_V_data_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_data_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_Out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_keep_reg_860),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_keep_V_U_ack_in_dummy),
    .data_out(Data_Out_TKEEP),
    .vld_out(regslice_both_Data_Out_V_keep_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_keep_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_Out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_strb_reg_865),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_strb_V_U_ack_in_dummy),
    .data_out(Data_Out_TSTRB),
    .vld_out(regslice_both_Data_Out_V_strb_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_strb_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 2 ))
regslice_both_Data_Out_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_user_reg_870),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_user_V_U_ack_in_dummy),
    .data_out(Data_Out_TUSER),
    .vld_out(regslice_both_Data_Out_V_user_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_user_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 1 ))
regslice_both_Data_Out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_last_V_U_ack_in_dummy),
    .data_out(Data_Out_TLAST),
    .vld_out(regslice_both_Data_Out_V_last_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_last_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 5 ))
regslice_both_Data_Out_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_id_reg_879),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_id_V_U_ack_in_dummy),
    .data_out(Data_Out_TID),
    .vld_out(regslice_both_Data_Out_V_id_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_id_V_U_apdone_blk)
);

Invert_regslice_both #(
    .DataWidth( 6 ))
regslice_both_Data_Out_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_dest_reg_884),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_dest_V_U_ack_in_dummy),
    .data_out(Data_Out_TDEST),
    .vld_out(regslice_both_Data_Out_V_dest_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter11 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        B_fu_144 <= 32'd0;
    end else if (((icmp_ln61_reg_904 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        B_fu_144 <= Image_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        G_fu_140 <= 32'd0;
    end else if (((icmp_ln61_reg_904 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        G_fu_140 <= Image_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == Data_In_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
        Mask_fu_148 <= shl_ln36_fu_382_p2;
    end else if ((((1'b1 == Data_In_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        Mask_fu_148 <= 32'd255;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Mask_fu_148 <= shl_ln36_3_fu_477_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Mask_fu_148 <= shl_ln36_2_fu_445_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Mask_fu_148 <= shl_ln36_1_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        R_fu_136 <= 32'd0;
    end else if (((icmp_ln61_reg_904 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        R_fu_136 <= Image_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_904 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_262 <= add_ln61_reg_899;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_262 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        indx_fu_152 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_fu_512_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indx_fu_152 <= indx_2_fu_534_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == Data_In_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln61_reg_904 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_fu_512_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        indx_fu_152 <= grp_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln61_reg_899 <= add_ln61_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_reg_904_pp1_iter7_reg == 1'd0))) begin
        add_reg_968 <= grp_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln61_reg_904_pp1_iter2_reg == 1'd0))) begin
        conv1_reg_943 <= grp_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_reg_904_pp1_iter2_reg == 1'd0))) begin
        conv2_reg_948 <= grp_fu_288_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln61_reg_904_pp1_iter2_reg == 1'd0))) begin
        conv_reg_938 <= grp_fu_288_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln61_reg_904 <= icmp_ln61_fu_512_p2;
        icmp_ln61_reg_904_pp1_iter10_reg <= icmp_ln61_reg_904_pp1_iter9_reg;
        icmp_ln61_reg_904_pp1_iter11_reg <= icmp_ln61_reg_904_pp1_iter10_reg;
        icmp_ln61_reg_904_pp1_iter1_reg <= icmp_ln61_reg_904;
        icmp_ln61_reg_904_pp1_iter2_reg <= icmp_ln61_reg_904_pp1_iter1_reg;
        icmp_ln61_reg_904_pp1_iter3_reg <= icmp_ln61_reg_904_pp1_iter2_reg;
        icmp_ln61_reg_904_pp1_iter4_reg <= icmp_ln61_reg_904_pp1_iter3_reg;
        icmp_ln61_reg_904_pp1_iter5_reg <= icmp_ln61_reg_904_pp1_iter4_reg;
        icmp_ln61_reg_904_pp1_iter6_reg <= icmp_ln61_reg_904_pp1_iter5_reg;
        icmp_ln61_reg_904_pp1_iter7_reg <= icmp_ln61_reg_904_pp1_iter6_reg;
        icmp_ln61_reg_904_pp1_iter8_reg <= icmp_ln61_reg_904_pp1_iter7_reg;
        icmp_ln61_reg_904_pp1_iter9_reg <= icmp_ln61_reg_904_pp1_iter8_reg;
        mul2_reg_963_pp1_iter7_reg <= mul2_reg_963;
        mul2_reg_963_pp1_iter8_reg <= mul2_reg_963_pp1_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln61_reg_904_pp1_iter5_reg == 1'd0))) begin
        mul1_reg_958 <= grp_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_reg_904_pp1_iter5_reg == 1'd0))) begin
        mul2_reg_963 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln61_reg_904_pp1_iter5_reg == 1'd0))) begin
        mul_reg_953 <= grp_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp_dest_reg_884 <= Data_In_TDEST_int_regslice;
        ref_tmp_id_reg_879 <= Data_In_TID_int_regslice;
        ref_tmp_keep_reg_860 <= Data_In_TKEEP_int_regslice;
        ref_tmp_strb_reg_865 <= Data_In_TSTRB_int_regslice;
        ref_tmp_user_reg_870 <= Data_In_TUSER_int_regslice;
        tmp_data_V_reg_853 <= Data_In_TDATA_int_regslice;
        tmp_last_V_reg_875 <= Data_In_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_reg_904_pp1_iter10_reg == 1'd0))) begin
        reg_reg_978 <= reg_fu_577_p1;
        select_ln329_reg_983 <= select_ln329_fu_772_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln35_1_reg_889 <= {{and_ln35_2_fu_427_p2[31:16]}};
        trunc_ln35_2_reg_894 <= {{and_ln35_3_fu_459_p2[31:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln61_reg_904_pp1_iter10_reg == 1'd0))) begin
        val_reg_973 <= grp_fu_273_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Data_In_TDATA_blk_n = Data_In_TVALID_int_regslice;
    end else begin
        Data_In_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == Data_In_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
        Data_In_TREADY_int_regslice = 1'b1;
    end else begin
        Data_In_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter12 == 1'b1) & (icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        Data_Out_TDATA_blk_n = Data_Out_TREADY_int_regslice;
    end else begin
        Data_Out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        Data_Out_TVALID_int_regslice = 1'b1;
    end else begin
        Data_Out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        Image_address0 = zext_ln65_fu_526_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Image_address0 = zext_ln35_3_fu_501_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Image_address0 = zext_ln35_2_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Image_address0 = zext_ln35_1_fu_408_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Image_address0 = zext_ln35_fu_377_p1;
    end else begin
        Image_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            Image_address1 = zext_ln67_fu_555_p1;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            Image_address1 = zext_ln63_fu_518_p1;
        end else begin
            Image_address1 = 'bx;
        end
    end else begin
        Image_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == Data_In_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Image_ce0 = 1'b1;
    end else begin
        Image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        Image_ce1 = 1'b1;
    end else begin
        Image_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Image_d0 = sext_ln35_2_fu_497_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Image_d0 = sext_ln35_1_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Image_d0 = sext_ln35_fu_403_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Image_d0 = grp_fu_307_p2;
    end else begin
        Image_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == Data_In_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2)))) begin
        Image_we0 = 1'b1;
    end else begin
        Image_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_fu_512_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_Data_Out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_904 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_266_p4 = add_ln61_reg_899;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_266_p4 = indvar_flatten_reg_262;
    end
end

always @ (*) begin
    if (((regslice_both_Data_Out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_sig_allocacmp_Mask_load = 32'd255;
    end else begin
        ap_sig_allocacmp_Mask_load = Mask_fu_148;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_sig_allocacmp_Mask_load_1 = 32'd255;
    end else begin
        ap_sig_allocacmp_Mask_load_1 = Mask_fu_148;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_2 = shl_ln36_1_fu_413_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_2 = Mask_fu_148;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_3 = shl_ln36_2_fu_445_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_3 = Mask_fu_148;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_6 = shl_ln36_1_fu_413_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_6 = Mask_fu_148;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_7 = shl_ln36_2_fu_445_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_7 = Mask_fu_148;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_fu_512_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ap_sig_allocacmp_indx_load_4 = grp_fu_322_p2;
    end else begin
        ap_sig_allocacmp_indx_load_4 = indx_fu_152;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln61_fu_512_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ap_sig_allocacmp_indx_load_5 = grp_fu_322_p2;
    end else begin
        ap_sig_allocacmp_indx_load_5 = indx_fu_152;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grp_fu_273_ce = 1'b1;
    end else begin
        grp_fu_273_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_273_p0 = add_reg_968;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_273_p0 = mul_reg_953;
    end else begin
        grp_fu_273_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_273_p1 = mul2_reg_963_pp1_iter8_reg;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_273_p1 = mul1_reg_958;
    end else begin
        grp_fu_273_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grp_fu_277_ce = 1'b1;
    end else begin
        grp_fu_277_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            grp_fu_277_p0 = conv2_reg_948;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            grp_fu_277_p0 = conv_reg_938;
        end else begin
            grp_fu_277_p0 = 'bx;
        end
    end else begin
        grp_fu_277_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            grp_fu_277_p1 = 64'd4592878986383488713;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            grp_fu_277_p1 = 64'd4599057925072241033;
        end else begin
            grp_fu_277_p1 = 'bx;
        end
    end else begin
        grp_fu_277_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grp_fu_282_ce = 1'b1;
    end else begin
        grp_fu_282_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grp_fu_288_ce = 1'b1;
    end else begin
        grp_fu_288_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            grp_fu_288_p0 = B_fu_144;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            grp_fu_288_p0 = R_fu_136;
        end else begin
            grp_fu_288_p0 = 'bx;
        end
    end else begin
        grp_fu_288_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        grp_fu_291_ce = 1'b1;
    end else begin
        grp_fu_291_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_307_p1 = tmp_data_V_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_307_p1 = Data_In_TDATA_int_regslice;
    end else begin
        grp_fu_307_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_load_fu_304_p1 = Mask_fu_148;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_304_p1 = ap_sig_allocacmp_Mask_load;
    end else begin
        grp_load_fu_304_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_load_fu_316_p1 = Mask_fu_148;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_316_p1 = ap_sig_allocacmp_Mask_load_1;
    end else begin
        grp_load_fu_316_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == Data_In_TVALID_int_regslice) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_last_V_reg_875 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln61_fu_512_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter12 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter11 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((ap_enable_reg_pp1_iter12 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter11 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln61_fu_512_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((regslice_both_Data_Out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_In_TREADY = regslice_both_Data_In_V_data_V_U_ack_in;

assign Data_Out_TDATA_int_regslice = (32'd255 - tmp_data_V_1_fu_792_p3);

assign Data_Out_TVALID = regslice_both_Data_Out_V_data_V_U_vld_out;

assign add_ln61_fu_506_p2 = (ap_phi_mux_indvar_flatten_phi_fu_266_p4 + 13'd1);

assign and_ln327_fu_752_p2 = (xor_ln323_fu_746_p2 & icmp_ln327_fu_630_p2);

assign and_ln330_1_fu_724_p2 = (icmp_ln329_fu_636_p2 & and_ln330_fu_718_p2);

assign and_ln330_fu_718_p2 = (xor_ln327_fu_712_p2 & icmp_ln330_fu_642_p2);

assign and_ln35_2_fu_427_p2 = (tmp_data_V_reg_853 & ap_sig_allocacmp_Mask_load_2);

assign and_ln35_3_fu_459_p2 = (tmp_data_V_reg_853 & ap_sig_allocacmp_Mask_load_3);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter12 == 1'b1) & ((1'b1 == ap_block_state31_io) | ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter12 == 1'b1) & ((1'b1 == ap_block_state31_io) | ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice))));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_01001 = ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == Data_Out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((ap_enable_reg_pp1_iter11 == 1'b1) & ((1'b1 == ap_block_state30_io) | ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice))));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((ap_enable_reg_pp1_iter11 == 1'b1) & ((1'b1 == ap_block_state30_io) | ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice))));
end

assign ap_block_state10_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_io = ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state30_pp1_stage1_iter11 = ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state31_io = ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state31_pp1_stage0_iter12 = ((icmp_ln61_reg_904_pp1_iter11_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exp_fu_584_p4 = {{reg_fu_577_p1[62:52]}};

assign grp_fu_307_p2 = (grp_load_fu_304_p1 & grp_fu_307_p1);

assign grp_fu_322_p2 = (indx_fu_152 + 32'd1);

assign icmp_ln323_fu_618_p2 = ((trunc_ln306_fu_580_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln327_fu_630_p2 = ((exp_fu_584_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln329_fu_636_p2 = (($signed(sh_amt_fu_624_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln330_fu_642_p2 = (($signed(sh_amt_fu_624_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln337_fu_668_p2 = (($signed(tmp_fu_658_p4) < $signed(7'd1)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_512_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_266_p4 == 13'd5000) ? 1'b1 : 1'b0);

assign indx_2_fu_534_p2 = (ap_sig_allocacmp_indx_load_5 + 32'd1);

assign lshr_ln331_fu_696_p2 = zext_ln320_fu_614_p1 >> zext_ln331_fu_692_p1;

assign or_ln327_fu_706_p2 = (icmp_ln327_fu_630_p2 | icmp_ln323_fu_618_p2);

assign or_ln329_fu_766_p2 = (or_ln327_fu_706_p2 | icmp_ln329_fu_636_p2);

assign p_Result_1_fu_606_p3 = {{1'd1}, {trunc_ln315_fu_598_p1}};

assign p_Result_s_fu_780_p3 = reg_reg_978[32'd63];

assign reg_fu_577_p1 = val_reg_973;

assign select_ln323_fu_738_p3 = ((icmp_ln323_fu_618_p2[0:0] == 1'b1) ? 32'd0 : select_ln330_fu_730_p3);

assign select_ln327_fu_758_p3 = ((and_ln327_fu_752_p2[0:0] == 1'b1) ? trunc_ln328_fu_602_p1 : select_ln323_fu_738_p3);

assign select_ln329_fu_772_p3 = ((or_ln329_fu_766_p2[0:0] == 1'b1) ? select_ln327_fu_758_p3 : select_ln337_fu_680_p3);

assign select_ln330_fu_730_p3 = ((and_ln330_1_fu_724_p2[0:0] == 1'b1) ? trunc_ln331_fu_702_p1 : 32'd0);

assign select_ln337_fu_680_p3 = ((icmp_ln337_fu_668_p2[0:0] == 1'b1) ? shl_ln339_fu_674_p2 : 32'd0);

assign sext_ln326_fu_654_p1 = sh_amt_1_fu_648_p2;

assign sext_ln331_fu_688_p1 = sh_amt_fu_624_p2;

assign sext_ln35_1_fu_488_p1 = $signed(trunc_ln35_1_reg_889);

assign sext_ln35_2_fu_497_p1 = $signed(trunc_ln35_2_reg_894);

assign sext_ln35_fu_403_p1 = $signed(trunc_ln1_fu_393_p4);

assign sh_amt_1_fu_648_p2 = ($signed(12'd0) - $signed(sh_amt_fu_624_p2));

assign sh_amt_fu_624_p2 = (12'd1075 - zext_ln311_fu_594_p1);

assign shl_ln339_fu_674_p2 = trunc_ln328_fu_602_p1 << sext_ln326_fu_654_p1;

assign shl_ln36_1_fu_413_p2 = grp_load_fu_316_p1 << 32'd8;

assign shl_ln36_2_fu_445_p2 = ap_sig_allocacmp_Mask_load_6 << 32'd8;

assign shl_ln36_3_fu_477_p2 = ap_sig_allocacmp_Mask_load_7 << 32'd8;

assign shl_ln36_fu_382_p2 = grp_load_fu_316_p1 << 32'd8;

assign sub_ln455_fu_787_p2 = (32'd0 - select_ln329_reg_983);

assign tmp_data_V_1_fu_792_p3 = ((p_Result_s_fu_780_p3[0:0] == 1'b1) ? sub_ln455_fu_787_p2 : select_ln329_reg_983);

assign tmp_fu_658_p4 = {{sh_amt_1_fu_648_p2[11:5]}};

assign trunc_ln1_fu_393_p4 = {{grp_fu_307_p2[31:8]}};

assign trunc_ln306_fu_580_p1 = reg_fu_577_p1[62:0];

assign trunc_ln315_fu_598_p1 = reg_fu_577_p1[51:0];

assign trunc_ln328_fu_602_p1 = reg_fu_577_p1[31:0];

assign trunc_ln331_fu_702_p1 = lshr_ln331_fu_696_p2[31:0];

assign xor_ln323_fu_746_p2 = (icmp_ln323_fu_618_p2 ^ 1'd1);

assign xor_ln327_fu_712_p2 = (or_ln327_fu_706_p2 ^ 1'd1);

assign zext_ln311_fu_594_p1 = exp_fu_584_p4;

assign zext_ln320_fu_614_p1 = p_Result_1_fu_606_p3;

assign zext_ln331_fu_692_p1 = $unsigned(sext_ln331_fu_688_p1);

assign zext_ln35_1_fu_408_p1 = indx_fu_152;

assign zext_ln35_2_fu_492_p1 = indx_fu_152;

assign zext_ln35_3_fu_501_p1 = indx_fu_152;

assign zext_ln35_fu_377_p1 = indx_fu_152;

assign zext_ln63_fu_518_p1 = indx_fu_152;

assign zext_ln65_fu_526_p1 = ap_sig_allocacmp_indx_load_4;

assign zext_ln67_fu_555_p1 = indx_fu_152;

endmodule //Invert
