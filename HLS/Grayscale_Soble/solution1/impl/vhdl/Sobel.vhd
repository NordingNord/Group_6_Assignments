-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sobel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    Data_In_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Data_In_TVALID : IN STD_LOGIC;
    Data_In_TREADY : OUT STD_LOGIC;
    Data_In_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    Data_In_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    Data_In_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    Data_In_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    Data_In_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    Data_In_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    Data_Out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    Data_Out_TVALID : OUT STD_LOGIC;
    Data_Out_TREADY : IN STD_LOGIC;
    Data_Out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    Data_Out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    Data_Out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    Data_Out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    Data_Out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    Data_Out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Sobel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Sobel_Sobel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.098000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=160,HLS_SYN_DSP=0,HLS_SYN_FF=2858,HLS_SYN_LUT=5664,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv64_3FD322D0E5604189 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000101101000011100101011000000100000110001001";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_1388 : STD_LOGIC_VECTOR (12 downto 0) := "1001110001000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv13_64 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100100";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv7_63 : STD_LOGIC_VECTOR (6 downto 0) := "1100011";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal Data_In_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Data_Out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp2_iter46 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln111_reg_2231 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter47 : STD_LOGIC := '0';
    signal icmp_ln111_reg_2231_pp2_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_510 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_reg_521 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_532 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten7_reg_543 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_reg_554 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_565 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_651 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_state8_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state14_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_state16_pp1_stage1_iter4 : BOOLEAN;
    signal ap_block_state18_pp1_stage1_iter5 : BOOLEAN;
    signal ap_block_state20_pp1_stage1_iter6 : BOOLEAN;
    signal ap_block_state22_pp1_stage1_iter7 : BOOLEAN;
    signal ap_block_state24_pp1_stage1_iter8 : BOOLEAN;
    signal ap_block_state26_pp1_stage1_iter9 : BOOLEAN;
    signal ap_block_state28_pp1_stage1_iter10 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln97_reg_2111 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state31_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state46_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state47_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_state48_pp2_stage0_iter17 : BOOLEAN;
    signal ap_block_state49_pp2_stage0_iter18 : BOOLEAN;
    signal ap_block_state50_pp2_stage0_iter19 : BOOLEAN;
    signal ap_block_state51_pp2_stage0_iter20 : BOOLEAN;
    signal ap_block_state52_pp2_stage0_iter21 : BOOLEAN;
    signal ap_block_state53_pp2_stage0_iter22 : BOOLEAN;
    signal ap_block_state54_pp2_stage0_iter23 : BOOLEAN;
    signal ap_block_state55_pp2_stage0_iter24 : BOOLEAN;
    signal ap_block_state56_pp2_stage0_iter25 : BOOLEAN;
    signal ap_block_state57_pp2_stage0_iter26 : BOOLEAN;
    signal ap_block_state58_pp2_stage0_iter27 : BOOLEAN;
    signal ap_block_state59_pp2_stage0_iter28 : BOOLEAN;
    signal ap_block_state60_pp2_stage0_iter29 : BOOLEAN;
    signal ap_block_state61_pp2_stage0_iter30 : BOOLEAN;
    signal ap_block_state62_pp2_stage0_iter31 : BOOLEAN;
    signal ap_block_state63_pp2_stage0_iter32 : BOOLEAN;
    signal ap_block_state64_pp2_stage0_iter33 : BOOLEAN;
    signal ap_block_state65_pp2_stage0_iter34 : BOOLEAN;
    signal ap_block_state66_pp2_stage0_iter35 : BOOLEAN;
    signal ap_block_state67_pp2_stage0_iter36 : BOOLEAN;
    signal ap_block_state68_pp2_stage0_iter37 : BOOLEAN;
    signal ap_block_state69_pp2_stage0_iter38 : BOOLEAN;
    signal ap_block_state70_pp2_stage0_iter39 : BOOLEAN;
    signal ap_block_state71_pp2_stage0_iter40 : BOOLEAN;
    signal ap_block_state72_pp2_stage0_iter41 : BOOLEAN;
    signal ap_block_state73_pp2_stage0_iter42 : BOOLEAN;
    signal ap_block_state74_pp2_stage0_iter43 : BOOLEAN;
    signal ap_block_state75_pp2_stage0_iter44 : BOOLEAN;
    signal ap_block_state76_pp2_stage0_iter45 : BOOLEAN;
    signal ap_block_state77_pp2_stage0_iter46 : BOOLEAN;
    signal ap_block_state77_io : BOOLEAN;
    signal ap_block_state78_pp2_stage0_iter47 : BOOLEAN;
    signal ap_block_state78_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal icmp_ln111_reg_2231_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_594_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_657 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal icmp_ln97_reg_2111_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter43 : STD_LOGIC := '0';
    signal icmp_ln111_reg_2231_pp2_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_2060 : STD_LOGIC_VECTOR (31 downto 0);
    signal ref_tmp_keep_reg_2067 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_strb_reg_2072 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_tmp_user_reg_2077 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_last_V_reg_2082 : STD_LOGIC_VECTOR (0 downto 0);
    signal ref_tmp_id_reg_2086 : STD_LOGIC_VECTOR (4 downto 0);
    signal ref_tmp_dest_reg_2091 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln54_1_reg_2096 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln54_2_reg_2101 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln97_1_fu_970_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln97_1_reg_2106 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln97_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_2111_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln97_fu_994_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_reg_2115_pp1_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln97_1_fu_1002_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln97_1_reg_2121_pp1_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln98_fu_1052_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln98_reg_2142 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_reg_2162 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_reg_2167 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal grp_fu_599_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_2172 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_2177 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal mul2_reg_2177_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_2177_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_2182 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal dc_reg_2197 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal add_ln111_fu_1224_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln111_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_2231_pp2_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln111_1_fu_1262_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln111_1_reg_2235 : STD_LOGIC_VECTOR (5 downto 0);
    signal Sobel_addr_reg_2250 : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter9_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter10_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter11_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter12_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter13_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter14_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter15_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter16_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter18_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter19_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter20_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter21_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter22_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter23_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter24_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter25_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter26_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter27_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter28_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter29_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter30_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter31_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter32_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter33_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter34_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter35_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter36_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter37_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter38_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter39_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter40_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter41_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter42_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter43_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal Sobel_addr_reg_2250_pp2_iter44_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_54_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_54_reg_2256_pp2_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_reg_2260_pp2_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln112_fu_1485_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln127_fu_1751_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_reg_2303 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_2308 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter45 : STD_LOGIC := '0';
    signal Image_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce0 : STD_LOGIC;
    signal Image_we0 : STD_LOGIC;
    signal Image_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce1 : STD_LOGIC;
    signal Image_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address2 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce2 : STD_LOGIC;
    signal Image_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address3 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce3 : STD_LOGIC;
    signal Image_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address4 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce4 : STD_LOGIC;
    signal Image_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address5 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce5 : STD_LOGIC;
    signal Image_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address6 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce6 : STD_LOGIC;
    signal Image_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address7 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce7 : STD_LOGIC;
    signal Image_q7 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address8 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce8 : STD_LOGIC;
    signal Image_q8 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address9 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce9 : STD_LOGIC;
    signal Image_q9 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address10 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce10 : STD_LOGIC;
    signal Image_q10 : STD_LOGIC_VECTOR (31 downto 0);
    signal Image_address11 : STD_LOGIC_VECTOR (12 downto 0);
    signal Image_ce11 : STD_LOGIC;
    signal Image_q11 : STD_LOGIC_VECTOR (31 downto 0);
    signal Sobel_1_ce0 : STD_LOGIC;
    signal Sobel_1_we0 : STD_LOGIC;
    signal Sobel_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Sobel_1_ce1 : STD_LOGIC;
    signal Sobel_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Array_Image_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Array_Image_ce0 : STD_LOGIC;
    signal Array_Image_we0 : STD_LOGIC;
    signal Array_Image_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Array_Image_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Array_Image_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal Array_Image_ce1 : STD_LOGIC;
    signal Array_Image_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_514_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j_phi_fu_525_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_i_1_phi_fu_536_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_i_phi_fu_558_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_tmp_data_V_3_phi_fu_580_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp2_iter46_tmp_data_V_3_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_2_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln54_3_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln99_fu_1010_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_fu_1047_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal zext_ln106_2_fu_1080_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_2_fu_1332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_2_fu_1343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_1354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_3_fu_1415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_3_fu_1426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_1_fu_1437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln118_5_fu_1458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln119_4_fu_1469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln123_2_fu_1480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal R_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal G_fu_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_fu_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal Vertical_Sobel_fu_184 : STD_LOGIC_VECTOR (1 downto 0);
    signal Vertical_Sobel_1_fu_188 : STD_LOGIC_VECTOR (1 downto 0);
    signal Vertical_Sobel_2_fu_192 : STD_LOGIC_VECTOR (1 downto 0);
    signal Vertical_Sobel_3_fu_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal Vertical_Sobel_4_fu_200 : STD_LOGIC_VECTOR (1 downto 0);
    signal Vertical_Sobel_5_fu_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal Horizontal_Sobel_fu_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal Horizontal_Sobel_1_fu_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal Horizontal_Sobel_4_fu_224 : STD_LOGIC_VECTOR (1 downto 0);
    signal Horizontal_Sobel_5_fu_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal G1_Sum_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_Sum_1_fu_1699_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal G2_Sum_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal G2_Sum_1_fu_1716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal indx_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_indx_load_4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_indx_load_5 : STD_LOGIC_VECTOR (31 downto 0);
    signal indx_2_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Mask_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln55_1_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_Mask_load_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_Mask_load_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_Mask_load_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_Mask_load_7 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln55_2_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln55_3_fu_941_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_Mask_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_Mask_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln55_fu_846_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal G2_3_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal G2_1_fu_1682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal G2_2_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal G2_fu_1641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_3_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_1_fu_1600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_2_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal G1_fu_1536_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal grp_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln54_fu_867_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln54_1_fu_952_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln54_2_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_V_7_fu_1889_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_594_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_606_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_857_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln54_2_fu_891_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln54_3_fu_923_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln98_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln97_fu_982_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1904_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal data_V_fu_1084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_1105_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_1109_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_12_fu_1095_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_fu_1123_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_fu_1127_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_fu_1141_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_1133_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_1147_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_fu_1151_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_fu_1159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_1119_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_fu_1167_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_6_fu_1179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_1173_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_fu_1187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_1191_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_1201_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_1087_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_1209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln112_fu_1248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next155_fu_1236_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln123_fu_1274_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln123_fu_1274_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_45_fu_1230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln111_2_fu_1280_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln118_3_fu_1292_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln118_3_fu_1292_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next155_mid1_fu_1298_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln111_3_fu_1304_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln119_1_fu_1316_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln119_1_fu_1316_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln111_fu_1254_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln118_3_fu_1292_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln118_1_fu_1322_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln118_3_fu_1326_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln119_1_fu_1316_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln119_1_fu_1337_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln123_fu_1274_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln114_fu_1348_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal empty_53_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_52_fu_1363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_47_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_46_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln113_cast_fu_1359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln118_fu_1399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln118_1_fu_1405_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln118_4_fu_1409_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln119_2_fu_1420_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln123_fu_1431_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln118_1_fu_1442_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln118_4_fu_1448_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln118_5_fu_1452_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln119_3_fu_1463_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln123_1_fu_1474_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln118_fu_1498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln118_2_fu_1524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln118_2_fu_1530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln118_1_fu_1511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln119_fu_1550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln119_fu_1571_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln119_1_fu_1580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln119_fu_1558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln119_1_fu_1588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_fu_1594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln119_fu_1571_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln122_fu_1627_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln122_fu_1635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln122_fu_1618_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln124_fu_1668_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln124_fu_1676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln124_fu_1659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln127_1_fu_1745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln127_fu_1733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_V_1_fu_1757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_1779_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_1_fu_1783_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_14_fu_1769_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln510_1_fu_1797_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln510_1_fu_1801_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1311_1_fu_1815_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_1_fu_1807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_1_fu_1821_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ush_1_fu_1825_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_prom_i_i_i_i_i139_cast_cast_cast_fu_1833_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_1793_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal r_V_2_fu_1841_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_11_fu_1853_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_3_fu_1847_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln662_1_fu_1861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1865_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_fu_1875_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_1761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_6_fu_1883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1904_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1904_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1904_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_594_ce : STD_LOGIC;
    signal grp_fu_606_ce : STD_LOGIC;
    signal grp_fu_612_ce : STD_LOGIC;
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal regslice_both_Data_Out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal regslice_both_Data_In_V_data_V_U_apdone_blk : STD_LOGIC;
    signal Data_In_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal Data_In_TVALID_int_regslice : STD_LOGIC;
    signal Data_In_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Data_In_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Data_In_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal Data_In_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_Data_In_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_In_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Data_In_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal Data_In_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_Data_In_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_In_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Data_In_V_user_V_U_apdone_blk : STD_LOGIC;
    signal Data_In_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_Data_In_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_In_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Data_In_V_last_V_U_apdone_blk : STD_LOGIC;
    signal Data_In_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_Data_In_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_In_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Data_In_V_id_V_U_apdone_blk : STD_LOGIC;
    signal Data_In_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_Data_In_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_In_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_Data_In_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal Data_In_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_Data_In_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_In_V_dest_V_U_ack_in : STD_LOGIC;
    signal Data_Out_TVALID_int_regslice : STD_LOGIC;
    signal Data_Out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Data_Out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_Out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Data_Out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Data_Out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_Out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Data_Out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Data_Out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_Out_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Data_Out_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Data_Out_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_Out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Data_Out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Data_Out_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_Out_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Data_Out_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Data_Out_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_Data_Out_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_Data_Out_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_Data_Out_V_dest_V_U_vld_out : STD_LOGIC;
    signal grp_fu_1904_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1904_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln118_3_fu_1292_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln119_1_fu_1316_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln119_fu_1571_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln123_fu_1274_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_condition_1286 : BOOLEAN;
    signal ap_condition_1295 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Sobel_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Sobel_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Sobel_sitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Sobel_dsqrt_64ns_64ns_64_30_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Sobel_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component Sobel_mul_32s_2s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Sobel_mul_32s_2ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Sobel_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Sobel_mac_muladd_6ns_8ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component Sobel_Image IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address4 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address5 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address6 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address7 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address8 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address9 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address10 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address11 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Sobel_Sobel_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Sobel_Array_Image IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Sobel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Sobel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component Sobel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    Image_U : component Sobel_Image
    generic map (
        DataWidth => 32,
        AddressRange => 5000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Image_address0,
        ce0 => Image_ce0,
        we0 => Image_we0,
        d0 => Image_d0,
        q0 => Image_q0,
        address1 => Image_address1,
        ce1 => Image_ce1,
        q1 => Image_q1,
        address2 => Image_address2,
        ce2 => Image_ce2,
        q2 => Image_q2,
        address3 => Image_address3,
        ce3 => Image_ce3,
        q3 => Image_q3,
        address4 => Image_address4,
        ce4 => Image_ce4,
        q4 => Image_q4,
        address5 => Image_address5,
        ce5 => Image_ce5,
        q5 => Image_q5,
        address6 => Image_address6,
        ce6 => Image_ce6,
        q6 => Image_q6,
        address7 => Image_address7,
        ce7 => Image_ce7,
        q7 => Image_q7,
        address8 => Image_address8,
        ce8 => Image_ce8,
        q8 => Image_q8,
        address9 => Image_address9,
        ce9 => Image_ce9,
        q9 => Image_q9,
        address10 => Image_address10,
        ce10 => Image_ce10,
        q10 => Image_q10,
        address11 => Image_address11,
        ce11 => Image_ce11,
        q11 => Image_q11);

    Sobel_1_U : component Sobel_Sobel_1
    generic map (
        DataWidth => 32,
        AddressRange => 5000,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Sobel_addr_reg_2250_pp2_iter43_reg,
        ce0 => Sobel_1_ce0,
        we0 => Sobel_1_we0,
        d0 => Sobel_1_d0,
        address1 => Sobel_addr_reg_2250_pp2_iter44_reg,
        ce1 => Sobel_1_ce1,
        q1 => Sobel_1_q1);

    Array_Image_U : component Sobel_Array_Image
    generic map (
        DataWidth => 32,
        AddressRange => 15000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Array_Image_address0,
        ce0 => Array_Image_ce0,
        we0 => Array_Image_we0,
        d0 => Array_Image_d0,
        q0 => Array_Image_q0,
        address1 => Array_Image_address1,
        ce1 => Array_Image_ce1,
        q1 => Array_Image_q1);

    dadd_64ns_64ns_64_5_full_dsp_1_U1 : component Sobel_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_590_p0,
        din1 => grp_fu_590_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_590_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U2 : component Sobel_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_594_p0,
        din1 => grp_fu_594_p1,
        ce => grp_fu_594_ce,
        dout => grp_fu_594_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U3 : component Sobel_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv1_reg_2162,
        din1 => ap_const_lv64_3FE2C8B439581062,
        ce => ap_const_logic_1,
        dout => grp_fu_599_p2);

    sitodp_32ns_64_4_no_dsp_1_U4 : component Sobel_sitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_606_p0,
        ce => grp_fu_606_ce,
        dout => grp_fu_606_p1);

    sitodp_32ns_64_4_no_dsp_1_U5 : component Sobel_sitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => G_fu_176,
        ce => ap_const_logic_1,
        dout => grp_fu_609_p1);

    dsqrt_64ns_64ns_64_30_no_dsp_1_U6 : component Sobel_dsqrt_64ns_64ns_64_30_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv64_0,
        din1 => reg_651,
        ce => grp_fu_612_ce,
        dout => grp_fu_612_p2);

    mul_6ns_8ns_13_1_1_U7 : component Sobel_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln123_fu_1274_p0,
        din1 => mul_ln123_fu_1274_p1,
        dout => mul_ln123_fu_1274_p2);

    mul_6ns_8ns_13_1_1_U8 : component Sobel_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln118_3_fu_1292_p0,
        din1 => mul_ln118_3_fu_1292_p1,
        dout => mul_ln118_3_fu_1292_p2);

    mul_6ns_8ns_13_1_1_U9 : component Sobel_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln119_1_fu_1316_p0,
        din1 => mul_ln119_1_fu_1316_p1,
        dout => mul_ln119_1_fu_1316_p2);

    mul_32s_2s_32_1_1_U10 : component Sobel_mul_32s_2s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Image_q11,
        din1 => Vertical_Sobel_fu_184,
        dout => mul_ln118_fu_1498_p2);

    mul_32s_2s_32_1_1_U11 : component Sobel_mul_32s_2s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Image_q10,
        din1 => Vertical_Sobel_1_fu_188,
        dout => mul_ln118_1_fu_1511_p2);

    mul_32s_2s_32_1_1_U12 : component Sobel_mul_32s_2s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Image_q9,
        din1 => Vertical_Sobel_2_fu_192,
        dout => mul_ln118_2_fu_1524_p2);

    mul_32s_2ns_32_1_1_U13 : component Sobel_mul_32s_2ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Image_q7,
        din1 => mul_ln119_fu_1571_p1,
        dout => mul_ln119_fu_1571_p2);

    mul_32s_2s_32_1_1_U14 : component Sobel_mul_32s_2s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Image_q5,
        din1 => Horizontal_Sobel_fu_208,
        dout => mul_ln122_fu_1618_p2);

    mul_32s_2s_32_1_1_U15 : component Sobel_mul_32s_2s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => Image_q1,
        din1 => Horizontal_Sobel_4_fu_224,
        dout => mul_ln124_fu_1659_p2);

    mul_32s_32s_32_1_1_U16 : component Sobel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => G1_Sum_fu_240,
        din1 => G1_Sum_fu_240,
        dout => mul_ln127_fu_1733_p2);

    mul_32s_32s_32_1_1_U17 : component Sobel_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => G2_Sum_fu_244,
        din1 => G2_Sum_fu_244,
        dout => mul_ln127_1_fu_1745_p2);

    mac_muladd_6ns_8ns_7ns_13_4_1_U18 : component Sobel_mac_muladd_6ns_8ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1904_p0,
        din1 => grp_fu_1904_p1,
        din2 => grp_fu_1904_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1904_p3);

    regslice_both_Data_In_V_data_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Data_In_TDATA,
        vld_in => Data_In_TVALID,
        ack_in => regslice_both_Data_In_V_data_V_U_ack_in,
        data_out => Data_In_TDATA_int_regslice,
        vld_out => Data_In_TVALID_int_regslice,
        ack_out => Data_In_TREADY_int_regslice,
        apdone_blk => regslice_both_Data_In_V_data_V_U_apdone_blk);

    regslice_both_Data_In_V_keep_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Data_In_TKEEP,
        vld_in => Data_In_TVALID,
        ack_in => regslice_both_Data_In_V_keep_V_U_ack_in,
        data_out => Data_In_TKEEP_int_regslice,
        vld_out => regslice_both_Data_In_V_keep_V_U_vld_out,
        ack_out => Data_In_TREADY_int_regslice,
        apdone_blk => regslice_both_Data_In_V_keep_V_U_apdone_blk);

    regslice_both_Data_In_V_strb_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Data_In_TSTRB,
        vld_in => Data_In_TVALID,
        ack_in => regslice_both_Data_In_V_strb_V_U_ack_in,
        data_out => Data_In_TSTRB_int_regslice,
        vld_out => regslice_both_Data_In_V_strb_V_U_vld_out,
        ack_out => Data_In_TREADY_int_regslice,
        apdone_blk => regslice_both_Data_In_V_strb_V_U_apdone_blk);

    regslice_both_Data_In_V_user_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Data_In_TUSER,
        vld_in => Data_In_TVALID,
        ack_in => regslice_both_Data_In_V_user_V_U_ack_in,
        data_out => Data_In_TUSER_int_regslice,
        vld_out => regslice_both_Data_In_V_user_V_U_vld_out,
        ack_out => Data_In_TREADY_int_regslice,
        apdone_blk => regslice_both_Data_In_V_user_V_U_apdone_blk);

    regslice_both_Data_In_V_last_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Data_In_TLAST,
        vld_in => Data_In_TVALID,
        ack_in => regslice_both_Data_In_V_last_V_U_ack_in,
        data_out => Data_In_TLAST_int_regslice,
        vld_out => regslice_both_Data_In_V_last_V_U_vld_out,
        ack_out => Data_In_TREADY_int_regslice,
        apdone_blk => regslice_both_Data_In_V_last_V_U_apdone_blk);

    regslice_both_Data_In_V_id_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Data_In_TID,
        vld_in => Data_In_TVALID,
        ack_in => regslice_both_Data_In_V_id_V_U_ack_in,
        data_out => Data_In_TID_int_regslice,
        vld_out => regslice_both_Data_In_V_id_V_U_vld_out,
        ack_out => Data_In_TREADY_int_regslice,
        apdone_blk => regslice_both_Data_In_V_id_V_U_apdone_blk);

    regslice_both_Data_In_V_dest_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Data_In_TDEST,
        vld_in => Data_In_TVALID,
        ack_in => regslice_both_Data_In_V_dest_V_U_ack_in,
        data_out => Data_In_TDEST_int_regslice,
        vld_out => regslice_both_Data_In_V_dest_V_U_vld_out,
        ack_out => Data_In_TREADY_int_regslice,
        apdone_blk => regslice_both_Data_In_V_dest_V_U_apdone_blk);

    regslice_both_Data_Out_V_data_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_phi_mux_tmp_data_V_3_phi_fu_580_p4,
        vld_in => Data_Out_TVALID_int_regslice,
        ack_in => Data_Out_TREADY_int_regslice,
        data_out => Data_Out_TDATA,
        vld_out => regslice_both_Data_Out_V_data_V_U_vld_out,
        ack_out => Data_Out_TREADY,
        apdone_blk => regslice_both_Data_Out_V_data_V_U_apdone_blk);

    regslice_both_Data_Out_V_keep_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ref_tmp_keep_reg_2067,
        vld_in => Data_Out_TVALID_int_regslice,
        ack_in => regslice_both_Data_Out_V_keep_V_U_ack_in_dummy,
        data_out => Data_Out_TKEEP,
        vld_out => regslice_both_Data_Out_V_keep_V_U_vld_out,
        ack_out => Data_Out_TREADY,
        apdone_blk => regslice_both_Data_Out_V_keep_V_U_apdone_blk);

    regslice_both_Data_Out_V_strb_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ref_tmp_strb_reg_2072,
        vld_in => Data_Out_TVALID_int_regslice,
        ack_in => regslice_both_Data_Out_V_strb_V_U_ack_in_dummy,
        data_out => Data_Out_TSTRB,
        vld_out => regslice_both_Data_Out_V_strb_V_U_vld_out,
        ack_out => Data_Out_TREADY,
        apdone_blk => regslice_both_Data_Out_V_strb_V_U_apdone_blk);

    regslice_both_Data_Out_V_user_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ref_tmp_user_reg_2077,
        vld_in => Data_Out_TVALID_int_regslice,
        ack_in => regslice_both_Data_Out_V_user_V_U_ack_in_dummy,
        data_out => Data_Out_TUSER,
        vld_out => regslice_both_Data_Out_V_user_V_U_vld_out,
        ack_out => Data_Out_TREADY,
        apdone_blk => regslice_both_Data_Out_V_user_V_U_apdone_blk);

    regslice_both_Data_Out_V_last_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_1,
        vld_in => Data_Out_TVALID_int_regslice,
        ack_in => regslice_both_Data_Out_V_last_V_U_ack_in_dummy,
        data_out => Data_Out_TLAST,
        vld_out => regslice_both_Data_Out_V_last_V_U_vld_out,
        ack_out => Data_Out_TREADY,
        apdone_blk => regslice_both_Data_Out_V_last_V_U_apdone_blk);

    regslice_both_Data_Out_V_id_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ref_tmp_id_reg_2086,
        vld_in => Data_Out_TVALID_int_regslice,
        ack_in => regslice_both_Data_Out_V_id_V_U_ack_in_dummy,
        data_out => Data_Out_TID,
        vld_out => regslice_both_Data_Out_V_id_V_U_vld_out,
        ack_out => Data_Out_TREADY,
        apdone_blk => regslice_both_Data_Out_V_id_V_U_apdone_blk);

    regslice_both_Data_Out_V_dest_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ref_tmp_dest_reg_2091,
        vld_in => Data_Out_TVALID_int_regslice,
        ack_in => regslice_both_Data_Out_V_dest_V_U_ack_in_dummy,
        data_out => Data_Out_TDEST,
        vld_out => regslice_both_Data_Out_V_dest_V_U_vld_out,
        ack_out => Data_Out_TREADY,
        apdone_blk => regslice_both_Data_Out_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter31 <= ap_enable_reg_pp2_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter32 <= ap_enable_reg_pp2_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter33 <= ap_enable_reg_pp2_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter34 <= ap_enable_reg_pp2_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter35 <= ap_enable_reg_pp2_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter36 <= ap_enable_reg_pp2_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter37 <= ap_enable_reg_pp2_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter38 <= ap_enable_reg_pp2_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter39 <= ap_enable_reg_pp2_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter40 <= ap_enable_reg_pp2_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter41 <= ap_enable_reg_pp2_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter42 <= ap_enable_reg_pp2_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter43 <= ap_enable_reg_pp2_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter44 <= ap_enable_reg_pp2_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter45 <= ap_enable_reg_pp2_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter46 <= ap_enable_reg_pp2_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter47 <= ap_enable_reg_pp2_iter46;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    ap_enable_reg_pp2_iter47 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    B_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                B_fu_180 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
                B_fu_180 <= Array_Image_q1;
            end if; 
        end if;
    end process;

    G1_Sum_fu_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                G1_Sum_fu_240 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (empty_48_reg_2260_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_54_reg_2256_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter1_reg = ap_const_lv1_0))) then 
                G1_Sum_fu_240 <= G1_Sum_1_fu_1699_p2;
            end if; 
        end if;
    end process;

    G2_Sum_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                G2_Sum_fu_244 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (empty_48_reg_2260_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_54_reg_2256_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter1_reg = ap_const_lv1_0))) then 
                G2_Sum_fu_244 <= G2_Sum_1_fu_1716_p2;
            end if; 
        end if;
    end process;

    G_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                G_fu_176 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
                G_fu_176 <= Array_Image_q0;
            end if; 
        end if;
    end process;

    Horizontal_Sobel_1_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Horizontal_Sobel_1_fu_212 <= ap_const_lv1_1;
        end if;
    end process;

    Horizontal_Sobel_4_fu_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Horizontal_Sobel_4_fu_224 <= ap_const_lv2_3;
        end if;
    end process;

    Horizontal_Sobel_5_fu_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Horizontal_Sobel_5_fu_228 <= ap_const_lv1_1;
        end if;
    end process;

    Horizontal_Sobel_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Horizontal_Sobel_fu_208 <= ap_const_lv2_3;
        end if;
    end process;

    Mask_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Data_In_TVALID_int_regslice))) then 
                Mask_fu_256 <= shl_ln55_fu_846_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Data_In_TVALID_int_regslice))) then 
                Mask_fu_256 <= ap_const_lv32_FF;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                Mask_fu_256 <= shl_ln55_3_fu_941_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                Mask_fu_256 <= shl_ln55_2_fu_909_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                Mask_fu_256 <= shl_ln55_1_fu_877_p2;
            end if; 
        end if;
    end process;

    R_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                R_fu_172 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
                R_fu_172 <= Array_Image_q1;
            end if; 
        end if;
    end process;

    Vertical_Sobel_1_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Vertical_Sobel_1_fu_188(1) <= '1';
        end if;
    end process;

    Vertical_Sobel_2_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Vertical_Sobel_2_fu_192 <= ap_const_lv2_3;
        end if;
    end process;

    Vertical_Sobel_3_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Vertical_Sobel_3_fu_196 <= ap_const_lv1_1;
        end if;
    end process;

    Vertical_Sobel_4_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Vertical_Sobel_4_fu_200(1) <= '1';
        end if;
    end process;

    Vertical_Sobel_5_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Vertical_Sobel_5_fu_204 <= ap_const_lv1_1;
        end if;
    end process;

    Vertical_Sobel_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            Vertical_Sobel_fu_184 <= ap_const_lv2_3;
        end if;
    end process;

    i_1_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
                i_1_reg_532 <= add_ln98_reg_2142;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_532 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    i_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i_reg_554 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln111_reg_2231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_reg_554 <= select_ln111_1_reg_2235;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_543_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar_flatten7_reg_543 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln111_fu_1242_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten7_reg_543 <= add_ln111_fu_1224_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
                indvar_flatten_reg_510 <= add_ln97_1_reg_2106;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_510 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indx_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                indx_fu_252 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln97_fu_976_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indx_fu_252 <= indx_2_fu_1026_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Data_In_TVALID_int_regslice)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln97_fu_976_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln97_reg_2111 = ap_const_lv1_0)))) then 
                indx_fu_252 <= grp_fu_640_p2;
            end if; 
        end if;
    end process;

    j_1_reg_565_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                j_1_reg_565 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln111_fu_1242_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_1_reg_565 <= add_ln112_fu_1485_p2;
            end if; 
        end if;
    end process;

    j_reg_521_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
                j_reg_521 <= select_ln97_1_reg_2121;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_521 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln111_reg_2231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_48_reg_2260 = ap_const_lv1_0) and (empty_54_reg_2256 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                G1_2_fu_272 <= G1_fu_1536_p2;
                G1_3_fu_268 <= G1_1_fu_1600_p2;
                G2_2_fu_264 <= G2_fu_1641_p2;
                G2_3_fu_260 <= G2_1_fu_1682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln111_fu_1242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                Sobel_addr_reg_2250 <= zext_ln114_fu_1354_p1(13 - 1 downto 0);
                empty_54_reg_2256 <= empty_54_fu_1375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                Sobel_addr_reg_2250_pp2_iter10_reg <= Sobel_addr_reg_2250_pp2_iter9_reg;
                Sobel_addr_reg_2250_pp2_iter11_reg <= Sobel_addr_reg_2250_pp2_iter10_reg;
                Sobel_addr_reg_2250_pp2_iter12_reg <= Sobel_addr_reg_2250_pp2_iter11_reg;
                Sobel_addr_reg_2250_pp2_iter13_reg <= Sobel_addr_reg_2250_pp2_iter12_reg;
                Sobel_addr_reg_2250_pp2_iter14_reg <= Sobel_addr_reg_2250_pp2_iter13_reg;
                Sobel_addr_reg_2250_pp2_iter15_reg <= Sobel_addr_reg_2250_pp2_iter14_reg;
                Sobel_addr_reg_2250_pp2_iter16_reg <= Sobel_addr_reg_2250_pp2_iter15_reg;
                Sobel_addr_reg_2250_pp2_iter17_reg <= Sobel_addr_reg_2250_pp2_iter16_reg;
                Sobel_addr_reg_2250_pp2_iter18_reg <= Sobel_addr_reg_2250_pp2_iter17_reg;
                Sobel_addr_reg_2250_pp2_iter19_reg <= Sobel_addr_reg_2250_pp2_iter18_reg;
                Sobel_addr_reg_2250_pp2_iter20_reg <= Sobel_addr_reg_2250_pp2_iter19_reg;
                Sobel_addr_reg_2250_pp2_iter21_reg <= Sobel_addr_reg_2250_pp2_iter20_reg;
                Sobel_addr_reg_2250_pp2_iter22_reg <= Sobel_addr_reg_2250_pp2_iter21_reg;
                Sobel_addr_reg_2250_pp2_iter23_reg <= Sobel_addr_reg_2250_pp2_iter22_reg;
                Sobel_addr_reg_2250_pp2_iter24_reg <= Sobel_addr_reg_2250_pp2_iter23_reg;
                Sobel_addr_reg_2250_pp2_iter25_reg <= Sobel_addr_reg_2250_pp2_iter24_reg;
                Sobel_addr_reg_2250_pp2_iter26_reg <= Sobel_addr_reg_2250_pp2_iter25_reg;
                Sobel_addr_reg_2250_pp2_iter27_reg <= Sobel_addr_reg_2250_pp2_iter26_reg;
                Sobel_addr_reg_2250_pp2_iter28_reg <= Sobel_addr_reg_2250_pp2_iter27_reg;
                Sobel_addr_reg_2250_pp2_iter29_reg <= Sobel_addr_reg_2250_pp2_iter28_reg;
                Sobel_addr_reg_2250_pp2_iter2_reg <= Sobel_addr_reg_2250_pp2_iter1_reg;
                Sobel_addr_reg_2250_pp2_iter30_reg <= Sobel_addr_reg_2250_pp2_iter29_reg;
                Sobel_addr_reg_2250_pp2_iter31_reg <= Sobel_addr_reg_2250_pp2_iter30_reg;
                Sobel_addr_reg_2250_pp2_iter32_reg <= Sobel_addr_reg_2250_pp2_iter31_reg;
                Sobel_addr_reg_2250_pp2_iter33_reg <= Sobel_addr_reg_2250_pp2_iter32_reg;
                Sobel_addr_reg_2250_pp2_iter34_reg <= Sobel_addr_reg_2250_pp2_iter33_reg;
                Sobel_addr_reg_2250_pp2_iter35_reg <= Sobel_addr_reg_2250_pp2_iter34_reg;
                Sobel_addr_reg_2250_pp2_iter36_reg <= Sobel_addr_reg_2250_pp2_iter35_reg;
                Sobel_addr_reg_2250_pp2_iter37_reg <= Sobel_addr_reg_2250_pp2_iter36_reg;
                Sobel_addr_reg_2250_pp2_iter38_reg <= Sobel_addr_reg_2250_pp2_iter37_reg;
                Sobel_addr_reg_2250_pp2_iter39_reg <= Sobel_addr_reg_2250_pp2_iter38_reg;
                Sobel_addr_reg_2250_pp2_iter3_reg <= Sobel_addr_reg_2250_pp2_iter2_reg;
                Sobel_addr_reg_2250_pp2_iter40_reg <= Sobel_addr_reg_2250_pp2_iter39_reg;
                Sobel_addr_reg_2250_pp2_iter41_reg <= Sobel_addr_reg_2250_pp2_iter40_reg;
                Sobel_addr_reg_2250_pp2_iter42_reg <= Sobel_addr_reg_2250_pp2_iter41_reg;
                Sobel_addr_reg_2250_pp2_iter43_reg <= Sobel_addr_reg_2250_pp2_iter42_reg;
                Sobel_addr_reg_2250_pp2_iter44_reg <= Sobel_addr_reg_2250_pp2_iter43_reg;
                Sobel_addr_reg_2250_pp2_iter4_reg <= Sobel_addr_reg_2250_pp2_iter3_reg;
                Sobel_addr_reg_2250_pp2_iter5_reg <= Sobel_addr_reg_2250_pp2_iter4_reg;
                Sobel_addr_reg_2250_pp2_iter6_reg <= Sobel_addr_reg_2250_pp2_iter5_reg;
                Sobel_addr_reg_2250_pp2_iter7_reg <= Sobel_addr_reg_2250_pp2_iter6_reg;
                Sobel_addr_reg_2250_pp2_iter8_reg <= Sobel_addr_reg_2250_pp2_iter7_reg;
                Sobel_addr_reg_2250_pp2_iter9_reg <= Sobel_addr_reg_2250_pp2_iter8_reg;
                empty_48_reg_2260_pp2_iter10_reg <= empty_48_reg_2260_pp2_iter9_reg;
                empty_48_reg_2260_pp2_iter11_reg <= empty_48_reg_2260_pp2_iter10_reg;
                empty_48_reg_2260_pp2_iter12_reg <= empty_48_reg_2260_pp2_iter11_reg;
                empty_48_reg_2260_pp2_iter13_reg <= empty_48_reg_2260_pp2_iter12_reg;
                empty_48_reg_2260_pp2_iter14_reg <= empty_48_reg_2260_pp2_iter13_reg;
                empty_48_reg_2260_pp2_iter15_reg <= empty_48_reg_2260_pp2_iter14_reg;
                empty_48_reg_2260_pp2_iter16_reg <= empty_48_reg_2260_pp2_iter15_reg;
                empty_48_reg_2260_pp2_iter17_reg <= empty_48_reg_2260_pp2_iter16_reg;
                empty_48_reg_2260_pp2_iter18_reg <= empty_48_reg_2260_pp2_iter17_reg;
                empty_48_reg_2260_pp2_iter19_reg <= empty_48_reg_2260_pp2_iter18_reg;
                empty_48_reg_2260_pp2_iter20_reg <= empty_48_reg_2260_pp2_iter19_reg;
                empty_48_reg_2260_pp2_iter21_reg <= empty_48_reg_2260_pp2_iter20_reg;
                empty_48_reg_2260_pp2_iter22_reg <= empty_48_reg_2260_pp2_iter21_reg;
                empty_48_reg_2260_pp2_iter23_reg <= empty_48_reg_2260_pp2_iter22_reg;
                empty_48_reg_2260_pp2_iter24_reg <= empty_48_reg_2260_pp2_iter23_reg;
                empty_48_reg_2260_pp2_iter25_reg <= empty_48_reg_2260_pp2_iter24_reg;
                empty_48_reg_2260_pp2_iter26_reg <= empty_48_reg_2260_pp2_iter25_reg;
                empty_48_reg_2260_pp2_iter27_reg <= empty_48_reg_2260_pp2_iter26_reg;
                empty_48_reg_2260_pp2_iter28_reg <= empty_48_reg_2260_pp2_iter27_reg;
                empty_48_reg_2260_pp2_iter29_reg <= empty_48_reg_2260_pp2_iter28_reg;
                empty_48_reg_2260_pp2_iter2_reg <= empty_48_reg_2260_pp2_iter1_reg;
                empty_48_reg_2260_pp2_iter30_reg <= empty_48_reg_2260_pp2_iter29_reg;
                empty_48_reg_2260_pp2_iter31_reg <= empty_48_reg_2260_pp2_iter30_reg;
                empty_48_reg_2260_pp2_iter32_reg <= empty_48_reg_2260_pp2_iter31_reg;
                empty_48_reg_2260_pp2_iter33_reg <= empty_48_reg_2260_pp2_iter32_reg;
                empty_48_reg_2260_pp2_iter34_reg <= empty_48_reg_2260_pp2_iter33_reg;
                empty_48_reg_2260_pp2_iter35_reg <= empty_48_reg_2260_pp2_iter34_reg;
                empty_48_reg_2260_pp2_iter36_reg <= empty_48_reg_2260_pp2_iter35_reg;
                empty_48_reg_2260_pp2_iter37_reg <= empty_48_reg_2260_pp2_iter36_reg;
                empty_48_reg_2260_pp2_iter38_reg <= empty_48_reg_2260_pp2_iter37_reg;
                empty_48_reg_2260_pp2_iter39_reg <= empty_48_reg_2260_pp2_iter38_reg;
                empty_48_reg_2260_pp2_iter3_reg <= empty_48_reg_2260_pp2_iter2_reg;
                empty_48_reg_2260_pp2_iter40_reg <= empty_48_reg_2260_pp2_iter39_reg;
                empty_48_reg_2260_pp2_iter41_reg <= empty_48_reg_2260_pp2_iter40_reg;
                empty_48_reg_2260_pp2_iter42_reg <= empty_48_reg_2260_pp2_iter41_reg;
                empty_48_reg_2260_pp2_iter43_reg <= empty_48_reg_2260_pp2_iter42_reg;
                empty_48_reg_2260_pp2_iter44_reg <= empty_48_reg_2260_pp2_iter43_reg;
                empty_48_reg_2260_pp2_iter45_reg <= empty_48_reg_2260_pp2_iter44_reg;
                empty_48_reg_2260_pp2_iter4_reg <= empty_48_reg_2260_pp2_iter3_reg;
                empty_48_reg_2260_pp2_iter5_reg <= empty_48_reg_2260_pp2_iter4_reg;
                empty_48_reg_2260_pp2_iter6_reg <= empty_48_reg_2260_pp2_iter5_reg;
                empty_48_reg_2260_pp2_iter7_reg <= empty_48_reg_2260_pp2_iter6_reg;
                empty_48_reg_2260_pp2_iter8_reg <= empty_48_reg_2260_pp2_iter7_reg;
                empty_48_reg_2260_pp2_iter9_reg <= empty_48_reg_2260_pp2_iter8_reg;
                empty_54_reg_2256_pp2_iter10_reg <= empty_54_reg_2256_pp2_iter9_reg;
                empty_54_reg_2256_pp2_iter11_reg <= empty_54_reg_2256_pp2_iter10_reg;
                empty_54_reg_2256_pp2_iter12_reg <= empty_54_reg_2256_pp2_iter11_reg;
                empty_54_reg_2256_pp2_iter13_reg <= empty_54_reg_2256_pp2_iter12_reg;
                empty_54_reg_2256_pp2_iter14_reg <= empty_54_reg_2256_pp2_iter13_reg;
                empty_54_reg_2256_pp2_iter15_reg <= empty_54_reg_2256_pp2_iter14_reg;
                empty_54_reg_2256_pp2_iter16_reg <= empty_54_reg_2256_pp2_iter15_reg;
                empty_54_reg_2256_pp2_iter17_reg <= empty_54_reg_2256_pp2_iter16_reg;
                empty_54_reg_2256_pp2_iter18_reg <= empty_54_reg_2256_pp2_iter17_reg;
                empty_54_reg_2256_pp2_iter19_reg <= empty_54_reg_2256_pp2_iter18_reg;
                empty_54_reg_2256_pp2_iter20_reg <= empty_54_reg_2256_pp2_iter19_reg;
                empty_54_reg_2256_pp2_iter21_reg <= empty_54_reg_2256_pp2_iter20_reg;
                empty_54_reg_2256_pp2_iter22_reg <= empty_54_reg_2256_pp2_iter21_reg;
                empty_54_reg_2256_pp2_iter23_reg <= empty_54_reg_2256_pp2_iter22_reg;
                empty_54_reg_2256_pp2_iter24_reg <= empty_54_reg_2256_pp2_iter23_reg;
                empty_54_reg_2256_pp2_iter25_reg <= empty_54_reg_2256_pp2_iter24_reg;
                empty_54_reg_2256_pp2_iter26_reg <= empty_54_reg_2256_pp2_iter25_reg;
                empty_54_reg_2256_pp2_iter27_reg <= empty_54_reg_2256_pp2_iter26_reg;
                empty_54_reg_2256_pp2_iter28_reg <= empty_54_reg_2256_pp2_iter27_reg;
                empty_54_reg_2256_pp2_iter29_reg <= empty_54_reg_2256_pp2_iter28_reg;
                empty_54_reg_2256_pp2_iter2_reg <= empty_54_reg_2256_pp2_iter1_reg;
                empty_54_reg_2256_pp2_iter30_reg <= empty_54_reg_2256_pp2_iter29_reg;
                empty_54_reg_2256_pp2_iter31_reg <= empty_54_reg_2256_pp2_iter30_reg;
                empty_54_reg_2256_pp2_iter32_reg <= empty_54_reg_2256_pp2_iter31_reg;
                empty_54_reg_2256_pp2_iter33_reg <= empty_54_reg_2256_pp2_iter32_reg;
                empty_54_reg_2256_pp2_iter34_reg <= empty_54_reg_2256_pp2_iter33_reg;
                empty_54_reg_2256_pp2_iter35_reg <= empty_54_reg_2256_pp2_iter34_reg;
                empty_54_reg_2256_pp2_iter36_reg <= empty_54_reg_2256_pp2_iter35_reg;
                empty_54_reg_2256_pp2_iter37_reg <= empty_54_reg_2256_pp2_iter36_reg;
                empty_54_reg_2256_pp2_iter38_reg <= empty_54_reg_2256_pp2_iter37_reg;
                empty_54_reg_2256_pp2_iter39_reg <= empty_54_reg_2256_pp2_iter38_reg;
                empty_54_reg_2256_pp2_iter3_reg <= empty_54_reg_2256_pp2_iter2_reg;
                empty_54_reg_2256_pp2_iter40_reg <= empty_54_reg_2256_pp2_iter39_reg;
                empty_54_reg_2256_pp2_iter41_reg <= empty_54_reg_2256_pp2_iter40_reg;
                empty_54_reg_2256_pp2_iter42_reg <= empty_54_reg_2256_pp2_iter41_reg;
                empty_54_reg_2256_pp2_iter43_reg <= empty_54_reg_2256_pp2_iter42_reg;
                empty_54_reg_2256_pp2_iter44_reg <= empty_54_reg_2256_pp2_iter43_reg;
                empty_54_reg_2256_pp2_iter45_reg <= empty_54_reg_2256_pp2_iter44_reg;
                empty_54_reg_2256_pp2_iter4_reg <= empty_54_reg_2256_pp2_iter3_reg;
                empty_54_reg_2256_pp2_iter5_reg <= empty_54_reg_2256_pp2_iter4_reg;
                empty_54_reg_2256_pp2_iter6_reg <= empty_54_reg_2256_pp2_iter5_reg;
                empty_54_reg_2256_pp2_iter7_reg <= empty_54_reg_2256_pp2_iter6_reg;
                empty_54_reg_2256_pp2_iter8_reg <= empty_54_reg_2256_pp2_iter7_reg;
                empty_54_reg_2256_pp2_iter9_reg <= empty_54_reg_2256_pp2_iter8_reg;
                icmp_ln111_reg_2231_pp2_iter10_reg <= icmp_ln111_reg_2231_pp2_iter9_reg;
                icmp_ln111_reg_2231_pp2_iter11_reg <= icmp_ln111_reg_2231_pp2_iter10_reg;
                icmp_ln111_reg_2231_pp2_iter12_reg <= icmp_ln111_reg_2231_pp2_iter11_reg;
                icmp_ln111_reg_2231_pp2_iter13_reg <= icmp_ln111_reg_2231_pp2_iter12_reg;
                icmp_ln111_reg_2231_pp2_iter14_reg <= icmp_ln111_reg_2231_pp2_iter13_reg;
                icmp_ln111_reg_2231_pp2_iter15_reg <= icmp_ln111_reg_2231_pp2_iter14_reg;
                icmp_ln111_reg_2231_pp2_iter16_reg <= icmp_ln111_reg_2231_pp2_iter15_reg;
                icmp_ln111_reg_2231_pp2_iter17_reg <= icmp_ln111_reg_2231_pp2_iter16_reg;
                icmp_ln111_reg_2231_pp2_iter18_reg <= icmp_ln111_reg_2231_pp2_iter17_reg;
                icmp_ln111_reg_2231_pp2_iter19_reg <= icmp_ln111_reg_2231_pp2_iter18_reg;
                icmp_ln111_reg_2231_pp2_iter20_reg <= icmp_ln111_reg_2231_pp2_iter19_reg;
                icmp_ln111_reg_2231_pp2_iter21_reg <= icmp_ln111_reg_2231_pp2_iter20_reg;
                icmp_ln111_reg_2231_pp2_iter22_reg <= icmp_ln111_reg_2231_pp2_iter21_reg;
                icmp_ln111_reg_2231_pp2_iter23_reg <= icmp_ln111_reg_2231_pp2_iter22_reg;
                icmp_ln111_reg_2231_pp2_iter24_reg <= icmp_ln111_reg_2231_pp2_iter23_reg;
                icmp_ln111_reg_2231_pp2_iter25_reg <= icmp_ln111_reg_2231_pp2_iter24_reg;
                icmp_ln111_reg_2231_pp2_iter26_reg <= icmp_ln111_reg_2231_pp2_iter25_reg;
                icmp_ln111_reg_2231_pp2_iter27_reg <= icmp_ln111_reg_2231_pp2_iter26_reg;
                icmp_ln111_reg_2231_pp2_iter28_reg <= icmp_ln111_reg_2231_pp2_iter27_reg;
                icmp_ln111_reg_2231_pp2_iter29_reg <= icmp_ln111_reg_2231_pp2_iter28_reg;
                icmp_ln111_reg_2231_pp2_iter2_reg <= icmp_ln111_reg_2231_pp2_iter1_reg;
                icmp_ln111_reg_2231_pp2_iter30_reg <= icmp_ln111_reg_2231_pp2_iter29_reg;
                icmp_ln111_reg_2231_pp2_iter31_reg <= icmp_ln111_reg_2231_pp2_iter30_reg;
                icmp_ln111_reg_2231_pp2_iter32_reg <= icmp_ln111_reg_2231_pp2_iter31_reg;
                icmp_ln111_reg_2231_pp2_iter33_reg <= icmp_ln111_reg_2231_pp2_iter32_reg;
                icmp_ln111_reg_2231_pp2_iter34_reg <= icmp_ln111_reg_2231_pp2_iter33_reg;
                icmp_ln111_reg_2231_pp2_iter35_reg <= icmp_ln111_reg_2231_pp2_iter34_reg;
                icmp_ln111_reg_2231_pp2_iter36_reg <= icmp_ln111_reg_2231_pp2_iter35_reg;
                icmp_ln111_reg_2231_pp2_iter37_reg <= icmp_ln111_reg_2231_pp2_iter36_reg;
                icmp_ln111_reg_2231_pp2_iter38_reg <= icmp_ln111_reg_2231_pp2_iter37_reg;
                icmp_ln111_reg_2231_pp2_iter39_reg <= icmp_ln111_reg_2231_pp2_iter38_reg;
                icmp_ln111_reg_2231_pp2_iter3_reg <= icmp_ln111_reg_2231_pp2_iter2_reg;
                icmp_ln111_reg_2231_pp2_iter40_reg <= icmp_ln111_reg_2231_pp2_iter39_reg;
                icmp_ln111_reg_2231_pp2_iter41_reg <= icmp_ln111_reg_2231_pp2_iter40_reg;
                icmp_ln111_reg_2231_pp2_iter42_reg <= icmp_ln111_reg_2231_pp2_iter41_reg;
                icmp_ln111_reg_2231_pp2_iter43_reg <= icmp_ln111_reg_2231_pp2_iter42_reg;
                icmp_ln111_reg_2231_pp2_iter44_reg <= icmp_ln111_reg_2231_pp2_iter43_reg;
                icmp_ln111_reg_2231_pp2_iter45_reg <= icmp_ln111_reg_2231_pp2_iter44_reg;
                icmp_ln111_reg_2231_pp2_iter46_reg <= icmp_ln111_reg_2231_pp2_iter45_reg;
                icmp_ln111_reg_2231_pp2_iter4_reg <= icmp_ln111_reg_2231_pp2_iter3_reg;
                icmp_ln111_reg_2231_pp2_iter5_reg <= icmp_ln111_reg_2231_pp2_iter4_reg;
                icmp_ln111_reg_2231_pp2_iter6_reg <= icmp_ln111_reg_2231_pp2_iter5_reg;
                icmp_ln111_reg_2231_pp2_iter7_reg <= icmp_ln111_reg_2231_pp2_iter6_reg;
                icmp_ln111_reg_2231_pp2_iter8_reg <= icmp_ln111_reg_2231_pp2_iter7_reg;
                icmp_ln111_reg_2231_pp2_iter9_reg <= icmp_ln111_reg_2231_pp2_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                Sobel_addr_reg_2250_pp2_iter1_reg <= Sobel_addr_reg_2250;
                empty_48_reg_2260_pp2_iter1_reg <= empty_48_reg_2260;
                empty_54_reg_2256_pp2_iter1_reg <= empty_54_reg_2256;
                icmp_ln111_reg_2231 <= icmp_ln111_fu_1242_p2;
                icmp_ln111_reg_2231_pp2_iter1_reg <= icmp_ln111_reg_2231;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_48_reg_2260_pp2_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_54_reg_2256_pp2_iter2_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter2_reg = ap_const_lv1_0))) then
                add_ln127_reg_2303 <= add_ln127_fu_1751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln97_1_reg_2106 <= add_ln97_1_fu_970_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then
                add_ln98_reg_2142 <= add_ln98_fu_1052_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (icmp_ln97_reg_2111_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_reg_2182 <= grp_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln97_reg_2111_pp1_iter2_reg = ap_const_lv1_0))) then
                conv1_reg_2162 <= grp_fu_609_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111_pp1_iter2_reg = ap_const_lv1_0))) then
                conv2_reg_2167 <= grp_fu_606_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (icmp_ln97_reg_2111_pp1_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                dc_reg_2197 <= grp_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_54_fu_1375_p2 = ap_const_lv1_0) and (icmp_ln111_fu_1242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                empty_48_reg_2260 <= empty_48_fu_1393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln97_reg_2111 <= icmp_ln97_fu_976_p2;
                icmp_ln97_reg_2111_pp1_iter10_reg <= icmp_ln97_reg_2111_pp1_iter9_reg;
                icmp_ln97_reg_2111_pp1_iter1_reg <= icmp_ln97_reg_2111;
                icmp_ln97_reg_2111_pp1_iter2_reg <= icmp_ln97_reg_2111_pp1_iter1_reg;
                icmp_ln97_reg_2111_pp1_iter3_reg <= icmp_ln97_reg_2111_pp1_iter2_reg;
                icmp_ln97_reg_2111_pp1_iter4_reg <= icmp_ln97_reg_2111_pp1_iter3_reg;
                icmp_ln97_reg_2111_pp1_iter5_reg <= icmp_ln97_reg_2111_pp1_iter4_reg;
                icmp_ln97_reg_2111_pp1_iter6_reg <= icmp_ln97_reg_2111_pp1_iter5_reg;
                icmp_ln97_reg_2111_pp1_iter7_reg <= icmp_ln97_reg_2111_pp1_iter6_reg;
                icmp_ln97_reg_2111_pp1_iter8_reg <= icmp_ln97_reg_2111_pp1_iter7_reg;
                icmp_ln97_reg_2111_pp1_iter9_reg <= icmp_ln97_reg_2111_pp1_iter8_reg;
                mul2_reg_2177_pp1_iter7_reg <= mul2_reg_2177;
                mul2_reg_2177_pp1_iter8_reg <= mul2_reg_2177_pp1_iter7_reg;
                select_ln97_1_reg_2121_pp1_iter1_reg <= select_ln97_1_reg_2121;
                select_ln97_1_reg_2121_pp1_iter2_reg <= select_ln97_1_reg_2121_pp1_iter1_reg;
                select_ln97_1_reg_2121_pp1_iter3_reg <= select_ln97_1_reg_2121_pp1_iter2_reg;
                select_ln97_1_reg_2121_pp1_iter4_reg <= select_ln97_1_reg_2121_pp1_iter3_reg;
                select_ln97_1_reg_2121_pp1_iter5_reg <= select_ln97_1_reg_2121_pp1_iter4_reg;
                select_ln97_1_reg_2121_pp1_iter6_reg <= select_ln97_1_reg_2121_pp1_iter5_reg;
                select_ln97_1_reg_2121_pp1_iter7_reg <= select_ln97_1_reg_2121_pp1_iter6_reg;
                select_ln97_1_reg_2121_pp1_iter8_reg <= select_ln97_1_reg_2121_pp1_iter7_reg;
                select_ln97_1_reg_2121_pp1_iter9_reg <= select_ln97_1_reg_2121_pp1_iter8_reg;
                select_ln97_reg_2115_pp1_iter10_reg <= select_ln97_reg_2115_pp1_iter9_reg;
                select_ln97_reg_2115_pp1_iter1_reg <= select_ln97_reg_2115;
                select_ln97_reg_2115_pp1_iter2_reg <= select_ln97_reg_2115_pp1_iter1_reg;
                select_ln97_reg_2115_pp1_iter3_reg <= select_ln97_reg_2115_pp1_iter2_reg;
                select_ln97_reg_2115_pp1_iter4_reg <= select_ln97_reg_2115_pp1_iter3_reg;
                select_ln97_reg_2115_pp1_iter5_reg <= select_ln97_reg_2115_pp1_iter4_reg;
                select_ln97_reg_2115_pp1_iter6_reg <= select_ln97_reg_2115_pp1_iter5_reg;
                select_ln97_reg_2115_pp1_iter7_reg <= select_ln97_reg_2115_pp1_iter6_reg;
                select_ln97_reg_2115_pp1_iter8_reg <= select_ln97_reg_2115_pp1_iter7_reg;
                select_ln97_reg_2115_pp1_iter9_reg <= select_ln97_reg_2115_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln97_reg_2111_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                mul1_reg_2172 <= grp_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (icmp_ln97_reg_2111_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                mul2_reg_2177 <= grp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ref_tmp_dest_reg_2091 <= Data_In_TDEST_int_regslice;
                ref_tmp_id_reg_2086 <= Data_In_TID_int_regslice;
                ref_tmp_keep_reg_2067 <= Data_In_TKEEP_int_regslice;
                ref_tmp_strb_reg_2072 <= Data_In_TSTRB_int_regslice;
                ref_tmp_user_reg_2077 <= Data_In_TUSER_int_regslice;
                tmp_data_V_reg_2060 <= Data_In_TDATA_int_regslice;
                tmp_last_V_reg_2082 <= Data_In_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_48_reg_2260_pp2_iter6_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter6_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln97_reg_2111_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                reg_651 <= grp_fu_606_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_48_reg_2260_pp2_iter42_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter42_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter42_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter43 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln97_reg_2111_pp1_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then
                reg_657 <= grp_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln111_fu_1242_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln111_1_reg_2235 <= select_ln111_1_fu_1262_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln97_fu_976_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln97_1_reg_2121 <= select_ln97_1_fu_1002_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln97_fu_976_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln97_reg_2115 <= select_ln97_fu_994_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((empty_48_reg_2260_pp2_iter36_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (empty_54_reg_2256_pp2_iter36_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter36_reg = ap_const_lv1_0))) then
                tmp_reg_2308 <= grp_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln54_1_reg_2096 <= and_ln54_2_fu_891_p2(31 downto 16);
                trunc_ln54_2_reg_2101 <= and_ln54_3_fu_923_p2(31 downto 24);
            end if;
        end if;
    end process;
    Vertical_Sobel_1_fu_188(0) <= '0';
    Vertical_Sobel_4_fu_200(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp2_iter46, ap_enable_reg_pp2_iter47, tmp_last_V_reg_2082, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln97_fu_976_p2, ap_enable_reg_pp1_iter10, ap_enable_reg_pp2_iter0, icmp_ln111_fu_1242_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp1_stage1_subdone, ap_enable_reg_pp1_iter11, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_CS_fsm_state5, ap_CS_fsm_state79, regslice_both_Data_Out_V_data_V_U_apdone_blk, Data_In_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Data_In_TVALID_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((tmp_last_V_reg_2082 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln97_fu_976_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln97_fu_976_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln111_fu_1242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter47 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter46 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln111_fu_1242_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter47 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter46 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state79 => 
                if (((regslice_both_Data_Out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state79;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    Array_Image_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, zext_ln54_fu_841_p1, zext_ln54_1_fu_872_p1, zext_ln54_2_fu_956_p1, ap_CS_fsm_state4, zext_ln54_3_fu_965_p1, ap_CS_fsm_state5, zext_ln101_fu_1018_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            Array_Image_address0 <= zext_ln101_fu_1018_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Array_Image_address0 <= zext_ln54_3_fu_965_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Array_Image_address0 <= zext_ln54_2_fu_956_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Array_Image_address0 <= zext_ln54_1_fu_872_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Array_Image_address0 <= zext_ln54_fu_841_p1(14 - 1 downto 0);
        else 
            Array_Image_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Array_Image_address1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, zext_ln99_fu_1010_p1, zext_ln103_fu_1047_p1, ap_block_pp1_stage1)
    begin
        if ((ap_enable_reg_pp1_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
                Array_Image_address1 <= zext_ln103_fu_1047_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                Array_Image_address1 <= zext_ln99_fu_1010_p1(14 - 1 downto 0);
            else 
                Array_Image_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            Array_Image_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Array_Image_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_state5, Data_In_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Data_In_TVALID_int_regslice)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            Array_Image_ce0 <= ap_const_logic_1;
        else 
            Array_Image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Array_Image_ce1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            Array_Image_ce1 <= ap_const_logic_1;
        else 
            Array_Image_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Array_Image_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_fu_625_p2, sext_ln54_fu_867_p1, sext_ln54_1_fu_952_p1, sext_ln54_2_fu_961_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Array_Image_d0 <= sext_ln54_2_fu_961_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Array_Image_d0 <= sext_ln54_1_fu_952_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Array_Image_d0 <= sext_ln54_fu_867_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Array_Image_d0 <= grp_fu_625_p2;
        else 
            Array_Image_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Array_Image_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, Data_In_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Data_In_TVALID_int_regslice)))) then 
            Array_Image_we0 <= ap_const_logic_1;
        else 
            Array_Image_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Data_In_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, Data_In_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Data_In_TDATA_blk_n <= Data_In_TVALID_int_regslice;
        else 
            Data_In_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Data_In_TREADY <= regslice_both_Data_In_V_data_V_U_ack_in;

    Data_In_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, Data_In_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = Data_In_TVALID_int_regslice))) then 
            Data_In_TREADY_int_regslice <= ap_const_logic_1;
        else 
            Data_In_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    Data_Out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp2_iter46, ap_block_pp2_stage0, icmp_ln111_reg_2231_pp2_iter45_reg, ap_enable_reg_pp2_iter47, icmp_ln111_reg_2231_pp2_iter46_reg, Data_Out_TREADY_int_regslice)
    begin
        if ((((icmp_ln111_reg_2231_pp2_iter46_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter47 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter46 = ap_const_logic_1)))) then 
            Data_Out_TDATA_blk_n <= Data_Out_TREADY_int_regslice;
        else 
            Data_Out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Data_Out_TVALID <= regslice_both_Data_Out_V_data_V_U_vld_out;

    Data_Out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp2_iter46, icmp_ln111_reg_2231_pp2_iter45_reg, ap_block_pp2_stage0_11001)
    begin
        if (((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter46 = ap_const_logic_1))) then 
            Data_Out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            Data_Out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    G1_1_fu_1600_p2 <= std_logic_vector(unsigned(add_ln119_fu_1594_p2) + unsigned(mul_ln119_fu_1571_p2));
    G1_Sum_1_fu_1699_p2 <= std_logic_vector(unsigned(G1_3_fu_268) + unsigned(G1_2_fu_272));
    G1_fu_1536_p2 <= std_logic_vector(unsigned(add_ln118_2_fu_1530_p2) + unsigned(mul_ln118_1_fu_1511_p2));
    G2_1_fu_1682_p2 <= std_logic_vector(unsigned(and_ln124_fu_1676_p2) + unsigned(mul_ln124_fu_1659_p2));
    G2_Sum_1_fu_1716_p2 <= std_logic_vector(unsigned(G2_3_fu_260) + unsigned(G2_2_fu_264));
    G2_fu_1641_p2 <= std_logic_vector(unsigned(and_ln122_fu_1635_p2) + unsigned(mul_ln122_fu_1618_p2));

    Image_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter11, ap_block_pp1_stage0, zext_ln106_2_fu_1080_p1, zext_ln119_4_fu_1469_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_address0 <= zext_ln119_4_fu_1469_p1(13 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            Image_address0 <= zext_ln106_2_fu_1080_p1(13 - 1 downto 0);
        else 
            Image_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    Image_address1 <= zext_ln119_3_fu_1426_p1(13 - 1 downto 0);
    Image_address10 <= zext_ln118_2_fu_1332_p1(13 - 1 downto 0);
    Image_address11 <= zext_ln118_3_fu_1415_p1(13 - 1 downto 0);
    Image_address2 <= zext_ln123_2_fu_1480_p1(13 - 1 downto 0);
    Image_address3 <= zext_ln123_1_fu_1437_p1(13 - 1 downto 0);
    Image_address4 <= zext_ln118_5_fu_1458_p1(13 - 1 downto 0);
    Image_address5 <= zext_ln118_3_fu_1415_p1(13 - 1 downto 0);
    Image_address6 <= zext_ln119_4_fu_1469_p1(13 - 1 downto 0);
    Image_address7 <= zext_ln119_2_fu_1343_p1(13 - 1 downto 0);
    Image_address8 <= zext_ln119_3_fu_1426_p1(13 - 1 downto 0);
    Image_address9 <= zext_ln118_5_fu_1458_p1(13 - 1 downto 0);

    Image_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter11)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            Image_ce0 <= ap_const_logic_1;
        else 
            Image_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce1 <= ap_const_logic_1;
        else 
            Image_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce10_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce10 <= ap_const_logic_1;
        else 
            Image_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce11_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce11 <= ap_const_logic_1;
        else 
            Image_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce2_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce2 <= ap_const_logic_1;
        else 
            Image_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce3_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce3 <= ap_const_logic_1;
        else 
            Image_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce4_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce4 <= ap_const_logic_1;
        else 
            Image_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce5_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce5 <= ap_const_logic_1;
        else 
            Image_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce6_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce6 <= ap_const_logic_1;
        else 
            Image_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce7_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce7 <= ap_const_logic_1;
        else 
            Image_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce8_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce8 <= ap_const_logic_1;
        else 
            Image_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    Image_ce9_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            Image_ce9 <= ap_const_logic_1;
        else 
            Image_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    Image_d0 <= 
        result_V_2_fu_1209_p2 when (p_Result_s_fu_1087_p3(0) = '1') else 
        val_fu_1201_p3;

    Image_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, icmp_ln97_reg_2111_pp1_iter10_reg, ap_enable_reg_pp1_iter11)
    begin
        if (((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln97_reg_2111_pp1_iter10_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            Image_we0 <= ap_const_logic_1;
        else 
            Image_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Sobel_1_ce0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln111_reg_2231_pp2_iter43_reg, empty_54_reg_2256_pp2_iter43_reg, empty_48_reg_2260_pp2_iter43_reg, ap_enable_reg_pp2_iter44)
    begin
        if ((((ap_enable_reg_pp2_iter44 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (((empty_54_reg_2256_pp2_iter43_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)) or ((empty_48_reg_2260_pp2_iter43_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp2_iter44 = ap_const_logic_1) and (empty_48_reg_2260_pp2_iter43_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter43_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)))) then 
            Sobel_1_ce0 <= ap_const_logic_1;
        else 
            Sobel_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Sobel_1_ce1_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln111_reg_2231_pp2_iter44_reg, empty_54_reg_2256_pp2_iter44_reg, empty_48_reg_2260_pp2_iter44_reg, ap_enable_reg_pp2_iter45)
    begin
        if ((((ap_enable_reg_pp2_iter45 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (((empty_54_reg_2256_pp2_iter44_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter44_reg = ap_const_lv1_0)) or ((empty_48_reg_2260_pp2_iter44_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter44_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp2_iter45 = ap_const_logic_1) and (empty_48_reg_2260_pp2_iter44_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter44_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln111_reg_2231_pp2_iter44_reg = ap_const_lv1_0)))) then 
            Sobel_1_ce1 <= ap_const_logic_1;
        else 
            Sobel_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Sobel_1_d0_assign_proc : process(ap_block_pp2_stage0, ap_enable_reg_pp2_iter44, result_V_7_fu_1889_p3, ap_condition_1286, ap_condition_1295)
    begin
        if (((ap_enable_reg_pp2_iter44 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then
            if ((ap_const_boolean_1 = ap_condition_1295)) then 
                Sobel_1_d0 <= ap_const_lv32_0;
            elsif ((ap_const_boolean_1 = ap_condition_1286)) then 
                Sobel_1_d0 <= result_V_7_fu_1889_p3;
            else 
                Sobel_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Sobel_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Sobel_1_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln111_reg_2231_pp2_iter43_reg, empty_54_reg_2256_pp2_iter43_reg, empty_48_reg_2260_pp2_iter43_reg, ap_enable_reg_pp2_iter44)
    begin
        if ((((ap_enable_reg_pp2_iter44 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (((empty_54_reg_2256_pp2_iter43_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)) or ((empty_48_reg_2260_pp2_iter43_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp2_iter44 = ap_const_logic_1) and (empty_48_reg_2260_pp2_iter43_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter43_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)))) then 
            Sobel_1_we0 <= ap_const_logic_1;
        else 
            Sobel_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln111_fu_1224_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_543) + unsigned(ap_const_lv13_1));
    add_ln112_fu_1485_p2 <= std_logic_vector(unsigned(select_ln111_fu_1254_p3) + unsigned(ap_const_lv7_1));
    add_ln114_fu_1348_p2 <= std_logic_vector(unsigned(mul_ln123_fu_1274_p2) + unsigned(zext_ln118_1_fu_1322_p1));
    add_ln118_1_fu_1442_p2 <= std_logic_vector(unsigned(select_ln111_fu_1254_p3) + unsigned(ap_const_lv7_1));
    add_ln118_2_fu_1530_p2 <= std_logic_vector(unsigned(mul_ln118_fu_1498_p2) + unsigned(mul_ln118_2_fu_1524_p2));
    add_ln118_3_fu_1326_p2 <= std_logic_vector(unsigned(mul_ln118_3_fu_1292_p2) + unsigned(zext_ln118_1_fu_1322_p1));
    add_ln118_4_fu_1409_p2 <= std_logic_vector(unsigned(mul_ln118_3_fu_1292_p2) + unsigned(sext_ln118_1_fu_1405_p1));
    add_ln118_5_fu_1452_p2 <= std_logic_vector(unsigned(mul_ln118_3_fu_1292_p2) + unsigned(zext_ln118_4_fu_1448_p1));
    add_ln118_fu_1399_p2 <= std_logic_vector(unsigned(trunc_ln113_cast_fu_1359_p1) + unsigned(ap_const_lv8_FF));
    add_ln119_1_fu_1337_p2 <= std_logic_vector(unsigned(mul_ln119_1_fu_1316_p2) + unsigned(zext_ln118_1_fu_1322_p1));
    add_ln119_2_fu_1420_p2 <= std_logic_vector(unsigned(mul_ln119_1_fu_1316_p2) + unsigned(sext_ln118_1_fu_1405_p1));
    add_ln119_3_fu_1463_p2 <= std_logic_vector(unsigned(mul_ln119_1_fu_1316_p2) + unsigned(zext_ln118_4_fu_1448_p1));
    add_ln119_fu_1594_p2 <= std_logic_vector(unsigned(and_ln119_fu_1558_p2) + unsigned(and_ln119_1_fu_1588_p2));
    add_ln123_1_fu_1474_p2 <= std_logic_vector(unsigned(mul_ln123_fu_1274_p2) + unsigned(zext_ln118_4_fu_1448_p1));
    add_ln123_fu_1431_p2 <= std_logic_vector(unsigned(mul_ln123_fu_1274_p2) + unsigned(sext_ln118_1_fu_1405_p1));
    add_ln127_fu_1751_p2 <= std_logic_vector(unsigned(mul_ln127_1_fu_1745_p2) + unsigned(mul_ln127_fu_1733_p2));
    add_ln510_1_fu_1801_p2 <= std_logic_vector(unsigned(zext_ln510_1_fu_1797_p1) + unsigned(ap_const_lv12_C01));
    add_ln510_fu_1127_p2 <= std_logic_vector(unsigned(zext_ln510_fu_1123_p1) + unsigned(ap_const_lv12_C01));
    add_ln97_1_fu_970_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_514_p4) + unsigned(ap_const_lv13_1));
    add_ln97_fu_982_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_phi_fu_525_p4) + unsigned(ap_const_lv6_1));
    add_ln98_fu_1052_p2 <= std_logic_vector(unsigned(select_ln97_reg_2115) + unsigned(ap_const_lv7_1));
    and_ln119_1_fu_1588_p2 <= (select_ln119_1_fu_1580_p3 and Image_q6);
    and_ln119_fu_1558_p2 <= (select_ln119_fu_1550_p3 and Image_q8);
    and_ln122_fu_1635_p2 <= (select_ln122_fu_1627_p3 and Image_q4);
    and_ln124_fu_1676_p2 <= (select_ln124_fu_1668_p3 and Image_q0);
    and_ln54_2_fu_891_p2 <= (tmp_data_V_reg_2060 and ap_sig_allocacmp_Mask_load_2);
    and_ln54_3_fu_923_p2 <= (tmp_data_V_reg_2060 and ap_sig_allocacmp_Mask_load_3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state79 <= ap_CS_fsm(10);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(ap_enable_reg_pp2_iter46, icmp_ln111_reg_2231_pp2_iter45_reg, ap_enable_reg_pp2_iter47, icmp_ln111_reg_2231_pp2_iter46_reg, Data_Out_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_01001 <= (((icmp_ln111_reg_2231_pp2_iter46_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter47 = ap_const_logic_1) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice)) or ((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter46 = ap_const_logic_1) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice)));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter46, icmp_ln111_reg_2231_pp2_iter45_reg, ap_enable_reg_pp2_iter47, icmp_ln111_reg_2231_pp2_iter46_reg, ap_block_state77_io, ap_block_state78_io, Data_Out_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_enable_reg_pp2_iter47 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state78_io) or ((icmp_ln111_reg_2231_pp2_iter46_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice)))) or ((ap_enable_reg_pp2_iter46 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state77_io) or ((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice)))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter46, icmp_ln111_reg_2231_pp2_iter45_reg, ap_enable_reg_pp2_iter47, icmp_ln111_reg_2231_pp2_iter46_reg, ap_block_state77_io, ap_block_state78_io, Data_Out_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_enable_reg_pp2_iter47 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state78_io) or ((icmp_ln111_reg_2231_pp2_iter46_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice)))) or ((ap_enable_reg_pp2_iter46 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state77_io) or ((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice)))));
    end process;

        ap_block_state10_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp2_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp2_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp2_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp2_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp2_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp2_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp2_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp2_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp2_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp2_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp2_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp2_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp2_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp2_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp2_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp2_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp2_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp2_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state77_io_assign_proc : process(icmp_ln111_reg_2231_pp2_iter45_reg, Data_Out_TREADY_int_regslice)
    begin
                ap_block_state77_io <= ((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice));
    end process;


    ap_block_state77_pp2_stage0_iter46_assign_proc : process(icmp_ln111_reg_2231_pp2_iter45_reg, Data_Out_TREADY_int_regslice)
    begin
                ap_block_state77_pp2_stage0_iter46 <= ((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice));
    end process;


    ap_block_state78_io_assign_proc : process(icmp_ln111_reg_2231_pp2_iter46_reg, Data_Out_TREADY_int_regslice)
    begin
                ap_block_state78_io <= ((icmp_ln111_reg_2231_pp2_iter46_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice));
    end process;


    ap_block_state78_pp2_stage0_iter47_assign_proc : process(icmp_ln111_reg_2231_pp2_iter46_reg, Data_Out_TREADY_int_regslice)
    begin
                ap_block_state78_pp2_stage0_iter47 <= ((icmp_ln111_reg_2231_pp2_iter46_reg = ap_const_lv1_0) and (ap_const_logic_0 = Data_Out_TREADY_int_regslice));
    end process;

        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1286_assign_proc : process(icmp_ln111_reg_2231_pp2_iter43_reg, empty_54_reg_2256_pp2_iter43_reg, empty_48_reg_2260_pp2_iter43_reg)
    begin
                ap_condition_1286 <= ((empty_48_reg_2260_pp2_iter43_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter43_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0));
    end process;


    ap_condition_1295_assign_proc : process(icmp_ln111_reg_2231_pp2_iter43_reg, empty_54_reg_2256_pp2_iter43_reg, empty_48_reg_2260_pp2_iter43_reg)
    begin
                ap_condition_1295 <= (((empty_54_reg_2256_pp2_iter43_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)) or ((empty_48_reg_2260_pp2_iter43_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter43_reg = ap_const_lv1_0)));
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln97_fu_976_p2)
    begin
        if ((icmp_ln97_fu_976_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state31_assign_proc : process(icmp_ln111_fu_1242_p2)
    begin
        if ((icmp_ln111_fu_1242_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state79, regslice_both_Data_Out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_Data_Out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter11)
    begin
        if (((ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter46, ap_enable_reg_pp2_iter47, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter43, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter17, ap_enable_reg_pp2_iter18, ap_enable_reg_pp2_iter19, ap_enable_reg_pp2_iter20, ap_enable_reg_pp2_iter21, ap_enable_reg_pp2_iter22, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter24, ap_enable_reg_pp2_iter25, ap_enable_reg_pp2_iter26, ap_enable_reg_pp2_iter27, ap_enable_reg_pp2_iter28, ap_enable_reg_pp2_iter29, ap_enable_reg_pp2_iter30, ap_enable_reg_pp2_iter31, ap_enable_reg_pp2_iter32, ap_enable_reg_pp2_iter33, ap_enable_reg_pp2_iter34, ap_enable_reg_pp2_iter35, ap_enable_reg_pp2_iter36, ap_enable_reg_pp2_iter37, ap_enable_reg_pp2_iter38, ap_enable_reg_pp2_iter39, ap_enable_reg_pp2_iter40, ap_enable_reg_pp2_iter41, ap_enable_reg_pp2_iter42, ap_enable_reg_pp2_iter44, ap_enable_reg_pp2_iter45)
    begin
        if (((ap_enable_reg_pp2_iter45 = ap_const_logic_0) and (ap_enable_reg_pp2_iter44 = ap_const_logic_0) and (ap_enable_reg_pp2_iter42 = ap_const_logic_0) and (ap_enable_reg_pp2_iter41 = ap_const_logic_0) and (ap_enable_reg_pp2_iter40 = ap_const_logic_0) and (ap_enable_reg_pp2_iter39 = ap_const_logic_0) and (ap_enable_reg_pp2_iter38 = ap_const_logic_0) and (ap_enable_reg_pp2_iter37 = ap_const_logic_0) and (ap_enable_reg_pp2_iter36 = ap_const_logic_0) and (ap_enable_reg_pp2_iter35 = ap_const_logic_0) and (ap_enable_reg_pp2_iter34 = ap_const_logic_0) and (ap_enable_reg_pp2_iter33 = ap_const_logic_0) and (ap_enable_reg_pp2_iter32 = ap_const_logic_0) and (ap_enable_reg_pp2_iter31 = ap_const_logic_0) and (ap_enable_reg_pp2_iter30 = ap_const_logic_0) and (ap_enable_reg_pp2_iter29 = ap_const_logic_0) and (ap_enable_reg_pp2_iter28 = ap_const_logic_0) and (ap_enable_reg_pp2_iter27 = ap_const_logic_0) and (ap_enable_reg_pp2_iter26 = ap_const_logic_0) and (ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0) and (ap_enable_reg_pp2_iter22 = ap_const_logic_0) and (ap_enable_reg_pp2_iter21 = ap_const_logic_0) and (ap_enable_reg_pp2_iter20 = ap_const_logic_0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_0) and (ap_enable_reg_pp2_iter18 = ap_const_logic_0) and (ap_enable_reg_pp2_iter17 = ap_const_logic_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter47 = ap_const_logic_0) and (ap_enable_reg_pp2_iter46 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter43 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_536_p4_assign_proc : process(i_1_reg_532, icmp_ln97_reg_2111, ap_CS_fsm_pp1_stage0, add_ln98_reg_2142, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
            ap_phi_mux_i_1_phi_fu_536_p4 <= add_ln98_reg_2142;
        else 
            ap_phi_mux_i_1_phi_fu_536_p4 <= i_1_reg_532;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_558_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln111_reg_2231, i_reg_554, ap_CS_fsm_pp2_stage0, select_ln111_1_reg_2235, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln111_reg_2231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_phi_fu_558_p4 <= select_ln111_1_reg_2235;
        else 
            ap_phi_mux_i_phi_fu_558_p4 <= i_reg_554;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_514_p4_assign_proc : process(indvar_flatten_reg_510, icmp_ln97_reg_2111, add_ln97_1_reg_2106, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_514_p4 <= add_ln97_1_reg_2106;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_514_p4 <= indvar_flatten_reg_510;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_525_p4_assign_proc : process(j_reg_521, icmp_ln97_reg_2111, ap_CS_fsm_pp1_stage0, select_ln97_1_reg_2121, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln97_reg_2111 = ap_const_lv1_0))) then 
            ap_phi_mux_j_phi_fu_525_p4 <= select_ln97_1_reg_2121;
        else 
            ap_phi_mux_j_phi_fu_525_p4 <= j_reg_521;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_3_phi_fu_580_p4_assign_proc : process(icmp_ln111_reg_2231_pp2_iter45_reg, empty_54_reg_2256_pp2_iter45_reg, empty_48_reg_2260_pp2_iter45_reg, Sobel_1_q1, ap_phi_reg_pp2_iter46_tmp_data_V_3_reg_576)
    begin
        if ((((icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter45_reg = ap_const_lv1_1)) or ((empty_48_reg_2260_pp2_iter45_reg = ap_const_lv1_1) and (icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0)) or ((empty_48_reg_2260_pp2_iter45_reg = ap_const_lv1_0) and (icmp_ln111_reg_2231_pp2_iter45_reg = ap_const_lv1_0) and (empty_54_reg_2256_pp2_iter45_reg = ap_const_lv1_0)))) then 
            ap_phi_mux_tmp_data_V_3_phi_fu_580_p4 <= Sobel_1_q1;
        else 
            ap_phi_mux_tmp_data_V_3_phi_fu_580_p4 <= ap_phi_reg_pp2_iter46_tmp_data_V_3_reg_576;
        end if; 
    end process;

    ap_phi_reg_pp2_iter46_tmp_data_V_3_reg_576 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state79, regslice_both_Data_Out_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_Data_Out_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state79))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_Mask_load_assign_proc : process(ap_CS_fsm_state2, Mask_fu_256)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_sig_allocacmp_Mask_load <= ap_const_lv32_FF;
        else 
            ap_sig_allocacmp_Mask_load <= Mask_fu_256;
        end if; 
    end process;


    ap_sig_allocacmp_Mask_load_1_assign_proc : process(ap_CS_fsm_state2, Mask_fu_256)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_sig_allocacmp_Mask_load_1 <= ap_const_lv32_FF;
        else 
            ap_sig_allocacmp_Mask_load_1 <= Mask_fu_256;
        end if; 
    end process;


    ap_sig_allocacmp_Mask_load_2_assign_proc : process(ap_CS_fsm_state3, Mask_fu_256, shl_ln55_1_fu_877_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_sig_allocacmp_Mask_load_2 <= shl_ln55_1_fu_877_p2;
        else 
            ap_sig_allocacmp_Mask_load_2 <= Mask_fu_256;
        end if; 
    end process;


    ap_sig_allocacmp_Mask_load_3_assign_proc : process(ap_CS_fsm_state3, Mask_fu_256, shl_ln55_1_fu_877_p2, shl_ln55_2_fu_909_p2)
    begin
        ap_sig_allocacmp_Mask_load_3 <= shl_ln55_2_fu_909_p2;
    end process;


    ap_sig_allocacmp_Mask_load_6_assign_proc : process(ap_CS_fsm_state3, Mask_fu_256, shl_ln55_1_fu_877_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_sig_allocacmp_Mask_load_6 <= shl_ln55_1_fu_877_p2;
        else 
            ap_sig_allocacmp_Mask_load_6 <= Mask_fu_256;
        end if; 
    end process;


    ap_sig_allocacmp_Mask_load_7_assign_proc : process(ap_CS_fsm_state3, Mask_fu_256, shl_ln55_1_fu_877_p2, shl_ln55_2_fu_909_p2)
    begin
        ap_sig_allocacmp_Mask_load_7 <= shl_ln55_2_fu_909_p2;
    end process;


    ap_sig_allocacmp_indx_load_4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln97_fu_976_p2, ap_block_pp1_stage0, indx_fu_252, grp_fu_640_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln97_fu_976_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_sig_allocacmp_indx_load_4 <= grp_fu_640_p2;
        else 
            ap_sig_allocacmp_indx_load_4 <= indx_fu_252;
        end if; 
    end process;


    ap_sig_allocacmp_indx_load_5_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln97_fu_976_p2, ap_block_pp1_stage0, indx_fu_252, grp_fu_640_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln97_fu_976_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_sig_allocacmp_indx_load_5 <= grp_fu_640_p2;
        else 
            ap_sig_allocacmp_indx_load_5 <= indx_fu_252;
        end if; 
    end process;

    data_V_1_fu_1757_p1 <= reg_657;
    data_V_fu_1084_p1 <= dc_reg_2197;
    empty_45_fu_1230_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_558_p4) + unsigned(ap_const_lv6_3F));
    empty_46_fu_1381_p2 <= "1" when (select_ln111_fu_1254_p3 = ap_const_lv7_63) else "0";
    empty_47_fu_1387_p2 <= "1" when (select_ln111_fu_1254_p3 = ap_const_lv7_0) else "0";
    empty_48_fu_1393_p2 <= (empty_47_fu_1387_p2 or empty_46_fu_1381_p2);
    empty_52_fu_1363_p2 <= "1" when (select_ln111_1_fu_1262_p3 = ap_const_lv6_31) else "0";
    empty_53_fu_1369_p2 <= "1" when (select_ln111_1_fu_1262_p3 = ap_const_lv6_0) else "0";
    empty_54_fu_1375_p2 <= (empty_53_fu_1369_p2 or empty_52_fu_1363_p2);
    grp_fu_1904_p0 <= grp_fu_1904_p00(6 - 1 downto 0);
    grp_fu_1904_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_1_reg_2121_pp1_iter9_reg),13));
    grp_fu_1904_p1 <= ap_const_lv13_64(8 - 1 downto 0);
    grp_fu_1904_p2 <= grp_fu_1904_p20(7 - 1 downto 0);
    grp_fu_1904_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln97_reg_2115_pp1_iter10_reg),13));

    grp_fu_590_p0_assign_proc : process(ap_CS_fsm_pp1_stage1, reg_657, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter6, add_reg_2182, ap_enable_reg_pp1_iter8, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_590_p0 <= add_reg_2182;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_590_p0 <= reg_657;
        else 
            grp_fu_590_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_590_p1_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage0, mul1_reg_2172, ap_enable_reg_pp1_iter6, mul2_reg_2177_pp1_iter8_reg, ap_enable_reg_pp1_iter8, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_590_p1 <= mul2_reg_2177_pp1_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_590_p1 <= mul1_reg_2172;
        else 
            grp_fu_590_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_594_ce_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_594_ce <= ap_const_logic_1;
        else 
            grp_fu_594_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_594_p0_assign_proc : process(ap_block_pp2_stage0, reg_651, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage0, conv2_reg_2167, ap_enable_reg_pp1_iter3, tmp_reg_2308, ap_enable_reg_pp2_iter38, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_enable_reg_pp2_iter38 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_594_p0 <= tmp_reg_2308;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_594_p0 <= conv2_reg_2167;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_594_p0 <= reg_651;
        else 
            grp_fu_594_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_594_p1_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp2_iter38, ap_block_pp1_stage0, ap_block_pp1_stage1)
    begin
        if (((ap_enable_reg_pp2_iter38 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_594_p1 <= ap_const_lv64_3FD0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_594_p1 <= ap_const_lv64_3FBD2F1A9FBE76C9;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_594_p1 <= ap_const_lv64_3FD322D0E5604189;
        else 
            grp_fu_594_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_606_ce_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            grp_fu_606_ce <= ap_const_logic_1;
        else 
            grp_fu_606_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_606_p0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp1_stage1, ap_CS_fsm_pp1_stage0, add_ln127_reg_2303, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter4, ap_block_pp1_stage0, ap_block_pp1_stage1, R_fu_172, B_fu_180)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_606_p0 <= add_ln127_reg_2303;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_606_p0 <= B_fu_180;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_606_p0 <= R_fu_172;
        else 
            grp_fu_606_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_612_ce_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_612_ce <= ap_const_logic_1;
        else 
            grp_fu_612_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_625_p1_assign_proc : process(ap_CS_fsm_state2, tmp_data_V_reg_2060, ap_CS_fsm_state3, Data_In_TDATA_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_625_p1 <= tmp_data_V_reg_2060;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_625_p1 <= Data_In_TDATA_int_regslice;
        else 
            grp_fu_625_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_625_p2 <= (grp_load_fu_622_p1 and grp_fu_625_p1);
    grp_fu_640_p2 <= std_logic_vector(unsigned(indx_fu_252) + unsigned(ap_const_lv32_1));

    grp_load_fu_622_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Mask_fu_256, ap_sig_allocacmp_Mask_load)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_load_fu_622_p1 <= Mask_fu_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_622_p1 <= ap_sig_allocacmp_Mask_load;
        else 
            grp_load_fu_622_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_load_fu_634_p1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, Mask_fu_256, ap_sig_allocacmp_Mask_load_1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_load_fu_634_p1 <= Mask_fu_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_load_fu_634_p1 <= ap_sig_allocacmp_Mask_load_1;
        else 
            grp_load_fu_634_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln111_fu_1242_p2 <= "1" when (indvar_flatten7_reg_543 = ap_const_lv13_1388) else "0";
    icmp_ln112_fu_1248_p2 <= "1" when (j_1_reg_565 = ap_const_lv7_64) else "0";
    icmp_ln97_fu_976_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_514_p4 = ap_const_lv13_1388) else "0";
    icmp_ln98_fu_988_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_536_p4 = ap_const_lv7_64) else "0";
    indvars_iv_next155_fu_1236_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_558_p4) + unsigned(ap_const_lv6_1));
    indvars_iv_next155_mid1_fu_1298_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_558_p4) + unsigned(ap_const_lv6_2));
    indx_2_fu_1026_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indx_load_5) + unsigned(ap_const_lv32_1));
    isNeg_1_fu_1807_p3 <= add_ln510_1_fu_1801_p2(11 downto 11);
    isNeg_fu_1133_p3 <= add_ln510_fu_1127_p2(11 downto 11);
    mantissa_1_fu_1783_p4 <= ((ap_const_lv1_1 & tmp_15_fu_1779_p1) & ap_const_lv1_0);
    mantissa_fu_1109_p4 <= ((ap_const_lv1_1 & tmp_13_fu_1105_p1) & ap_const_lv1_0);
    mul_ln118_3_fu_1292_p0 <= mul_ln118_3_fu_1292_p00(6 - 1 downto 0);
    mul_ln118_3_fu_1292_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln111_2_fu_1280_p3),13));
    mul_ln118_3_fu_1292_p1 <= ap_const_lv13_64(8 - 1 downto 0);
    mul_ln119_1_fu_1316_p0 <= mul_ln119_1_fu_1316_p00(6 - 1 downto 0);
    mul_ln119_1_fu_1316_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln111_3_fu_1304_p3),13));
    mul_ln119_1_fu_1316_p1 <= ap_const_lv13_64(8 - 1 downto 0);
    mul_ln119_fu_1571_p1 <= mul_ln119_fu_1571_p10(2 - 1 downto 0);
    mul_ln119_fu_1571_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Vertical_Sobel_4_fu_200),32));
    mul_ln123_fu_1274_p0 <= mul_ln123_fu_1274_p00(6 - 1 downto 0);
    mul_ln123_fu_1274_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln111_1_fu_1262_p3),13));
    mul_ln123_fu_1274_p1 <= ap_const_lv13_64(8 - 1 downto 0);
    p_Result_1_fu_1761_p3 <= data_V_1_fu_1757_p1(63 downto 63);
    p_Result_s_fu_1087_p3 <= data_V_fu_1084_p1(63 downto 63);
    r_V_1_fu_1173_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_1119_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1(31-1 downto 0)))));
    r_V_2_fu_1841_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_1793_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1(31-1 downto 0)))));
    r_V_3_fu_1847_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_1793_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1(31-1 downto 0)))));
    r_V_fu_1167_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_1119_p1),to_integer(unsigned('0' & sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1(31-1 downto 0)))));
    result_V_2_fu_1209_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_1201_p3));
    result_V_6_fu_1883_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_fu_1875_p3));
    result_V_7_fu_1889_p3 <= 
        result_V_6_fu_1883_p2 when (p_Result_1_fu_1761_p3(0) = '1') else 
        val_1_fu_1875_p3;
    select_ln111_1_fu_1262_p3 <= 
        indvars_iv_next155_fu_1236_p2 when (icmp_ln112_fu_1248_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_558_p4;
    select_ln111_2_fu_1280_p3 <= 
        ap_phi_mux_i_phi_fu_558_p4 when (icmp_ln112_fu_1248_p2(0) = '1') else 
        empty_45_fu_1230_p2;
    select_ln111_3_fu_1304_p3 <= 
        indvars_iv_next155_mid1_fu_1298_p2 when (icmp_ln112_fu_1248_p2(0) = '1') else 
        indvars_iv_next155_fu_1236_p2;
    select_ln111_fu_1254_p3 <= 
        ap_const_lv7_0 when (icmp_ln112_fu_1248_p2(0) = '1') else 
        j_1_reg_565;
    select_ln119_1_fu_1580_p3 <= 
        ap_const_lv32_FFFFFFFF when (Vertical_Sobel_5_fu_204(0) = '1') else 
        ap_const_lv32_0;
    select_ln119_fu_1550_p3 <= 
        ap_const_lv32_FFFFFFFF when (Vertical_Sobel_3_fu_196(0) = '1') else 
        ap_const_lv32_0;
    select_ln122_fu_1627_p3 <= 
        ap_const_lv32_FFFFFFFF when (Horizontal_Sobel_1_fu_212(0) = '1') else 
        ap_const_lv32_0;
    select_ln124_fu_1668_p3 <= 
        ap_const_lv32_FFFFFFFF when (Horizontal_Sobel_5_fu_228(0) = '1') else 
        ap_const_lv32_0;
    select_ln97_1_fu_1002_p3 <= 
        add_ln97_fu_982_p2 when (icmp_ln98_fu_988_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_525_p4;
    select_ln97_fu_994_p3 <= 
        ap_const_lv7_0 when (icmp_ln98_fu_988_p2(0) = '1') else 
        ap_phi_mux_i_1_phi_fu_536_p4;
        sext_ln118_1_fu_1405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln118_fu_1399_p2),13));

        sext_ln1311_1_fu_1821_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_1_fu_1815_p2),12));

        sext_ln1311_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_1141_p2),12));

        sext_ln54_1_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln54_1_reg_2096),32));

        sext_ln54_2_fu_961_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln54_2_reg_2101),32));

        sext_ln54_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_857_p4),32));

    sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i139_cast_cast_cast_fu_1833_p1),137));
        sh_prom_i_i_i_i_i139_cast_cast_cast_fu_1833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_1_fu_1825_p3),32));

    sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1159_p1),137));
        sh_prom_i_i_i_i_i_cast_cast_cast_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_1151_p3),32));

    shl_ln55_1_fu_877_p2 <= std_logic_vector(shift_left(unsigned(grp_load_fu_634_p1),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln55_2_fu_909_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_Mask_load_6),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln55_3_fu_941_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_Mask_load_7),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln55_fu_846_p2 <= std_logic_vector(shift_left(unsigned(grp_load_fu_634_p1),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    sub_ln1311_1_fu_1815_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_14_fu_1769_p4));
    sub_ln1311_fu_1141_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(tmp_12_fu_1095_p4));
    tmp_11_fu_1853_p3 <= r_V_2_fu_1841_p2(53 downto 53);
    tmp_12_fu_1095_p4 <= data_V_fu_1084_p1(62 downto 52);
    tmp_13_fu_1105_p1 <= data_V_fu_1084_p1(52 - 1 downto 0);
    tmp_14_fu_1769_p4 <= data_V_1_fu_1757_p1(62 downto 52);
    tmp_15_fu_1779_p1 <= data_V_1_fu_1757_p1(52 - 1 downto 0);
    tmp_2_fu_1865_p4 <= r_V_3_fu_1847_p2(84 downto 53);
    tmp_6_fu_1179_p3 <= r_V_fu_1167_p2(53 downto 53);
    tmp_s_fu_1191_p4 <= r_V_1_fu_1173_p2(84 downto 53);
    trunc_ln113_cast_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln111_fu_1254_p3),8));
    trunc_ln_fu_857_p4 <= grp_fu_625_p2(31 downto 8);
    ush_1_fu_1825_p3 <= 
        sext_ln1311_1_fu_1821_p1 when (isNeg_1_fu_1807_p3(0) = '1') else 
        add_ln510_1_fu_1801_p2;
    ush_fu_1151_p3 <= 
        sext_ln1311_fu_1147_p1 when (isNeg_fu_1133_p3(0) = '1') else 
        add_ln510_fu_1127_p2;
    val_1_fu_1875_p3 <= 
        zext_ln662_1_fu_1861_p1 when (isNeg_1_fu_1807_p3(0) = '1') else 
        tmp_2_fu_1865_p4;
    val_fu_1201_p3 <= 
        zext_ln662_fu_1187_p1 when (isNeg_fu_1133_p3(0) = '1') else 
        tmp_s_fu_1191_p4;
    zext_ln101_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_indx_load_4),64));
    zext_ln103_fu_1047_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indx_fu_252),64));
    zext_ln106_2_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1904_p3),64));
    zext_ln114_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln114_fu_1348_p2),64));
    zext_ln118_1_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln111_fu_1254_p3),13));
    zext_ln118_2_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_3_fu_1326_p2),64));
    zext_ln118_3_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_4_fu_1409_p2),64));
    zext_ln118_4_fu_1448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_1_fu_1442_p2),13));
    zext_ln118_5_fu_1458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln118_5_fu_1452_p2),64));
    zext_ln119_2_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_1_fu_1337_p2),64));
    zext_ln119_3_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_2_fu_1420_p2),64));
    zext_ln119_4_fu_1469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln119_3_fu_1463_p2),64));
    zext_ln123_1_fu_1437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_fu_1431_p2),64));
    zext_ln123_2_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_1_fu_1474_p2),64));
    zext_ln15_1_fu_1793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_1783_p4),137));
    zext_ln15_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_1109_p4),137));
    zext_ln510_1_fu_1797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_1769_p4),12));
    zext_ln510_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1095_p4),12));
    zext_ln54_1_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indx_fu_252),64));
    zext_ln54_2_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indx_fu_252),64));
    zext_ln54_3_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indx_fu_252),64));
    zext_ln54_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indx_fu_252),64));
    zext_ln662_1_fu_1861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1853_p3),32));
    zext_ln662_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_1179_p3),32));
    zext_ln99_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indx_fu_252),64));
end behav;
