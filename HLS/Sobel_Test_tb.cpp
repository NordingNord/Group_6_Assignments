#include <iostream>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include "ap_axi_sdata.h"
#include "hls_stream.h"

#define R_Weight 0.299
#define G_Weight 0.587
#define B_Weight 0.114
#define Sobel_Size 3
#define Image_Vertical 77
#define Image_Horizontal 102

void Sobel(hls::stream< ap_axiu<32,2,5,6>> &Image_In, hls::stream< ap_axiu<32,2,5,6>> &Image_Out);

int main() {
	hls::stream<ap_axiu<32,2,5,6>> A,B;
	ap_axiu<32,2,5,6> tmp1,tmp2;
	volatile int Sobel_Data[Image_Vertical][Image_Horizontal];
	volatile int Image_Data[Image_Vertical][Image_Horizontal];
	volatile int Output_Data[Image_Vertical][Image_Horizontal];
	volatile int Vertical_Sobel[Sobel_Size][Sobel_Size] = {{-1,-2,-1},{0,0,0},{1,2,1}};
	volatile int Horizontal_Sobel[Sobel_Size][Sobel_Size] = {{-1,0,1},{-2,0,2},{-1,0,1}};
	volatile int Test_R = 0;
	volatile int Test_G = 0;
	volatile int Test_B = 0;
	volatile int G1[3];
	volatile int G2[3];
	volatile int G1_Sum = 0;
	volatile int G2_Sum = 0;
	volatile int Send_Image[Image_Vertical*Image_Horizontal];
	volatile int Data_Count = 0;
	volatile int Image_Values[Image_Vertical*Image_Horizontal] = {16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16515067,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16187382,14221272,11861940,9043849,5963610,3342130,7733109,15597549,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,15007716,8781701,3342130,130817,65280,65280,65280,3014445,13762513,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,15701397,14635345,14766931,14767959,14900830,15033958,15101293,15301242,15435141,15635861,15836324,16037558,16238535,16439512,16640232,16774645,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16646141,13565902,5046092,65280,65280,130817,6750054,14221272,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,14900830,13041664,13172736,13172736,13172736,13172736,13172736,13172736,13172736,13172736,13238272,13303808,13434880,13567751,13767186,14033699,14367033,14767188,15234421,15702168,16104893,16506333,16774902,16777215,16777215,16646143,13238221,9109387,4915018,1179409,65280,851724,9830293,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,14967651,13172736,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13238272,13238272,13238272,13172736,13172736,13172736,13238272,13369344,13634315,14034213,14634060,15367806,16102581,16770025,16777215,16711679,9306002,2621225,130817,2490149,11337644,16711678,16777215,16777215,16777215,16777215,16777215,16777215,14967651,13172736,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13238272,13238272,13172736,13172736,13303808,13701136,14433597,15434114,16566989,16186354,13565910,9174926,5242703,7339887,13959124,16646141,16777215,16777215,16777215,16777215,14967651,13172736,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13238272,13172736,13172736,13435651,14431286,15962006,16771314,16777215,15007718,13631439,16187382,16777215,16777215,16777215,16777215,14901344,13107200,13238272,13238272,13238272,13238272,13238272,13238272,13238272,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13172736,13238272,13900828,15568526,16775676,16777215,16777215,16777215,16777215,16777215,16777215,15300214,13835806,13966878,13900828,13834264,13767186,13700879,13831692,14028042,13895685,13829121,13762816,13697024,13697024,13697024,13631488,13565952,13434880,13369344,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13238272,13172736,14699596,16707567,16777215,16777215,16777215,16777215,16777215,16775416,16773874,16708338,16707824,16706796,16639975,16573411,13872575,11171996,11235474,11100805,10900084,8789838,8719674,9702448,10619173,11535897,12321807,12976390,13434880,13697024,13697024,13631488,13500416,13369344,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13303808,13107200,15166572,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,9669049,2691440,3283832,3284345,3284602,3284603,3284603,3350139,3481209,3743094,4267121,4987496,6035292,7410508,8982074,10553638,12059923,13107461,13631488,13697024,13565952,13369344,13303808,13303808,13303808,13303808,13303808,13238272,14100263,16775416,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,9865399,3150960,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3612022,3546487,3480952,3415673,3284602,3284603,3415673,4004979,5183846,6952018,9243959,11470619,13107461,13303808,13172736,13238272,13303808,13303808,13238272,14100006,16774902,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,9865399,3150960,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3612023,3481208,3350138,3284603,3479924,7290493,15767704,14566982,13568008,13172736,13238272,13238272,14100263,16774902,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,9865399,3150960,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3282802,6180245,16777215,16777215,16373462,15025734,13565952,13107200,14100263,16774902,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,9865656,3150960,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3612022,3480952,2889846,5918360,16774388,16759225,16736352,16716820,16318721,14286848,13969191,16774902,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16761021,9855119,3151989,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3677558,3612023,3546487,3350137,3219066,3153531,3612023,4987498,7541585,12065338,16721446,16711680,16711680,16711680,16711680,16580608,15149096,16709366,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16758711,16717331,9851264,3152503,3677558,3677558,3612022,3612023,3546487,3480952,3350137,3284602,3153531,3153531,3284602,3743093,4660077,6231903,8393291,11078963,13698843,15860232,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16655910,16774902,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16758968,16715535,16712962,9591178,2628476,3219066,3350137,3612023,3939444,4463471,5184104,6101088,7345493,8851783,10620471,12388903,14091800,15532810,16646145,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16726329,16776444,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16759225,16715535,16711680,16712964,13707324,11274800,12126761,12978210,13764379,14550291,15336205,16056582,16580609,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16713222,16757683,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16759225,16715792,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16720418,16757426,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16759482,16715792,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16719647,16744319,16771561,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16760510,16714764,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16716563,16731726,16753571,16772589,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16764879,16720932,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16515072,16649999,16725301,16739436,16756141,16770533,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16767963,16723502,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16711680,16714250,16719133,16660793,15353937,12930150,11098753,16046044,16776701,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16769762,16725301,16711680,16711680,16711680,16714250,16716306,16718362,16721189,16724787,16728899,16734039,16740207,16747146,16754085,16761538,16768220,16773617,16777215,16580607,16515071,16646143,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16771047,16727614,16711680,16711937,16757683,16771047,16772846,16774902,16776701,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16772589,16729670,16711680,16765136,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16773617,16733011,16763080,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16774645,16773617,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215,16777215};

	// Get test picture
	//string Line;
	//ifstream Image_File("RGB_array.txt");
	//while(getline(Image_File,Line)){
	//}


	for(int j = 0; j < Image_Vertical; j++){
		for(int i = 0; i < Image_Horizontal; i++){
			tmp1.data = 0;
			//Data_Count++;
			tmp1.keep = -1;
			tmp1.strb = 1;
			tmp1.user = 1;
			if(j == (Image_Vertical-1) and i == (Image_Horizontal-1)){
				tmp1.last = 1;
			}
			else{
				tmp1.last = 0;
			}

			Test_R = (tmp1.data.to_int() & 0xff0000) >> 16;
			Test_G = (tmp1.data.to_int() & 0x00ff00) >> 8;
			Test_B = (tmp1.data.to_int() & 0x0000ff);

			Image_Data[j][i] = (int)(R_Weight * Test_R + G_Weight * Test_G + B_Weight * Test_B);

			if(i == 0 or i == Image_Horizontal-1 or j == 0 or j == Image_Vertical-1){
				Sobel_Data[j][i] = 0;
			}
			A.write(tmp1);
		}
	}

	for(int i = 1; i < Image_Vertical-1; i++){
		for(int j = 1; j < Image_Horizontal-1; j++){
			G1[0] = Vertical_Sobel[0][0]*Image_Data[i-1][j-1] + Vertical_Sobel[0][1]*Image_Data[i-1][j] + Vertical_Sobel[0][2]*Image_Data[i-1][j+1];
			G1[1] = Vertical_Sobel[1][0]*Image_Data[i][j-1] + Vertical_Sobel[1][1]*Image_Data[i][j] + Vertical_Sobel[1][2]*Image_Data[i][j+1];
			G1[2] = Vertical_Sobel[2][0]*Image_Data[i+1][j-1] + Vertical_Sobel[2][1]*Image_Data[i+1][j] + Vertical_Sobel[2][2]*Image_Data[i+1][j+1];
			G1_Sum = G1[0]+G1[1]+G1[2];

			G2[0] = Horizontal_Sobel[0][0]*Image_Data[i-1][j-1] + Horizontal_Sobel[0][1]*Image_Data[i-1][j] + Horizontal_Sobel[0][2]*Image_Data[i-1][j+1];
			G2[1] = Horizontal_Sobel[1][0]*Image_Data[i][j-1] + Horizontal_Sobel[1][1]*Image_Data[i][j] + Horizontal_Sobel[1][2]*Image_Data[i][j+1];
			G2[2] = Horizontal_Sobel[2][0]*Image_Data[i+1][j-1] + Horizontal_Sobel[2][1]*Image_Data[i+1][j] + Horizontal_Sobel[2][2]*Image_Data[i+1][j+1];
			G2_Sum = G2[0]+G2[1]+G2[2];

			Sobel_Data[i][j] = (int)(sqrt(G1_Sum*G1_Sum+G2_Sum*G2_Sum)/4);
		}
	}

	Sobel(A,B);

	for(int i=0;i < Image_Vertical; i++){
		for(int j = 0; j < Image_Horizontal; j++){
			B.read(tmp2);
			Output_Data[i][j] = tmp2.data.to_int();
		}
	}
	// Show images:
	std::cout << "Desired Sobel: " << std::endl;
	for(int i = 0; i < Image_Vertical; i++){
		std::cout << "[";
		for(int j = 0; j < Image_Horizontal; j++){
			std::cout << Sobel_Data[i][j];
			if(j != Image_Horizontal-1){
				 std::cout << ", ";
			}
		}
		std::cout << "]" << std::endl;
	}

	// Write image to file
	std::ofstream New_Image("Sobel_Image.txt");
	for(int i = 0; i < Image_Vertical; i++){
		for(int j = 0; j < Image_Horizontal; j++){
			New_Image << Output_Data[i][j];
			if(i != Image_Vertical-1 or j != Image_Horizontal-1){
				 New_Image<< ",";
			}
		}
	}

	// Test
	for(int i = 0; i < Image_Vertical; i++){
		for(int j = 0; j < Image_Horizontal; j++){
			if(Sobel_Data[i][j] != Output_Data[i][j]){
		        std::cout << "ERROR: results mismatch" << std::endl;
		        std::cout << "Data=" << Sobel_Data[i][j];
		        std::cout << " != ";
		        std::cout << "Final result=" << Output_Data[i][j] << std::endl;
		        return 0;
			}
		}
	}

    std::cout << "Success: results match" << std::endl;



}
