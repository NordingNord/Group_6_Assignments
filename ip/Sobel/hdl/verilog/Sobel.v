// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sobel_Sobel,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.098000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=160,HLS_SYN_DSP=0,HLS_SYN_FF=2858,HLS_SYN_LUT=5664,HLS_VERSION=2020_2}" *)

module Sobel (
        ap_clk,
        ap_rst_n,
        Data_In_TDATA,
        Data_In_TVALID,
        Data_In_TREADY,
        Data_In_TKEEP,
        Data_In_TSTRB,
        Data_In_TUSER,
        Data_In_TLAST,
        Data_In_TID,
        Data_In_TDEST,
        Data_Out_TDATA,
        Data_Out_TVALID,
        Data_Out_TREADY,
        Data_Out_TKEEP,
        Data_Out_TSTRB,
        Data_Out_TUSER,
        Data_Out_TLAST,
        Data_Out_TID,
        Data_Out_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_pp1_stage0 = 11'd64;
parameter    ap_ST_fsm_pp1_stage1 = 11'd128;
parameter    ap_ST_fsm_state30 = 11'd256;
parameter    ap_ST_fsm_pp2_stage0 = 11'd512;
parameter    ap_ST_fsm_state79 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] Data_In_TDATA;
input   Data_In_TVALID;
output   Data_In_TREADY;
input  [3:0] Data_In_TKEEP;
input  [3:0] Data_In_TSTRB;
input  [1:0] Data_In_TUSER;
input  [0:0] Data_In_TLAST;
input  [4:0] Data_In_TID;
input  [5:0] Data_In_TDEST;
output  [31:0] Data_Out_TDATA;
output   Data_Out_TVALID;
input   Data_Out_TREADY;
output  [3:0] Data_Out_TKEEP;
output  [3:0] Data_Out_TSTRB;
output  [1:0] Data_Out_TUSER;
output  [0:0] Data_Out_TLAST;
output  [4:0] Data_Out_TID;
output  [5:0] Data_Out_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    Data_In_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    Data_Out_TDATA_blk_n;
reg    ap_enable_reg_pp2_iter46;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln111_reg_2231;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter45_reg;
reg    ap_enable_reg_pp2_iter47;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter46_reg;
reg   [12:0] indvar_flatten_reg_510;
reg   [5:0] j_reg_521;
reg   [6:0] i_1_reg_532;
reg   [12:0] indvar_flatten7_reg_543;
reg   [5:0] i_reg_554;
reg   [6:0] j_1_reg_565;
wire   [63:0] grp_fu_606_p1;
reg   [63:0] reg_651;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state8_pp1_stage1_iter0;
wire    ap_block_state10_pp1_stage1_iter1;
wire    ap_block_state12_pp1_stage1_iter2;
wire    ap_block_state14_pp1_stage1_iter3;
wire    ap_block_state16_pp1_stage1_iter4;
wire    ap_block_state18_pp1_stage1_iter5;
wire    ap_block_state20_pp1_stage1_iter6;
wire    ap_block_state22_pp1_stage1_iter7;
wire    ap_block_state24_pp1_stage1_iter8;
wire    ap_block_state26_pp1_stage1_iter9;
wire    ap_block_state28_pp1_stage1_iter10;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln97_reg_2111;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter2_reg;
wire    ap_block_state31_pp2_stage0_iter0;
wire    ap_block_state32_pp2_stage0_iter1;
wire    ap_block_state33_pp2_stage0_iter2;
wire    ap_block_state34_pp2_stage0_iter3;
wire    ap_block_state35_pp2_stage0_iter4;
wire    ap_block_state36_pp2_stage0_iter5;
wire    ap_block_state37_pp2_stage0_iter6;
wire    ap_block_state38_pp2_stage0_iter7;
wire    ap_block_state39_pp2_stage0_iter8;
wire    ap_block_state40_pp2_stage0_iter9;
wire    ap_block_state41_pp2_stage0_iter10;
wire    ap_block_state42_pp2_stage0_iter11;
wire    ap_block_state43_pp2_stage0_iter12;
wire    ap_block_state44_pp2_stage0_iter13;
wire    ap_block_state45_pp2_stage0_iter14;
wire    ap_block_state46_pp2_stage0_iter15;
wire    ap_block_state47_pp2_stage0_iter16;
wire    ap_block_state48_pp2_stage0_iter17;
wire    ap_block_state49_pp2_stage0_iter18;
wire    ap_block_state50_pp2_stage0_iter19;
wire    ap_block_state51_pp2_stage0_iter20;
wire    ap_block_state52_pp2_stage0_iter21;
wire    ap_block_state53_pp2_stage0_iter22;
wire    ap_block_state54_pp2_stage0_iter23;
wire    ap_block_state55_pp2_stage0_iter24;
wire    ap_block_state56_pp2_stage0_iter25;
wire    ap_block_state57_pp2_stage0_iter26;
wire    ap_block_state58_pp2_stage0_iter27;
wire    ap_block_state59_pp2_stage0_iter28;
wire    ap_block_state60_pp2_stage0_iter29;
wire    ap_block_state61_pp2_stage0_iter30;
wire    ap_block_state62_pp2_stage0_iter31;
wire    ap_block_state63_pp2_stage0_iter32;
wire    ap_block_state64_pp2_stage0_iter33;
wire    ap_block_state65_pp2_stage0_iter34;
wire    ap_block_state66_pp2_stage0_iter35;
wire    ap_block_state67_pp2_stage0_iter36;
wire    ap_block_state68_pp2_stage0_iter37;
wire    ap_block_state69_pp2_stage0_iter38;
wire    ap_block_state70_pp2_stage0_iter39;
wire    ap_block_state71_pp2_stage0_iter40;
wire    ap_block_state72_pp2_stage0_iter41;
wire    ap_block_state73_pp2_stage0_iter42;
wire    ap_block_state74_pp2_stage0_iter43;
wire    ap_block_state75_pp2_stage0_iter44;
wire    ap_block_state76_pp2_stage0_iter45;
reg    ap_block_state77_pp2_stage0_iter46;
reg    ap_block_state77_io;
reg    ap_block_state78_pp2_stage0_iter47;
reg    ap_block_state78_io;
reg    ap_block_pp2_stage0_11001;
reg    ap_enable_reg_pp2_iter7;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter6_reg;
reg   [0:0] empty_54_reg_2256;
reg   [0:0] empty_54_reg_2256_pp2_iter6_reg;
reg   [0:0] empty_48_reg_2260;
reg   [0:0] empty_48_reg_2260_pp2_iter6_reg;
wire   [63:0] grp_fu_594_p2;
reg   [63:0] reg_657;
reg    ap_enable_reg_pp1_iter5;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter5_reg;
reg    ap_enable_reg_pp2_iter43;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter42_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter42_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter42_reg;
reg   [31:0] tmp_data_V_reg_2060;
reg   [3:0] ref_tmp_keep_reg_2067;
reg   [3:0] ref_tmp_strb_reg_2072;
reg   [1:0] ref_tmp_user_reg_2077;
reg   [0:0] tmp_last_V_reg_2082;
reg   [4:0] ref_tmp_id_reg_2086;
reg   [5:0] ref_tmp_dest_reg_2091;
reg   [15:0] trunc_ln54_1_reg_2096;
wire    ap_CS_fsm_state3;
reg   [7:0] trunc_ln54_2_reg_2101;
wire   [12:0] add_ln97_1_fu_970_p2;
reg   [12:0] add_ln97_1_reg_2106;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state9_pp1_stage0_iter1;
wire    ap_block_state11_pp1_stage0_iter2;
wire    ap_block_state13_pp1_stage0_iter3;
wire    ap_block_state15_pp1_stage0_iter4;
wire    ap_block_state17_pp1_stage0_iter5;
wire    ap_block_state19_pp1_stage0_iter6;
wire    ap_block_state21_pp1_stage0_iter7;
wire    ap_block_state23_pp1_stage0_iter8;
wire    ap_block_state25_pp1_stage0_iter9;
wire    ap_block_state27_pp1_stage0_iter10;
wire    ap_block_state29_pp1_stage0_iter11;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln97_fu_976_p2;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter1_reg;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter3_reg;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter4_reg;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter6_reg;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter7_reg;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter8_reg;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter9_reg;
reg   [0:0] icmp_ln97_reg_2111_pp1_iter10_reg;
wire   [6:0] select_ln97_fu_994_p3;
reg   [6:0] select_ln97_reg_2115;
reg   [6:0] select_ln97_reg_2115_pp1_iter1_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter2_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter3_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter4_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter5_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter6_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter7_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter8_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter9_reg;
reg   [6:0] select_ln97_reg_2115_pp1_iter10_reg;
wire   [5:0] select_ln97_1_fu_1002_p3;
reg   [5:0] select_ln97_1_reg_2121;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter1_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter2_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter3_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter4_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter5_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter6_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter7_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter8_reg;
reg   [5:0] select_ln97_1_reg_2121_pp1_iter9_reg;
wire   [6:0] add_ln98_fu_1052_p2;
reg   [6:0] add_ln98_reg_2142;
wire   [63:0] grp_fu_609_p1;
reg   [63:0] conv1_reg_2162;
reg   [63:0] conv2_reg_2167;
reg    ap_enable_reg_pp1_iter3;
wire   [63:0] grp_fu_599_p2;
reg   [63:0] mul1_reg_2172;
reg   [63:0] mul2_reg_2177;
reg    ap_enable_reg_pp1_iter6;
reg   [63:0] mul2_reg_2177_pp1_iter7_reg;
reg   [63:0] mul2_reg_2177_pp1_iter8_reg;
wire   [63:0] grp_fu_590_p2;
reg   [63:0] add_reg_2182;
reg    ap_enable_reg_pp1_iter8;
reg   [63:0] dc_reg_2197;
reg    ap_enable_reg_pp1_iter10;
wire   [12:0] add_ln111_fu_1224_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln111_fu_1242_p2;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter1_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter2_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter3_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter4_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter5_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter7_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter8_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter9_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter10_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter11_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter12_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter13_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter14_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter15_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter16_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter17_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter18_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter19_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter20_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter21_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter22_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter23_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter24_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter25_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter26_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter27_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter28_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter29_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter30_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter31_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter32_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter33_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter34_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter35_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter36_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter37_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter38_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter39_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter40_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter41_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter43_reg;
reg   [0:0] icmp_ln111_reg_2231_pp2_iter44_reg;
wire   [5:0] select_ln111_1_fu_1262_p3;
reg   [5:0] select_ln111_1_reg_2235;
reg   [12:0] Sobel_addr_reg_2250;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter1_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter2_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter3_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter4_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter5_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter6_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter7_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter8_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter9_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter10_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter11_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter12_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter13_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter14_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter15_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter16_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter17_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter18_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter19_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter20_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter21_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter22_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter23_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter24_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter25_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter26_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter27_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter28_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter29_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter30_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter31_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter32_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter33_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter34_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter35_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter36_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter37_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter38_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter39_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter40_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter41_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter42_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter43_reg;
reg   [12:0] Sobel_addr_reg_2250_pp2_iter44_reg;
wire   [0:0] empty_54_fu_1375_p2;
reg   [0:0] empty_54_reg_2256_pp2_iter1_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter2_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter3_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter4_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter5_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter7_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter8_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter9_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter10_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter11_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter12_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter13_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter14_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter15_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter16_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter17_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter18_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter19_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter20_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter21_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter22_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter23_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter24_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter25_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter26_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter27_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter28_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter29_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter30_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter31_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter32_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter33_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter34_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter35_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter36_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter37_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter38_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter39_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter40_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter41_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter43_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter44_reg;
reg   [0:0] empty_54_reg_2256_pp2_iter45_reg;
wire   [0:0] empty_48_fu_1393_p2;
reg   [0:0] empty_48_reg_2260_pp2_iter1_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter2_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter3_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter4_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter5_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter7_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter8_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter9_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter10_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter11_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter12_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter13_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter14_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter15_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter16_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter17_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter18_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter19_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter20_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter21_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter22_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter23_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter24_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter25_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter26_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter27_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter28_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter29_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter30_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter31_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter32_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter33_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter34_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter35_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter36_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter37_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter38_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter39_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter40_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter41_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter43_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter44_reg;
reg   [0:0] empty_48_reg_2260_pp2_iter45_reg;
wire   [6:0] add_ln112_fu_1485_p2;
wire   [31:0] add_ln127_fu_1751_p2;
reg   [31:0] add_ln127_reg_2303;
wire   [63:0] grp_fu_612_p2;
reg   [63:0] tmp_reg_2308;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter11;
wire    ap_CS_fsm_state30;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state31;
reg    ap_enable_reg_pp2_iter1;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter19;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
reg    ap_enable_reg_pp2_iter23;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg    ap_enable_reg_pp2_iter26;
reg    ap_enable_reg_pp2_iter27;
reg    ap_enable_reg_pp2_iter28;
reg    ap_enable_reg_pp2_iter29;
reg    ap_enable_reg_pp2_iter30;
reg    ap_enable_reg_pp2_iter31;
reg    ap_enable_reg_pp2_iter32;
reg    ap_enable_reg_pp2_iter33;
reg    ap_enable_reg_pp2_iter34;
reg    ap_enable_reg_pp2_iter35;
reg    ap_enable_reg_pp2_iter36;
reg    ap_enable_reg_pp2_iter37;
reg    ap_enable_reg_pp2_iter38;
reg    ap_enable_reg_pp2_iter39;
reg    ap_enable_reg_pp2_iter40;
reg    ap_enable_reg_pp2_iter41;
reg    ap_enable_reg_pp2_iter42;
reg    ap_enable_reg_pp2_iter44;
reg    ap_enable_reg_pp2_iter45;
reg   [12:0] Image_address0;
reg    Image_ce0;
reg    Image_we0;
wire   [31:0] Image_d0;
wire   [31:0] Image_q0;
wire   [12:0] Image_address1;
reg    Image_ce1;
wire  signed [31:0] Image_q1;
wire   [12:0] Image_address2;
reg    Image_ce2;
wire   [31:0] Image_q2;
wire   [12:0] Image_address3;
reg    Image_ce3;
wire   [31:0] Image_q3;
wire   [12:0] Image_address4;
reg    Image_ce4;
wire   [31:0] Image_q4;
wire   [12:0] Image_address5;
reg    Image_ce5;
wire  signed [31:0] Image_q5;
wire   [12:0] Image_address6;
reg    Image_ce6;
wire   [31:0] Image_q6;
wire   [12:0] Image_address7;
reg    Image_ce7;
wire  signed [31:0] Image_q7;
wire   [12:0] Image_address8;
reg    Image_ce8;
wire   [31:0] Image_q8;
wire   [12:0] Image_address9;
reg    Image_ce9;
wire  signed [31:0] Image_q9;
wire   [12:0] Image_address10;
reg    Image_ce10;
wire  signed [31:0] Image_q10;
wire   [12:0] Image_address11;
reg    Image_ce11;
wire  signed [31:0] Image_q11;
reg    Sobel_1_ce0;
reg    Sobel_1_we0;
reg   [31:0] Sobel_1_d0;
reg    Sobel_1_ce1;
wire   [31:0] Sobel_1_q1;
reg   [13:0] Array_Image_address0;
reg    Array_Image_ce0;
reg    Array_Image_we0;
reg   [31:0] Array_Image_d0;
wire   [31:0] Array_Image_q0;
reg   [13:0] Array_Image_address1;
reg    Array_Image_ce1;
wire   [31:0] Array_Image_q1;
reg   [12:0] ap_phi_mux_indvar_flatten_phi_fu_514_p4;
wire    ap_block_pp1_stage0;
reg   [5:0] ap_phi_mux_j_phi_fu_525_p4;
reg   [6:0] ap_phi_mux_i_1_phi_fu_536_p4;
reg   [5:0] ap_phi_mux_i_phi_fu_558_p4;
reg   [31:0] ap_phi_mux_tmp_data_V_3_phi_fu_580_p4;
wire   [31:0] ap_phi_reg_pp2_iter46_tmp_data_V_3_reg_576;
wire   [63:0] zext_ln54_fu_841_p1;
wire   [63:0] zext_ln54_1_fu_872_p1;
wire   [63:0] zext_ln54_2_fu_956_p1;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln54_3_fu_965_p1;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln99_fu_1010_p1;
wire   [63:0] zext_ln101_fu_1018_p1;
wire   [63:0] zext_ln103_fu_1047_p1;
wire    ap_block_pp1_stage1;
wire   [63:0] zext_ln106_2_fu_1080_p1;
wire   [63:0] zext_ln118_2_fu_1332_p1;
wire   [63:0] zext_ln119_2_fu_1343_p1;
wire   [63:0] zext_ln114_fu_1354_p1;
wire   [63:0] zext_ln118_3_fu_1415_p1;
wire   [63:0] zext_ln119_3_fu_1426_p1;
wire   [63:0] zext_ln123_1_fu_1437_p1;
wire   [63:0] zext_ln118_5_fu_1458_p1;
wire   [63:0] zext_ln119_4_fu_1469_p1;
wire   [63:0] zext_ln123_2_fu_1480_p1;
reg   [31:0] R_fu_172;
reg   [31:0] G_fu_176;
reg   [31:0] B_fu_180;
reg  signed [1:0] Vertical_Sobel_fu_184;
reg  signed [1:0] Vertical_Sobel_1_fu_188;
reg  signed [1:0] Vertical_Sobel_2_fu_192;
reg   [0:0] Vertical_Sobel_3_fu_196;
reg   [1:0] Vertical_Sobel_4_fu_200;
reg   [0:0] Vertical_Sobel_5_fu_204;
reg  signed [1:0] Horizontal_Sobel_fu_208;
reg   [0:0] Horizontal_Sobel_1_fu_212;
reg  signed [1:0] Horizontal_Sobel_4_fu_224;
reg   [0:0] Horizontal_Sobel_5_fu_228;
reg  signed [31:0] G1_Sum_fu_240;
wire   [31:0] G1_Sum_1_fu_1699_p2;
reg  signed [31:0] G2_Sum_fu_244;
wire   [31:0] G2_Sum_1_fu_1716_p2;
reg   [31:0] indx_fu_252;
wire   [31:0] grp_fu_640_p2;
reg   [31:0] ap_sig_allocacmp_indx_load_4;
reg   [31:0] ap_sig_allocacmp_indx_load_5;
wire   [31:0] indx_2_fu_1026_p2;
reg   [31:0] Mask_fu_256;
wire   [31:0] shl_ln55_1_fu_877_p2;
reg   [31:0] ap_sig_allocacmp_Mask_load_2;
reg   [31:0] ap_sig_allocacmp_Mask_load_6;
reg   [31:0] ap_sig_allocacmp_Mask_load_3;
reg   [31:0] ap_sig_allocacmp_Mask_load_7;
wire   [31:0] shl_ln55_2_fu_909_p2;
wire   [31:0] shl_ln55_3_fu_941_p2;
reg   [31:0] ap_sig_allocacmp_Mask_load;
reg   [31:0] ap_sig_allocacmp_Mask_load_1;
wire   [31:0] shl_ln55_fu_846_p2;
reg   [31:0] grp_load_fu_622_p1;
reg   [31:0] grp_load_fu_634_p1;
reg   [31:0] G2_3_fu_260;
wire   [31:0] G2_1_fu_1682_p2;
reg   [31:0] G2_2_fu_264;
wire   [31:0] G2_fu_1641_p2;
reg   [31:0] G1_3_fu_268;
wire   [31:0] G1_1_fu_1600_p2;
reg   [31:0] G1_2_fu_272;
wire   [31:0] G1_fu_1536_p2;
reg    ap_block_pp2_stage0_01001;
wire   [31:0] grp_fu_625_p2;
wire  signed [31:0] sext_ln54_fu_867_p1;
wire  signed [31:0] sext_ln54_1_fu_952_p1;
wire  signed [31:0] sext_ln54_2_fu_961_p1;
wire   [31:0] result_V_7_fu_1889_p3;
reg   [63:0] grp_fu_590_p0;
reg   [63:0] grp_fu_590_p1;
reg   [63:0] grp_fu_594_p0;
reg   [63:0] grp_fu_594_p1;
reg   [31:0] grp_fu_606_p0;
reg   [31:0] grp_fu_625_p1;
wire   [23:0] trunc_ln_fu_857_p4;
wire   [31:0] and_ln54_2_fu_891_p2;
wire   [31:0] and_ln54_3_fu_923_p2;
wire   [0:0] icmp_ln98_fu_988_p2;
wire   [5:0] add_ln97_fu_982_p2;
wire   [12:0] grp_fu_1904_p3;
wire   [63:0] data_V_fu_1084_p1;
wire   [51:0] tmp_13_fu_1105_p1;
wire   [53:0] mantissa_fu_1109_p4;
wire   [10:0] tmp_12_fu_1095_p4;
wire   [11:0] zext_ln510_fu_1123_p1;
wire   [11:0] add_ln510_fu_1127_p2;
wire   [10:0] sub_ln1311_fu_1141_p2;
wire   [0:0] isNeg_fu_1133_p3;
wire  signed [11:0] sext_ln1311_fu_1147_p1;
wire   [11:0] ush_fu_1151_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i_cast_cast_cast_fu_1159_p1;
wire   [136:0] zext_ln15_fu_1119_p1;
wire   [136:0] sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1;
wire   [136:0] r_V_fu_1167_p2;
wire   [0:0] tmp_6_fu_1179_p3;
wire   [136:0] r_V_1_fu_1173_p2;
wire   [31:0] zext_ln662_fu_1187_p1;
wire   [31:0] tmp_s_fu_1191_p4;
wire   [31:0] val_fu_1201_p3;
wire   [0:0] p_Result_s_fu_1087_p3;
wire   [31:0] result_V_2_fu_1209_p2;
wire   [0:0] icmp_ln112_fu_1248_p2;
wire   [5:0] indvars_iv_next155_fu_1236_p2;
wire   [5:0] mul_ln123_fu_1274_p0;
wire   [7:0] mul_ln123_fu_1274_p1;
wire   [5:0] empty_45_fu_1230_p2;
wire   [5:0] select_ln111_2_fu_1280_p3;
wire   [5:0] mul_ln118_3_fu_1292_p0;
wire   [7:0] mul_ln118_3_fu_1292_p1;
wire   [5:0] indvars_iv_next155_mid1_fu_1298_p2;
wire   [5:0] select_ln111_3_fu_1304_p3;
wire   [5:0] mul_ln119_1_fu_1316_p0;
wire   [7:0] mul_ln119_1_fu_1316_p1;
wire   [6:0] select_ln111_fu_1254_p3;
wire   [12:0] mul_ln118_3_fu_1292_p2;
wire   [12:0] zext_ln118_1_fu_1322_p1;
wire   [12:0] add_ln118_3_fu_1326_p2;
wire   [12:0] mul_ln119_1_fu_1316_p2;
wire   [12:0] add_ln119_1_fu_1337_p2;
wire   [12:0] mul_ln123_fu_1274_p2;
wire   [12:0] add_ln114_fu_1348_p2;
wire   [0:0] empty_53_fu_1369_p2;
wire   [0:0] empty_52_fu_1363_p2;
wire   [0:0] empty_47_fu_1387_p2;
wire   [0:0] empty_46_fu_1381_p2;
wire   [7:0] trunc_ln113_cast_fu_1359_p1;
wire   [7:0] add_ln118_fu_1399_p2;
wire  signed [12:0] sext_ln118_1_fu_1405_p1;
wire   [12:0] add_ln118_4_fu_1409_p2;
wire   [12:0] add_ln119_2_fu_1420_p2;
wire   [12:0] add_ln123_fu_1431_p2;
wire   [6:0] add_ln118_1_fu_1442_p2;
wire   [12:0] zext_ln118_4_fu_1448_p1;
wire   [12:0] add_ln118_5_fu_1452_p2;
wire   [12:0] add_ln119_3_fu_1463_p2;
wire   [12:0] add_ln123_1_fu_1474_p2;
wire   [31:0] mul_ln118_fu_1498_p2;
wire   [31:0] mul_ln118_2_fu_1524_p2;
wire   [31:0] add_ln118_2_fu_1530_p2;
wire   [31:0] mul_ln118_1_fu_1511_p2;
wire   [31:0] select_ln119_fu_1550_p3;
wire   [1:0] mul_ln119_fu_1571_p1;
wire   [31:0] select_ln119_1_fu_1580_p3;
wire   [31:0] and_ln119_fu_1558_p2;
wire   [31:0] and_ln119_1_fu_1588_p2;
wire   [31:0] add_ln119_fu_1594_p2;
wire   [31:0] mul_ln119_fu_1571_p2;
wire   [31:0] select_ln122_fu_1627_p3;
wire   [31:0] and_ln122_fu_1635_p2;
wire   [31:0] mul_ln122_fu_1618_p2;
wire   [31:0] select_ln124_fu_1668_p3;
wire   [31:0] and_ln124_fu_1676_p2;
wire   [31:0] mul_ln124_fu_1659_p2;
wire   [31:0] mul_ln127_1_fu_1745_p2;
wire   [31:0] mul_ln127_fu_1733_p2;
wire   [63:0] data_V_1_fu_1757_p1;
wire   [51:0] tmp_15_fu_1779_p1;
wire   [53:0] mantissa_1_fu_1783_p4;
wire   [10:0] tmp_14_fu_1769_p4;
wire   [11:0] zext_ln510_1_fu_1797_p1;
wire   [11:0] add_ln510_1_fu_1801_p2;
wire   [10:0] sub_ln1311_1_fu_1815_p2;
wire   [0:0] isNeg_1_fu_1807_p3;
wire  signed [11:0] sext_ln1311_1_fu_1821_p1;
wire   [11:0] ush_1_fu_1825_p3;
wire  signed [31:0] sh_prom_i_i_i_i_i139_cast_cast_cast_fu_1833_p1;
wire   [136:0] zext_ln15_1_fu_1793_p1;
wire   [136:0] sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1;
wire   [136:0] r_V_2_fu_1841_p2;
wire   [0:0] tmp_11_fu_1853_p3;
wire   [136:0] r_V_3_fu_1847_p2;
wire   [31:0] zext_ln662_1_fu_1861_p1;
wire   [31:0] tmp_2_fu_1865_p4;
wire   [31:0] val_1_fu_1875_p3;
wire   [0:0] p_Result_1_fu_1761_p3;
wire   [31:0] result_V_6_fu_1883_p2;
wire   [5:0] grp_fu_1904_p0;
wire   [7:0] grp_fu_1904_p1;
wire   [6:0] grp_fu_1904_p2;
reg    grp_fu_594_ce;
reg    grp_fu_606_ce;
reg    grp_fu_612_ce;
wire    ap_CS_fsm_state79;
wire    regslice_both_Data_Out_V_data_V_U_apdone_blk;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_Data_In_V_data_V_U_apdone_blk;
wire   [31:0] Data_In_TDATA_int_regslice;
wire    Data_In_TVALID_int_regslice;
reg    Data_In_TREADY_int_regslice;
wire    regslice_both_Data_In_V_data_V_U_ack_in;
wire    regslice_both_Data_In_V_keep_V_U_apdone_blk;
wire   [3:0] Data_In_TKEEP_int_regslice;
wire    regslice_both_Data_In_V_keep_V_U_vld_out;
wire    regslice_both_Data_In_V_keep_V_U_ack_in;
wire    regslice_both_Data_In_V_strb_V_U_apdone_blk;
wire   [3:0] Data_In_TSTRB_int_regslice;
wire    regslice_both_Data_In_V_strb_V_U_vld_out;
wire    regslice_both_Data_In_V_strb_V_U_ack_in;
wire    regslice_both_Data_In_V_user_V_U_apdone_blk;
wire   [1:0] Data_In_TUSER_int_regslice;
wire    regslice_both_Data_In_V_user_V_U_vld_out;
wire    regslice_both_Data_In_V_user_V_U_ack_in;
wire    regslice_both_Data_In_V_last_V_U_apdone_blk;
wire   [0:0] Data_In_TLAST_int_regslice;
wire    regslice_both_Data_In_V_last_V_U_vld_out;
wire    regslice_both_Data_In_V_last_V_U_ack_in;
wire    regslice_both_Data_In_V_id_V_U_apdone_blk;
wire   [4:0] Data_In_TID_int_regslice;
wire    regslice_both_Data_In_V_id_V_U_vld_out;
wire    regslice_both_Data_In_V_id_V_U_ack_in;
wire    regslice_both_Data_In_V_dest_V_U_apdone_blk;
wire   [5:0] Data_In_TDEST_int_regslice;
wire    regslice_both_Data_In_V_dest_V_U_vld_out;
wire    regslice_both_Data_In_V_dest_V_U_ack_in;
reg    Data_Out_TVALID_int_regslice;
wire    Data_Out_TREADY_int_regslice;
wire    regslice_both_Data_Out_V_data_V_U_vld_out;
wire    regslice_both_Data_Out_V_keep_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_keep_V_U_vld_out;
wire    regslice_both_Data_Out_V_strb_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_strb_V_U_vld_out;
wire    regslice_both_Data_Out_V_user_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_user_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_user_V_U_vld_out;
wire    regslice_both_Data_Out_V_last_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_last_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_last_V_U_vld_out;
wire    regslice_both_Data_Out_V_id_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_id_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_id_V_U_vld_out;
wire    regslice_both_Data_Out_V_dest_V_U_apdone_blk;
wire    regslice_both_Data_Out_V_dest_V_U_ack_in_dummy;
wire    regslice_both_Data_Out_V_dest_V_U_vld_out;
wire   [12:0] grp_fu_1904_p00;
wire   [12:0] grp_fu_1904_p20;
wire   [12:0] mul_ln118_3_fu_1292_p00;
wire   [12:0] mul_ln119_1_fu_1316_p00;
wire   [31:0] mul_ln119_fu_1571_p10;
wire   [12:0] mul_ln123_fu_1274_p00;
reg    ap_condition_1286;
reg    ap_condition_1295;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp2_iter46 = 1'b0;
#0 ap_enable_reg_pp2_iter47 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter43 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter26 = 1'b0;
#0 ap_enable_reg_pp2_iter27 = 1'b0;
#0 ap_enable_reg_pp2_iter28 = 1'b0;
#0 ap_enable_reg_pp2_iter29 = 1'b0;
#0 ap_enable_reg_pp2_iter30 = 1'b0;
#0 ap_enable_reg_pp2_iter31 = 1'b0;
#0 ap_enable_reg_pp2_iter32 = 1'b0;
#0 ap_enable_reg_pp2_iter33 = 1'b0;
#0 ap_enable_reg_pp2_iter34 = 1'b0;
#0 ap_enable_reg_pp2_iter35 = 1'b0;
#0 ap_enable_reg_pp2_iter36 = 1'b0;
#0 ap_enable_reg_pp2_iter37 = 1'b0;
#0 ap_enable_reg_pp2_iter38 = 1'b0;
#0 ap_enable_reg_pp2_iter39 = 1'b0;
#0 ap_enable_reg_pp2_iter40 = 1'b0;
#0 ap_enable_reg_pp2_iter41 = 1'b0;
#0 ap_enable_reg_pp2_iter42 = 1'b0;
#0 ap_enable_reg_pp2_iter44 = 1'b0;
#0 ap_enable_reg_pp2_iter45 = 1'b0;
end

Sobel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

Sobel_Image #(
    .DataWidth( 32 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
Image_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Image_address0),
    .ce0(Image_ce0),
    .we0(Image_we0),
    .d0(Image_d0),
    .q0(Image_q0),
    .address1(Image_address1),
    .ce1(Image_ce1),
    .q1(Image_q1),
    .address2(Image_address2),
    .ce2(Image_ce2),
    .q2(Image_q2),
    .address3(Image_address3),
    .ce3(Image_ce3),
    .q3(Image_q3),
    .address4(Image_address4),
    .ce4(Image_ce4),
    .q4(Image_q4),
    .address5(Image_address5),
    .ce5(Image_ce5),
    .q5(Image_q5),
    .address6(Image_address6),
    .ce6(Image_ce6),
    .q6(Image_q6),
    .address7(Image_address7),
    .ce7(Image_ce7),
    .q7(Image_q7),
    .address8(Image_address8),
    .ce8(Image_ce8),
    .q8(Image_q8),
    .address9(Image_address9),
    .ce9(Image_ce9),
    .q9(Image_q9),
    .address10(Image_address10),
    .ce10(Image_ce10),
    .q10(Image_q10),
    .address11(Image_address11),
    .ce11(Image_ce11),
    .q11(Image_q11)
);

Sobel_Sobel_1 #(
    .DataWidth( 32 ),
    .AddressRange( 5000 ),
    .AddressWidth( 13 ))
Sobel_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Sobel_addr_reg_2250_pp2_iter43_reg),
    .ce0(Sobel_1_ce0),
    .we0(Sobel_1_we0),
    .d0(Sobel_1_d0),
    .address1(Sobel_addr_reg_2250_pp2_iter44_reg),
    .ce1(Sobel_1_ce1),
    .q1(Sobel_1_q1)
);

Sobel_Array_Image #(
    .DataWidth( 32 ),
    .AddressRange( 15000 ),
    .AddressWidth( 14 ))
Array_Image_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Array_Image_address0),
    .ce0(Array_Image_ce0),
    .we0(Array_Image_we0),
    .d0(Array_Image_d0),
    .q0(Array_Image_q0),
    .address1(Array_Image_address1),
    .ce1(Array_Image_ce1),
    .q1(Array_Image_q1)
);

Sobel_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_590_p0),
    .din1(grp_fu_590_p1),
    .ce(1'b1),
    .dout(grp_fu_590_p2)
);

Sobel_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_594_p0),
    .din1(grp_fu_594_p1),
    .ce(grp_fu_594_ce),
    .dout(grp_fu_594_p2)
);

Sobel_dmul_64ns_64ns_64_6_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_6_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv1_reg_2162),
    .din1(64'd4603462445507809378),
    .ce(1'b1),
    .dout(grp_fu_599_p2)
);

Sobel_sitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_4_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_606_p0),
    .ce(grp_fu_606_ce),
    .dout(grp_fu_606_p1)
);

Sobel_sitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_4_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(G_fu_176),
    .ce(1'b1),
    .dout(grp_fu_609_p1)
);

Sobel_dsqrt_64ns_64ns_64_30_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_30_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(64'd0),
    .din1(reg_651),
    .ce(grp_fu_612_ce),
    .dout(grp_fu_612_p2)
);

Sobel_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U7(
    .din0(mul_ln123_fu_1274_p0),
    .din1(mul_ln123_fu_1274_p1),
    .dout(mul_ln123_fu_1274_p2)
);

Sobel_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U8(
    .din0(mul_ln118_3_fu_1292_p0),
    .din1(mul_ln118_3_fu_1292_p1),
    .dout(mul_ln118_3_fu_1292_p2)
);

Sobel_mul_6ns_8ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 13 ))
mul_6ns_8ns_13_1_1_U9(
    .din0(mul_ln119_1_fu_1316_p0),
    .din1(mul_ln119_1_fu_1316_p1),
    .dout(mul_ln119_1_fu_1316_p2)
);

Sobel_mul_32s_2s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mul_32s_2s_32_1_1_U10(
    .din0(Image_q11),
    .din1(Vertical_Sobel_fu_184),
    .dout(mul_ln118_fu_1498_p2)
);

Sobel_mul_32s_2s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mul_32s_2s_32_1_1_U11(
    .din0(Image_q10),
    .din1(Vertical_Sobel_1_fu_188),
    .dout(mul_ln118_1_fu_1511_p2)
);

Sobel_mul_32s_2s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mul_32s_2s_32_1_1_U12(
    .din0(Image_q9),
    .din1(Vertical_Sobel_2_fu_192),
    .dout(mul_ln118_2_fu_1524_p2)
);

Sobel_mul_32s_2ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mul_32s_2ns_32_1_1_U13(
    .din0(Image_q7),
    .din1(mul_ln119_fu_1571_p1),
    .dout(mul_ln119_fu_1571_p2)
);

Sobel_mul_32s_2s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mul_32s_2s_32_1_1_U14(
    .din0(Image_q5),
    .din1(Horizontal_Sobel_fu_208),
    .dout(mul_ln122_fu_1618_p2)
);

Sobel_mul_32s_2s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mul_32s_2s_32_1_1_U15(
    .din0(Image_q1),
    .din1(Horizontal_Sobel_4_fu_224),
    .dout(mul_ln124_fu_1659_p2)
);

Sobel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U16(
    .din0(G1_Sum_fu_240),
    .din1(G1_Sum_fu_240),
    .dout(mul_ln127_fu_1733_p2)
);

Sobel_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U17(
    .din0(G2_Sum_fu_244),
    .din1(G2_Sum_fu_244),
    .dout(mul_ln127_1_fu_1745_p2)
);

Sobel_mac_muladd_6ns_8ns_7ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 13 ))
mac_muladd_6ns_8ns_7ns_13_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1904_p0),
    .din1(grp_fu_1904_p1),
    .din2(grp_fu_1904_p2),
    .ce(1'b1),
    .dout(grp_fu_1904_p3)
);

Sobel_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Data_In_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TDATA),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_data_V_U_ack_in),
    .data_out(Data_In_TDATA_int_regslice),
    .vld_out(Data_In_TVALID_int_regslice),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_data_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_In_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TKEEP),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_keep_V_U_ack_in),
    .data_out(Data_In_TKEEP_int_regslice),
    .vld_out(regslice_both_Data_In_V_keep_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_keep_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_In_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TSTRB),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_strb_V_U_ack_in),
    .data_out(Data_In_TSTRB_int_regslice),
    .vld_out(regslice_both_Data_In_V_strb_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_strb_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 2 ))
regslice_both_Data_In_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TUSER),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_user_V_U_ack_in),
    .data_out(Data_In_TUSER_int_regslice),
    .vld_out(regslice_both_Data_In_V_user_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_user_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_Data_In_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TLAST),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_last_V_U_ack_in),
    .data_out(Data_In_TLAST_int_regslice),
    .vld_out(regslice_both_Data_In_V_last_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_last_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 5 ))
regslice_both_Data_In_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TID),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_id_V_U_ack_in),
    .data_out(Data_In_TID_int_regslice),
    .vld_out(regslice_both_Data_In_V_id_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_id_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 6 ))
regslice_both_Data_In_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(Data_In_TDEST),
    .vld_in(Data_In_TVALID),
    .ack_in(regslice_both_Data_In_V_dest_V_U_ack_in),
    .data_out(Data_In_TDEST_int_regslice),
    .vld_out(regslice_both_Data_In_V_dest_V_U_vld_out),
    .ack_out(Data_In_TREADY_int_regslice),
    .apdone_blk(regslice_both_Data_In_V_dest_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 32 ))
regslice_both_Data_Out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ap_phi_mux_tmp_data_V_3_phi_fu_580_p4),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(Data_Out_TREADY_int_regslice),
    .data_out(Data_Out_TDATA),
    .vld_out(regslice_both_Data_Out_V_data_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_data_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_Out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_keep_reg_2067),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_keep_V_U_ack_in_dummy),
    .data_out(Data_Out_TKEEP),
    .vld_out(regslice_both_Data_Out_V_keep_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_keep_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 4 ))
regslice_both_Data_Out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_strb_reg_2072),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_strb_V_U_ack_in_dummy),
    .data_out(Data_Out_TSTRB),
    .vld_out(regslice_both_Data_Out_V_strb_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_strb_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 2 ))
regslice_both_Data_Out_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_user_reg_2077),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_user_V_U_ack_in_dummy),
    .data_out(Data_Out_TUSER),
    .vld_out(regslice_both_Data_Out_V_user_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_user_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 1 ))
regslice_both_Data_Out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd1),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_last_V_U_ack_in_dummy),
    .data_out(Data_Out_TLAST),
    .vld_out(regslice_both_Data_Out_V_last_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_last_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 5 ))
regslice_both_Data_Out_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_id_reg_2086),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_id_V_U_ack_in_dummy),
    .data_out(Data_Out_TID),
    .vld_out(regslice_both_Data_Out_V_id_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_id_V_U_apdone_blk)
);

Sobel_regslice_both #(
    .DataWidth( 6 ))
regslice_both_Data_Out_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ref_tmp_dest_reg_2091),
    .vld_in(Data_Out_TVALID_int_regslice),
    .ack_in(regslice_both_Data_Out_V_dest_V_U_ack_in_dummy),
    .data_out(Data_Out_TDEST),
    .vld_out(regslice_both_Data_Out_V_dest_V_U_vld_out),
    .ack_out(Data_Out_TREADY),
    .apdone_blk(regslice_both_Data_Out_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state31) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state31)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state31);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter29 <= ap_enable_reg_pp2_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter30 <= ap_enable_reg_pp2_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter31 <= ap_enable_reg_pp2_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter32 <= ap_enable_reg_pp2_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter33 <= ap_enable_reg_pp2_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter34 <= ap_enable_reg_pp2_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter35 <= ap_enable_reg_pp2_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter36 <= ap_enable_reg_pp2_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter37 <= ap_enable_reg_pp2_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter38 <= ap_enable_reg_pp2_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter39 <= ap_enable_reg_pp2_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter40 <= ap_enable_reg_pp2_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter41 <= ap_enable_reg_pp2_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter42 <= ap_enable_reg_pp2_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter43 <= ap_enable_reg_pp2_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter44 <= ap_enable_reg_pp2_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter45 <= ap_enable_reg_pp2_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter46 <= ap_enable_reg_pp2_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter47 <= ap_enable_reg_pp2_iter46;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            ap_enable_reg_pp2_iter47 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        B_fu_180 <= 32'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111 == 1'd0))) begin
        B_fu_180 <= Array_Image_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        G1_Sum_fu_240 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (empty_48_reg_2260_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (empty_54_reg_2256_pp2_iter1_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter1_reg == 1'd0))) begin
        G1_Sum_fu_240 <= G1_Sum_1_fu_1699_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        G2_Sum_fu_244 <= 32'd0;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (empty_48_reg_2260_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (empty_54_reg_2256_pp2_iter1_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter1_reg == 1'd0))) begin
        G2_Sum_fu_244 <= G2_Sum_1_fu_1716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        G_fu_176 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln97_reg_2111 == 1'd0))) begin
        G_fu_176 <= Array_Image_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Horizontal_Sobel_1_fu_212 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    Horizontal_Sobel_4_fu_224 <= 2'd3;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    Horizontal_Sobel_5_fu_228 <= 1'd1;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    Horizontal_Sobel_fu_208 <= 2'd3;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Data_In_TVALID_int_regslice))) begin
    Mask_fu_256 <= shl_ln55_fu_846_p2;
end else if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Data_In_TVALID_int_regslice))) begin
    Mask_fu_256 <= 32'd255;
end else if ((1'b1 == ap_CS_fsm_state3)) begin
    Mask_fu_256 <= shl_ln55_3_fu_941_p2;
end else if ((1'b1 == ap_CS_fsm_state3)) begin
    Mask_fu_256 <= shl_ln55_2_fu_909_p2;
end else if ((1'b1 == ap_CS_fsm_state3)) begin
    Mask_fu_256 <= shl_ln55_1_fu_877_p2;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    R_fu_172 <= 32'd0;
end else if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln97_reg_2111 == 1'd0))) begin
    R_fu_172 <= Array_Image_q1;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Vertical_Sobel_1_fu_188[1] <= 1'b1;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    Vertical_Sobel_2_fu_192 <= 2'd3;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    Vertical_Sobel_3_fu_196 <= 1'd1;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        Vertical_Sobel_4_fu_200[1] <= 1'b1;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    Vertical_Sobel_5_fu_204 <= 1'd1;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
    Vertical_Sobel_fu_184 <= 2'd3;
end
end

always @ (posedge ap_clk) begin
if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111 == 1'd0))) begin
    i_1_reg_532 <= add_ln98_reg_2142;
end else if ((1'b1 == ap_CS_fsm_state6)) begin
    i_1_reg_532 <= 7'd0;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_CS_fsm_state30)) begin
    i_reg_554 <= 6'd0;
end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln111_reg_2231 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
    i_reg_554 <= select_ln111_1_reg_2235;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_CS_fsm_state30)) begin
    indvar_flatten7_reg_543 <= 13'd0;
end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln111_fu_1242_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
    indvar_flatten7_reg_543 <= add_ln111_fu_1224_p2;
end
end

always @ (posedge ap_clk) begin
if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111 == 1'd0))) begin
    indvar_flatten_reg_510 <= add_ln97_1_reg_2106;
end else if ((1'b1 == ap_CS_fsm_state6)) begin
    indvar_flatten_reg_510 <= 13'd0;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
    indx_fu_252 <= 32'd0;
end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln97_fu_976_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
    indx_fu_252 <= indx_2_fu_1026_p2;
end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Data_In_TVALID_int_regslice)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln97_fu_976_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln97_reg_2111 == 1'd0)))) begin
    indx_fu_252 <= grp_fu_640_p2;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_CS_fsm_state30)) begin
    j_1_reg_565 <= 7'd0;
end else if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln111_fu_1242_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
    j_1_reg_565 <= add_ln112_fu_1485_p2;
end
end

always @ (posedge ap_clk) begin
if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111 == 1'd0))) begin
    j_reg_521 <= select_ln97_1_reg_2121;
end else if ((1'b1 == ap_CS_fsm_state6)) begin
    j_reg_521 <= 6'd0;
end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln111_reg_2231 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (empty_48_reg_2260 == 1'd0) & (empty_54_reg_2256 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        G1_2_fu_272 <= G1_fu_1536_p2;
        G1_3_fu_268 <= G1_1_fu_1600_p2;
        G2_2_fu_264 <= G2_fu_1641_p2;
        G2_3_fu_260 <= G2_1_fu_1682_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln111_fu_1242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Sobel_addr_reg_2250 <= zext_ln114_fu_1354_p1;
        empty_54_reg_2256 <= empty_54_fu_1375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        Sobel_addr_reg_2250_pp2_iter10_reg <= Sobel_addr_reg_2250_pp2_iter9_reg;
        Sobel_addr_reg_2250_pp2_iter11_reg <= Sobel_addr_reg_2250_pp2_iter10_reg;
        Sobel_addr_reg_2250_pp2_iter12_reg <= Sobel_addr_reg_2250_pp2_iter11_reg;
        Sobel_addr_reg_2250_pp2_iter13_reg <= Sobel_addr_reg_2250_pp2_iter12_reg;
        Sobel_addr_reg_2250_pp2_iter14_reg <= Sobel_addr_reg_2250_pp2_iter13_reg;
        Sobel_addr_reg_2250_pp2_iter15_reg <= Sobel_addr_reg_2250_pp2_iter14_reg;
        Sobel_addr_reg_2250_pp2_iter16_reg <= Sobel_addr_reg_2250_pp2_iter15_reg;
        Sobel_addr_reg_2250_pp2_iter17_reg <= Sobel_addr_reg_2250_pp2_iter16_reg;
        Sobel_addr_reg_2250_pp2_iter18_reg <= Sobel_addr_reg_2250_pp2_iter17_reg;
        Sobel_addr_reg_2250_pp2_iter19_reg <= Sobel_addr_reg_2250_pp2_iter18_reg;
        Sobel_addr_reg_2250_pp2_iter20_reg <= Sobel_addr_reg_2250_pp2_iter19_reg;
        Sobel_addr_reg_2250_pp2_iter21_reg <= Sobel_addr_reg_2250_pp2_iter20_reg;
        Sobel_addr_reg_2250_pp2_iter22_reg <= Sobel_addr_reg_2250_pp2_iter21_reg;
        Sobel_addr_reg_2250_pp2_iter23_reg <= Sobel_addr_reg_2250_pp2_iter22_reg;
        Sobel_addr_reg_2250_pp2_iter24_reg <= Sobel_addr_reg_2250_pp2_iter23_reg;
        Sobel_addr_reg_2250_pp2_iter25_reg <= Sobel_addr_reg_2250_pp2_iter24_reg;
        Sobel_addr_reg_2250_pp2_iter26_reg <= Sobel_addr_reg_2250_pp2_iter25_reg;
        Sobel_addr_reg_2250_pp2_iter27_reg <= Sobel_addr_reg_2250_pp2_iter26_reg;
        Sobel_addr_reg_2250_pp2_iter28_reg <= Sobel_addr_reg_2250_pp2_iter27_reg;
        Sobel_addr_reg_2250_pp2_iter29_reg <= Sobel_addr_reg_2250_pp2_iter28_reg;
        Sobel_addr_reg_2250_pp2_iter2_reg <= Sobel_addr_reg_2250_pp2_iter1_reg;
        Sobel_addr_reg_2250_pp2_iter30_reg <= Sobel_addr_reg_2250_pp2_iter29_reg;
        Sobel_addr_reg_2250_pp2_iter31_reg <= Sobel_addr_reg_2250_pp2_iter30_reg;
        Sobel_addr_reg_2250_pp2_iter32_reg <= Sobel_addr_reg_2250_pp2_iter31_reg;
        Sobel_addr_reg_2250_pp2_iter33_reg <= Sobel_addr_reg_2250_pp2_iter32_reg;
        Sobel_addr_reg_2250_pp2_iter34_reg <= Sobel_addr_reg_2250_pp2_iter33_reg;
        Sobel_addr_reg_2250_pp2_iter35_reg <= Sobel_addr_reg_2250_pp2_iter34_reg;
        Sobel_addr_reg_2250_pp2_iter36_reg <= Sobel_addr_reg_2250_pp2_iter35_reg;
        Sobel_addr_reg_2250_pp2_iter37_reg <= Sobel_addr_reg_2250_pp2_iter36_reg;
        Sobel_addr_reg_2250_pp2_iter38_reg <= Sobel_addr_reg_2250_pp2_iter37_reg;
        Sobel_addr_reg_2250_pp2_iter39_reg <= Sobel_addr_reg_2250_pp2_iter38_reg;
        Sobel_addr_reg_2250_pp2_iter3_reg <= Sobel_addr_reg_2250_pp2_iter2_reg;
        Sobel_addr_reg_2250_pp2_iter40_reg <= Sobel_addr_reg_2250_pp2_iter39_reg;
        Sobel_addr_reg_2250_pp2_iter41_reg <= Sobel_addr_reg_2250_pp2_iter40_reg;
        Sobel_addr_reg_2250_pp2_iter42_reg <= Sobel_addr_reg_2250_pp2_iter41_reg;
        Sobel_addr_reg_2250_pp2_iter43_reg <= Sobel_addr_reg_2250_pp2_iter42_reg;
        Sobel_addr_reg_2250_pp2_iter44_reg <= Sobel_addr_reg_2250_pp2_iter43_reg;
        Sobel_addr_reg_2250_pp2_iter4_reg <= Sobel_addr_reg_2250_pp2_iter3_reg;
        Sobel_addr_reg_2250_pp2_iter5_reg <= Sobel_addr_reg_2250_pp2_iter4_reg;
        Sobel_addr_reg_2250_pp2_iter6_reg <= Sobel_addr_reg_2250_pp2_iter5_reg;
        Sobel_addr_reg_2250_pp2_iter7_reg <= Sobel_addr_reg_2250_pp2_iter6_reg;
        Sobel_addr_reg_2250_pp2_iter8_reg <= Sobel_addr_reg_2250_pp2_iter7_reg;
        Sobel_addr_reg_2250_pp2_iter9_reg <= Sobel_addr_reg_2250_pp2_iter8_reg;
        empty_48_reg_2260_pp2_iter10_reg <= empty_48_reg_2260_pp2_iter9_reg;
        empty_48_reg_2260_pp2_iter11_reg <= empty_48_reg_2260_pp2_iter10_reg;
        empty_48_reg_2260_pp2_iter12_reg <= empty_48_reg_2260_pp2_iter11_reg;
        empty_48_reg_2260_pp2_iter13_reg <= empty_48_reg_2260_pp2_iter12_reg;
        empty_48_reg_2260_pp2_iter14_reg <= empty_48_reg_2260_pp2_iter13_reg;
        empty_48_reg_2260_pp2_iter15_reg <= empty_48_reg_2260_pp2_iter14_reg;
        empty_48_reg_2260_pp2_iter16_reg <= empty_48_reg_2260_pp2_iter15_reg;
        empty_48_reg_2260_pp2_iter17_reg <= empty_48_reg_2260_pp2_iter16_reg;
        empty_48_reg_2260_pp2_iter18_reg <= empty_48_reg_2260_pp2_iter17_reg;
        empty_48_reg_2260_pp2_iter19_reg <= empty_48_reg_2260_pp2_iter18_reg;
        empty_48_reg_2260_pp2_iter20_reg <= empty_48_reg_2260_pp2_iter19_reg;
        empty_48_reg_2260_pp2_iter21_reg <= empty_48_reg_2260_pp2_iter20_reg;
        empty_48_reg_2260_pp2_iter22_reg <= empty_48_reg_2260_pp2_iter21_reg;
        empty_48_reg_2260_pp2_iter23_reg <= empty_48_reg_2260_pp2_iter22_reg;
        empty_48_reg_2260_pp2_iter24_reg <= empty_48_reg_2260_pp2_iter23_reg;
        empty_48_reg_2260_pp2_iter25_reg <= empty_48_reg_2260_pp2_iter24_reg;
        empty_48_reg_2260_pp2_iter26_reg <= empty_48_reg_2260_pp2_iter25_reg;
        empty_48_reg_2260_pp2_iter27_reg <= empty_48_reg_2260_pp2_iter26_reg;
        empty_48_reg_2260_pp2_iter28_reg <= empty_48_reg_2260_pp2_iter27_reg;
        empty_48_reg_2260_pp2_iter29_reg <= empty_48_reg_2260_pp2_iter28_reg;
        empty_48_reg_2260_pp2_iter2_reg <= empty_48_reg_2260_pp2_iter1_reg;
        empty_48_reg_2260_pp2_iter30_reg <= empty_48_reg_2260_pp2_iter29_reg;
        empty_48_reg_2260_pp2_iter31_reg <= empty_48_reg_2260_pp2_iter30_reg;
        empty_48_reg_2260_pp2_iter32_reg <= empty_48_reg_2260_pp2_iter31_reg;
        empty_48_reg_2260_pp2_iter33_reg <= empty_48_reg_2260_pp2_iter32_reg;
        empty_48_reg_2260_pp2_iter34_reg <= empty_48_reg_2260_pp2_iter33_reg;
        empty_48_reg_2260_pp2_iter35_reg <= empty_48_reg_2260_pp2_iter34_reg;
        empty_48_reg_2260_pp2_iter36_reg <= empty_48_reg_2260_pp2_iter35_reg;
        empty_48_reg_2260_pp2_iter37_reg <= empty_48_reg_2260_pp2_iter36_reg;
        empty_48_reg_2260_pp2_iter38_reg <= empty_48_reg_2260_pp2_iter37_reg;
        empty_48_reg_2260_pp2_iter39_reg <= empty_48_reg_2260_pp2_iter38_reg;
        empty_48_reg_2260_pp2_iter3_reg <= empty_48_reg_2260_pp2_iter2_reg;
        empty_48_reg_2260_pp2_iter40_reg <= empty_48_reg_2260_pp2_iter39_reg;
        empty_48_reg_2260_pp2_iter41_reg <= empty_48_reg_2260_pp2_iter40_reg;
        empty_48_reg_2260_pp2_iter42_reg <= empty_48_reg_2260_pp2_iter41_reg;
        empty_48_reg_2260_pp2_iter43_reg <= empty_48_reg_2260_pp2_iter42_reg;
        empty_48_reg_2260_pp2_iter44_reg <= empty_48_reg_2260_pp2_iter43_reg;
        empty_48_reg_2260_pp2_iter45_reg <= empty_48_reg_2260_pp2_iter44_reg;
        empty_48_reg_2260_pp2_iter4_reg <= empty_48_reg_2260_pp2_iter3_reg;
        empty_48_reg_2260_pp2_iter5_reg <= empty_48_reg_2260_pp2_iter4_reg;
        empty_48_reg_2260_pp2_iter6_reg <= empty_48_reg_2260_pp2_iter5_reg;
        empty_48_reg_2260_pp2_iter7_reg <= empty_48_reg_2260_pp2_iter6_reg;
        empty_48_reg_2260_pp2_iter8_reg <= empty_48_reg_2260_pp2_iter7_reg;
        empty_48_reg_2260_pp2_iter9_reg <= empty_48_reg_2260_pp2_iter8_reg;
        empty_54_reg_2256_pp2_iter10_reg <= empty_54_reg_2256_pp2_iter9_reg;
        empty_54_reg_2256_pp2_iter11_reg <= empty_54_reg_2256_pp2_iter10_reg;
        empty_54_reg_2256_pp2_iter12_reg <= empty_54_reg_2256_pp2_iter11_reg;
        empty_54_reg_2256_pp2_iter13_reg <= empty_54_reg_2256_pp2_iter12_reg;
        empty_54_reg_2256_pp2_iter14_reg <= empty_54_reg_2256_pp2_iter13_reg;
        empty_54_reg_2256_pp2_iter15_reg <= empty_54_reg_2256_pp2_iter14_reg;
        empty_54_reg_2256_pp2_iter16_reg <= empty_54_reg_2256_pp2_iter15_reg;
        empty_54_reg_2256_pp2_iter17_reg <= empty_54_reg_2256_pp2_iter16_reg;
        empty_54_reg_2256_pp2_iter18_reg <= empty_54_reg_2256_pp2_iter17_reg;
        empty_54_reg_2256_pp2_iter19_reg <= empty_54_reg_2256_pp2_iter18_reg;
        empty_54_reg_2256_pp2_iter20_reg <= empty_54_reg_2256_pp2_iter19_reg;
        empty_54_reg_2256_pp2_iter21_reg <= empty_54_reg_2256_pp2_iter20_reg;
        empty_54_reg_2256_pp2_iter22_reg <= empty_54_reg_2256_pp2_iter21_reg;
        empty_54_reg_2256_pp2_iter23_reg <= empty_54_reg_2256_pp2_iter22_reg;
        empty_54_reg_2256_pp2_iter24_reg <= empty_54_reg_2256_pp2_iter23_reg;
        empty_54_reg_2256_pp2_iter25_reg <= empty_54_reg_2256_pp2_iter24_reg;
        empty_54_reg_2256_pp2_iter26_reg <= empty_54_reg_2256_pp2_iter25_reg;
        empty_54_reg_2256_pp2_iter27_reg <= empty_54_reg_2256_pp2_iter26_reg;
        empty_54_reg_2256_pp2_iter28_reg <= empty_54_reg_2256_pp2_iter27_reg;
        empty_54_reg_2256_pp2_iter29_reg <= empty_54_reg_2256_pp2_iter28_reg;
        empty_54_reg_2256_pp2_iter2_reg <= empty_54_reg_2256_pp2_iter1_reg;
        empty_54_reg_2256_pp2_iter30_reg <= empty_54_reg_2256_pp2_iter29_reg;
        empty_54_reg_2256_pp2_iter31_reg <= empty_54_reg_2256_pp2_iter30_reg;
        empty_54_reg_2256_pp2_iter32_reg <= empty_54_reg_2256_pp2_iter31_reg;
        empty_54_reg_2256_pp2_iter33_reg <= empty_54_reg_2256_pp2_iter32_reg;
        empty_54_reg_2256_pp2_iter34_reg <= empty_54_reg_2256_pp2_iter33_reg;
        empty_54_reg_2256_pp2_iter35_reg <= empty_54_reg_2256_pp2_iter34_reg;
        empty_54_reg_2256_pp2_iter36_reg <= empty_54_reg_2256_pp2_iter35_reg;
        empty_54_reg_2256_pp2_iter37_reg <= empty_54_reg_2256_pp2_iter36_reg;
        empty_54_reg_2256_pp2_iter38_reg <= empty_54_reg_2256_pp2_iter37_reg;
        empty_54_reg_2256_pp2_iter39_reg <= empty_54_reg_2256_pp2_iter38_reg;
        empty_54_reg_2256_pp2_iter3_reg <= empty_54_reg_2256_pp2_iter2_reg;
        empty_54_reg_2256_pp2_iter40_reg <= empty_54_reg_2256_pp2_iter39_reg;
        empty_54_reg_2256_pp2_iter41_reg <= empty_54_reg_2256_pp2_iter40_reg;
        empty_54_reg_2256_pp2_iter42_reg <= empty_54_reg_2256_pp2_iter41_reg;
        empty_54_reg_2256_pp2_iter43_reg <= empty_54_reg_2256_pp2_iter42_reg;
        empty_54_reg_2256_pp2_iter44_reg <= empty_54_reg_2256_pp2_iter43_reg;
        empty_54_reg_2256_pp2_iter45_reg <= empty_54_reg_2256_pp2_iter44_reg;
        empty_54_reg_2256_pp2_iter4_reg <= empty_54_reg_2256_pp2_iter3_reg;
        empty_54_reg_2256_pp2_iter5_reg <= empty_54_reg_2256_pp2_iter4_reg;
        empty_54_reg_2256_pp2_iter6_reg <= empty_54_reg_2256_pp2_iter5_reg;
        empty_54_reg_2256_pp2_iter7_reg <= empty_54_reg_2256_pp2_iter6_reg;
        empty_54_reg_2256_pp2_iter8_reg <= empty_54_reg_2256_pp2_iter7_reg;
        empty_54_reg_2256_pp2_iter9_reg <= empty_54_reg_2256_pp2_iter8_reg;
        icmp_ln111_reg_2231_pp2_iter10_reg <= icmp_ln111_reg_2231_pp2_iter9_reg;
        icmp_ln111_reg_2231_pp2_iter11_reg <= icmp_ln111_reg_2231_pp2_iter10_reg;
        icmp_ln111_reg_2231_pp2_iter12_reg <= icmp_ln111_reg_2231_pp2_iter11_reg;
        icmp_ln111_reg_2231_pp2_iter13_reg <= icmp_ln111_reg_2231_pp2_iter12_reg;
        icmp_ln111_reg_2231_pp2_iter14_reg <= icmp_ln111_reg_2231_pp2_iter13_reg;
        icmp_ln111_reg_2231_pp2_iter15_reg <= icmp_ln111_reg_2231_pp2_iter14_reg;
        icmp_ln111_reg_2231_pp2_iter16_reg <= icmp_ln111_reg_2231_pp2_iter15_reg;
        icmp_ln111_reg_2231_pp2_iter17_reg <= icmp_ln111_reg_2231_pp2_iter16_reg;
        icmp_ln111_reg_2231_pp2_iter18_reg <= icmp_ln111_reg_2231_pp2_iter17_reg;
        icmp_ln111_reg_2231_pp2_iter19_reg <= icmp_ln111_reg_2231_pp2_iter18_reg;
        icmp_ln111_reg_2231_pp2_iter20_reg <= icmp_ln111_reg_2231_pp2_iter19_reg;
        icmp_ln111_reg_2231_pp2_iter21_reg <= icmp_ln111_reg_2231_pp2_iter20_reg;
        icmp_ln111_reg_2231_pp2_iter22_reg <= icmp_ln111_reg_2231_pp2_iter21_reg;
        icmp_ln111_reg_2231_pp2_iter23_reg <= icmp_ln111_reg_2231_pp2_iter22_reg;
        icmp_ln111_reg_2231_pp2_iter24_reg <= icmp_ln111_reg_2231_pp2_iter23_reg;
        icmp_ln111_reg_2231_pp2_iter25_reg <= icmp_ln111_reg_2231_pp2_iter24_reg;
        icmp_ln111_reg_2231_pp2_iter26_reg <= icmp_ln111_reg_2231_pp2_iter25_reg;
        icmp_ln111_reg_2231_pp2_iter27_reg <= icmp_ln111_reg_2231_pp2_iter26_reg;
        icmp_ln111_reg_2231_pp2_iter28_reg <= icmp_ln111_reg_2231_pp2_iter27_reg;
        icmp_ln111_reg_2231_pp2_iter29_reg <= icmp_ln111_reg_2231_pp2_iter28_reg;
        icmp_ln111_reg_2231_pp2_iter2_reg <= icmp_ln111_reg_2231_pp2_iter1_reg;
        icmp_ln111_reg_2231_pp2_iter30_reg <= icmp_ln111_reg_2231_pp2_iter29_reg;
        icmp_ln111_reg_2231_pp2_iter31_reg <= icmp_ln111_reg_2231_pp2_iter30_reg;
        icmp_ln111_reg_2231_pp2_iter32_reg <= icmp_ln111_reg_2231_pp2_iter31_reg;
        icmp_ln111_reg_2231_pp2_iter33_reg <= icmp_ln111_reg_2231_pp2_iter32_reg;
        icmp_ln111_reg_2231_pp2_iter34_reg <= icmp_ln111_reg_2231_pp2_iter33_reg;
        icmp_ln111_reg_2231_pp2_iter35_reg <= icmp_ln111_reg_2231_pp2_iter34_reg;
        icmp_ln111_reg_2231_pp2_iter36_reg <= icmp_ln111_reg_2231_pp2_iter35_reg;
        icmp_ln111_reg_2231_pp2_iter37_reg <= icmp_ln111_reg_2231_pp2_iter36_reg;
        icmp_ln111_reg_2231_pp2_iter38_reg <= icmp_ln111_reg_2231_pp2_iter37_reg;
        icmp_ln111_reg_2231_pp2_iter39_reg <= icmp_ln111_reg_2231_pp2_iter38_reg;
        icmp_ln111_reg_2231_pp2_iter3_reg <= icmp_ln111_reg_2231_pp2_iter2_reg;
        icmp_ln111_reg_2231_pp2_iter40_reg <= icmp_ln111_reg_2231_pp2_iter39_reg;
        icmp_ln111_reg_2231_pp2_iter41_reg <= icmp_ln111_reg_2231_pp2_iter40_reg;
        icmp_ln111_reg_2231_pp2_iter42_reg <= icmp_ln111_reg_2231_pp2_iter41_reg;
        icmp_ln111_reg_2231_pp2_iter43_reg <= icmp_ln111_reg_2231_pp2_iter42_reg;
        icmp_ln111_reg_2231_pp2_iter44_reg <= icmp_ln111_reg_2231_pp2_iter43_reg;
        icmp_ln111_reg_2231_pp2_iter45_reg <= icmp_ln111_reg_2231_pp2_iter44_reg;
        icmp_ln111_reg_2231_pp2_iter46_reg <= icmp_ln111_reg_2231_pp2_iter45_reg;
        icmp_ln111_reg_2231_pp2_iter4_reg <= icmp_ln111_reg_2231_pp2_iter3_reg;
        icmp_ln111_reg_2231_pp2_iter5_reg <= icmp_ln111_reg_2231_pp2_iter4_reg;
        icmp_ln111_reg_2231_pp2_iter6_reg <= icmp_ln111_reg_2231_pp2_iter5_reg;
        icmp_ln111_reg_2231_pp2_iter7_reg <= icmp_ln111_reg_2231_pp2_iter6_reg;
        icmp_ln111_reg_2231_pp2_iter8_reg <= icmp_ln111_reg_2231_pp2_iter7_reg;
        icmp_ln111_reg_2231_pp2_iter9_reg <= icmp_ln111_reg_2231_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Sobel_addr_reg_2250_pp2_iter1_reg <= Sobel_addr_reg_2250;
        empty_48_reg_2260_pp2_iter1_reg <= empty_48_reg_2260;
        empty_54_reg_2256_pp2_iter1_reg <= empty_54_reg_2256;
        icmp_ln111_reg_2231 <= icmp_ln111_fu_1242_p2;
        icmp_ln111_reg_2231_pp2_iter1_reg <= icmp_ln111_reg_2231;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_48_reg_2260_pp2_iter2_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (empty_54_reg_2256_pp2_iter2_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter2_reg == 1'd0))) begin
        add_ln127_reg_2303 <= add_ln127_fu_1751_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln97_1_reg_2106 <= add_ln97_1_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln97_reg_2111 == 1'd0))) begin
        add_ln98_reg_2142 <= add_ln98_fu_1052_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter8 == 1'b1) & (icmp_ln97_reg_2111_pp1_iter7_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_reg_2182 <= grp_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln97_reg_2111_pp1_iter2_reg == 1'd0))) begin
        conv1_reg_2162 <= grp_fu_609_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111_pp1_iter2_reg == 1'd0))) begin
        conv2_reg_2167 <= grp_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter10 == 1'b1) & (icmp_ln97_reg_2111_pp1_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        dc_reg_2197 <= grp_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (empty_54_fu_1375_p2 == 1'd0) & (icmp_ln111_fu_1242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        empty_48_reg_2260 <= empty_48_fu_1393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln97_reg_2111 <= icmp_ln97_fu_976_p2;
        icmp_ln97_reg_2111_pp1_iter10_reg <= icmp_ln97_reg_2111_pp1_iter9_reg;
        icmp_ln97_reg_2111_pp1_iter1_reg <= icmp_ln97_reg_2111;
        icmp_ln97_reg_2111_pp1_iter2_reg <= icmp_ln97_reg_2111_pp1_iter1_reg;
        icmp_ln97_reg_2111_pp1_iter3_reg <= icmp_ln97_reg_2111_pp1_iter2_reg;
        icmp_ln97_reg_2111_pp1_iter4_reg <= icmp_ln97_reg_2111_pp1_iter3_reg;
        icmp_ln97_reg_2111_pp1_iter5_reg <= icmp_ln97_reg_2111_pp1_iter4_reg;
        icmp_ln97_reg_2111_pp1_iter6_reg <= icmp_ln97_reg_2111_pp1_iter5_reg;
        icmp_ln97_reg_2111_pp1_iter7_reg <= icmp_ln97_reg_2111_pp1_iter6_reg;
        icmp_ln97_reg_2111_pp1_iter8_reg <= icmp_ln97_reg_2111_pp1_iter7_reg;
        icmp_ln97_reg_2111_pp1_iter9_reg <= icmp_ln97_reg_2111_pp1_iter8_reg;
        mul2_reg_2177_pp1_iter7_reg <= mul2_reg_2177;
        mul2_reg_2177_pp1_iter8_reg <= mul2_reg_2177_pp1_iter7_reg;
        select_ln97_1_reg_2121_pp1_iter1_reg <= select_ln97_1_reg_2121;
        select_ln97_1_reg_2121_pp1_iter2_reg <= select_ln97_1_reg_2121_pp1_iter1_reg;
        select_ln97_1_reg_2121_pp1_iter3_reg <= select_ln97_1_reg_2121_pp1_iter2_reg;
        select_ln97_1_reg_2121_pp1_iter4_reg <= select_ln97_1_reg_2121_pp1_iter3_reg;
        select_ln97_1_reg_2121_pp1_iter5_reg <= select_ln97_1_reg_2121_pp1_iter4_reg;
        select_ln97_1_reg_2121_pp1_iter6_reg <= select_ln97_1_reg_2121_pp1_iter5_reg;
        select_ln97_1_reg_2121_pp1_iter7_reg <= select_ln97_1_reg_2121_pp1_iter6_reg;
        select_ln97_1_reg_2121_pp1_iter8_reg <= select_ln97_1_reg_2121_pp1_iter7_reg;
        select_ln97_1_reg_2121_pp1_iter9_reg <= select_ln97_1_reg_2121_pp1_iter8_reg;
        select_ln97_reg_2115_pp1_iter10_reg <= select_ln97_reg_2115_pp1_iter9_reg;
        select_ln97_reg_2115_pp1_iter1_reg <= select_ln97_reg_2115;
        select_ln97_reg_2115_pp1_iter2_reg <= select_ln97_reg_2115_pp1_iter1_reg;
        select_ln97_reg_2115_pp1_iter3_reg <= select_ln97_reg_2115_pp1_iter2_reg;
        select_ln97_reg_2115_pp1_iter4_reg <= select_ln97_reg_2115_pp1_iter3_reg;
        select_ln97_reg_2115_pp1_iter5_reg <= select_ln97_reg_2115_pp1_iter4_reg;
        select_ln97_reg_2115_pp1_iter6_reg <= select_ln97_reg_2115_pp1_iter5_reg;
        select_ln97_reg_2115_pp1_iter7_reg <= select_ln97_reg_2115_pp1_iter6_reg;
        select_ln97_reg_2115_pp1_iter8_reg <= select_ln97_reg_2115_pp1_iter7_reg;
        select_ln97_reg_2115_pp1_iter9_reg <= select_ln97_reg_2115_pp1_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln97_reg_2111_pp1_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        mul1_reg_2172 <= grp_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter6 == 1'b1) & (icmp_ln97_reg_2111_pp1_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mul2_reg_2177 <= grp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ref_tmp_dest_reg_2091 <= Data_In_TDEST_int_regslice;
        ref_tmp_id_reg_2086 <= Data_In_TID_int_regslice;
        ref_tmp_keep_reg_2067 <= Data_In_TKEEP_int_regslice;
        ref_tmp_strb_reg_2072 <= Data_In_TSTRB_int_regslice;
        ref_tmp_user_reg_2077 <= Data_In_TUSER_int_regslice;
        tmp_data_V_reg_2060 <= Data_In_TDATA_int_regslice;
        tmp_last_V_reg_2082 <= Data_In_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (empty_48_reg_2260_pp2_iter6_reg == 1'd0) & (empty_54_reg_2256_pp2_iter6_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter6_reg == 1'd0) & (ap_enable_reg_pp2_iter7 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln97_reg_2111_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        reg_651 <= grp_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (empty_48_reg_2260_pp2_iter42_reg == 1'd0) & (empty_54_reg_2256_pp2_iter42_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter42_reg == 1'd0) & (ap_enable_reg_pp2_iter43 == 1'b1)) | ((1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln97_reg_2111_pp1_iter5_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        reg_657 <= grp_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln111_fu_1242_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        select_ln111_1_reg_2235 <= select_ln111_1_fu_1262_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln97_fu_976_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln97_1_reg_2121 <= select_ln97_1_fu_1002_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln97_fu_976_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        select_ln97_reg_2115 <= select_ln97_fu_994_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((empty_48_reg_2260_pp2_iter36_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (empty_54_reg_2256_pp2_iter36_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter36_reg == 1'd0))) begin
        tmp_reg_2308 <= grp_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln54_1_reg_2096 <= {{and_ln54_2_fu_891_p2[31:16]}};
        trunc_ln54_2_reg_2101 <= {{and_ln54_3_fu_923_p2[31:24]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Array_Image_address0 = zext_ln101_fu_1018_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Array_Image_address0 = zext_ln54_3_fu_965_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Array_Image_address0 = zext_ln54_2_fu_956_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Array_Image_address0 = zext_ln54_1_fu_872_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Array_Image_address0 = zext_ln54_fu_841_p1;
    end else begin
        Array_Image_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp1_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            Array_Image_address1 = zext_ln103_fu_1047_p1;
        end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            Array_Image_address1 = zext_ln99_fu_1010_p1;
        end else begin
            Array_Image_address1 = 'bx;
        end
    end else begin
        Array_Image_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Data_In_TVALID_int_regslice)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        Array_Image_ce0 = 1'b1;
    end else begin
        Array_Image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        Array_Image_ce1 = 1'b1;
    end else begin
        Array_Image_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Array_Image_d0 = sext_ln54_2_fu_961_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Array_Image_d0 = sext_ln54_1_fu_952_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        Array_Image_d0 = sext_ln54_fu_867_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Array_Image_d0 = grp_fu_625_p2;
    end else begin
        Array_Image_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == Data_In_TVALID_int_regslice)))) begin
        Array_Image_we0 = 1'b1;
    end else begin
        Array_Image_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Data_In_TDATA_blk_n = Data_In_TVALID_int_regslice;
    end else begin
        Data_In_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Data_In_TVALID_int_regslice))) begin
        Data_In_TREADY_int_regslice = 1'b1;
    end else begin
        Data_In_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln111_reg_2231_pp2_iter46_reg == 1'd0) & (ap_enable_reg_pp2_iter47 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter46 == 1'b1)))) begin
        Data_Out_TDATA_blk_n = Data_Out_TREADY_int_regslice;
    end else begin
        Data_Out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter46 == 1'b1))) begin
        Data_Out_TVALID_int_regslice = 1'b1;
    end else begin
        Data_Out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_address0 = zext_ln119_4_fu_1469_p1;
    end else if (((ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Image_address0 = zext_ln106_2_fu_1080_p1;
    end else begin
        Image_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        Image_ce0 = 1'b1;
    end else begin
        Image_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce1 = 1'b1;
    end else begin
        Image_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce10 = 1'b1;
    end else begin
        Image_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce11 = 1'b1;
    end else begin
        Image_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce2 = 1'b1;
    end else begin
        Image_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce3 = 1'b1;
    end else begin
        Image_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce4 = 1'b1;
    end else begin
        Image_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce5 = 1'b1;
    end else begin
        Image_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce6 = 1'b1;
    end else begin
        Image_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce7 = 1'b1;
    end else begin
        Image_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce8 = 1'b1;
    end else begin
        Image_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        Image_ce9 = 1'b1;
    end else begin
        Image_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln97_reg_2111_pp1_iter10_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        Image_we0 = 1'b1;
    end else begin
        Image_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter44 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (((empty_54_reg_2256_pp2_iter43_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)) | ((empty_48_reg_2260_pp2_iter43_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter44 == 1'b1) & (empty_48_reg_2260_pp2_iter43_reg == 1'd0) & (empty_54_reg_2256_pp2_iter43_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)))) begin
        Sobel_1_ce0 = 1'b1;
    end else begin
        Sobel_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter45 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (((empty_54_reg_2256_pp2_iter44_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter44_reg == 1'd0)) | ((empty_48_reg_2260_pp2_iter44_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter44_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter45 == 1'b1) & (empty_48_reg_2260_pp2_iter44_reg == 1'd0) & (empty_54_reg_2256_pp2_iter44_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln111_reg_2231_pp2_iter44_reg == 1'd0)))) begin
        Sobel_1_ce1 = 1'b1;
    end else begin
        Sobel_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter44 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        if ((1'b1 == ap_condition_1295)) begin
            Sobel_1_d0 = 32'd0;
        end else if ((1'b1 == ap_condition_1286)) begin
            Sobel_1_d0 = result_V_7_fu_1889_p3;
        end else begin
            Sobel_1_d0 = 'bx;
        end
    end else begin
        Sobel_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter44 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001) & (((empty_54_reg_2256_pp2_iter43_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)) | ((empty_48_reg_2260_pp2_iter43_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter44 == 1'b1) & (empty_48_reg_2260_pp2_iter43_reg == 1'd0) & (empty_54_reg_2256_pp2_iter43_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)))) begin
        Sobel_1_we0 = 1'b1;
    end else begin
        Sobel_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln97_fu_976_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln111_fu_1242_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state31 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state31 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_Data_Out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state79))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter45 == 1'b0) & (ap_enable_reg_pp2_iter44 == 1'b0) & (ap_enable_reg_pp2_iter42 == 1'b0) & (ap_enable_reg_pp2_iter41 == 1'b0) & (ap_enable_reg_pp2_iter40 == 1'b0) & (ap_enable_reg_pp2_iter39 == 1'b0) & (ap_enable_reg_pp2_iter38 == 1'b0) & (ap_enable_reg_pp2_iter37 == 1'b0) & (ap_enable_reg_pp2_iter36 == 1'b0) & (ap_enable_reg_pp2_iter35 == 1'b0) & (ap_enable_reg_pp2_iter34 == 1'b0) & (ap_enable_reg_pp2_iter33 == 1'b0) & (ap_enable_reg_pp2_iter32 == 1'b0) & (ap_enable_reg_pp2_iter31 == 1'b0) & (ap_enable_reg_pp2_iter30 == 1'b0) & (ap_enable_reg_pp2_iter29 == 1'b0) & (ap_enable_reg_pp2_iter28 == 1'b0) & (ap_enable_reg_pp2_iter27 == 1'b0) & (ap_enable_reg_pp2_iter26 == 1'b0) & (ap_enable_reg_pp2_iter25 == 1'b0) & (ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter47 == 1'b0) & (ap_enable_reg_pp2_iter46 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter43 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111 == 1'd0))) begin
        ap_phi_mux_i_1_phi_fu_536_p4 = add_ln98_reg_2142;
    end else begin
        ap_phi_mux_i_1_phi_fu_536_p4 = i_1_reg_532;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln111_reg_2231 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_phi_fu_558_p4 = select_ln111_1_reg_2235;
    end else begin
        ap_phi_mux_i_phi_fu_558_p4 = i_reg_554;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_514_p4 = add_ln97_1_reg_2106;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_514_p4 = indvar_flatten_reg_510;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln97_reg_2111 == 1'd0))) begin
        ap_phi_mux_j_phi_fu_525_p4 = select_ln97_1_reg_2121;
    end else begin
        ap_phi_mux_j_phi_fu_525_p4 = j_reg_521;
    end
end

always @ (*) begin
    if ((((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (empty_54_reg_2256_pp2_iter45_reg == 1'd1)) | ((empty_48_reg_2260_pp2_iter45_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0)) | ((empty_48_reg_2260_pp2_iter45_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (empty_54_reg_2256_pp2_iter45_reg == 1'd0)))) begin
        ap_phi_mux_tmp_data_V_3_phi_fu_580_p4 = Sobel_1_q1;
    end else begin
        ap_phi_mux_tmp_data_V_3_phi_fu_580_p4 = ap_phi_reg_pp2_iter46_tmp_data_V_3_reg_576;
    end
end

always @ (*) begin
    if (((regslice_both_Data_Out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state79))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_sig_allocacmp_Mask_load = 32'd255;
    end else begin
        ap_sig_allocacmp_Mask_load = Mask_fu_256;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_sig_allocacmp_Mask_load_1 = 32'd255;
    end else begin
        ap_sig_allocacmp_Mask_load_1 = Mask_fu_256;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_2 = shl_ln55_1_fu_877_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_2 = Mask_fu_256;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_3 = shl_ln55_2_fu_909_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_3 = Mask_fu_256;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_6 = shl_ln55_1_fu_877_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_6 = Mask_fu_256;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_sig_allocacmp_Mask_load_7 = shl_ln55_2_fu_909_p2;
    end else begin
        ap_sig_allocacmp_Mask_load_7 = Mask_fu_256;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln97_fu_976_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_sig_allocacmp_indx_load_4 = grp_fu_640_p2;
    end else begin
        ap_sig_allocacmp_indx_load_4 = indx_fu_252;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln97_fu_976_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_sig_allocacmp_indx_load_5 = grp_fu_640_p2;
    end else begin
        ap_sig_allocacmp_indx_load_5 = indx_fu_252;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_590_p0 = add_reg_2182;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_590_p0 = reg_657;
    end else begin
        grp_fu_590_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_590_p1 = mul2_reg_2177_pp1_iter8_reg;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_590_p1 = mul1_reg_2172;
    end else begin
        grp_fu_590_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        grp_fu_594_ce = 1'b1;
    end else begin
        grp_fu_594_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter38 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_594_p0 = tmp_reg_2308;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_594_p0 = conv2_reg_2167;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_594_p0 = reg_651;
    end else begin
        grp_fu_594_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter38 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_594_p1 = 64'd4598175219545276416;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_594_p1 = 64'd4592878986383488713;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_594_p1 = 64'd4599057925072241033;
    end else begin
        grp_fu_594_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        grp_fu_606_ce = 1'b1;
    end else begin
        grp_fu_606_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_606_p0 = add_ln127_reg_2303;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_606_p0 = B_fu_180;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_606_p0 = R_fu_172;
    end else begin
        grp_fu_606_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_612_ce = 1'b1;
    end else begin
        grp_fu_612_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_625_p1 = tmp_data_V_reg_2060;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_625_p1 = Data_In_TDATA_int_regslice;
    end else begin
        grp_fu_625_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_load_fu_622_p1 = Mask_fu_256;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_622_p1 = ap_sig_allocacmp_Mask_load;
    end else begin
        grp_load_fu_622_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_load_fu_634_p1 = Mask_fu_256;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_load_fu_634_p1 = ap_sig_allocacmp_Mask_load_1;
    end else begin
        grp_load_fu_634_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == Data_In_TVALID_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_last_V_reg_2082 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln97_fu_976_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln97_fu_976_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter11 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln111_fu_1242_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter47 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter46 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln111_fu_1242_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((ap_enable_reg_pp2_iter47 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter46 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((regslice_both_Data_Out_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_In_TREADY = regslice_both_Data_In_V_data_V_U_ack_in;

assign Data_Out_TVALID = regslice_both_Data_Out_V_data_V_U_vld_out;

assign G1_1_fu_1600_p2 = (add_ln119_fu_1594_p2 + mul_ln119_fu_1571_p2);

assign G1_Sum_1_fu_1699_p2 = (G1_3_fu_268 + G1_2_fu_272);

assign G1_fu_1536_p2 = (add_ln118_2_fu_1530_p2 + mul_ln118_1_fu_1511_p2);

assign G2_1_fu_1682_p2 = (and_ln124_fu_1676_p2 + mul_ln124_fu_1659_p2);

assign G2_Sum_1_fu_1716_p2 = (G2_3_fu_260 + G2_2_fu_264);

assign G2_fu_1641_p2 = (and_ln122_fu_1635_p2 + mul_ln122_fu_1618_p2);

assign Image_address1 = zext_ln119_3_fu_1426_p1;

assign Image_address10 = zext_ln118_2_fu_1332_p1;

assign Image_address11 = zext_ln118_3_fu_1415_p1;

assign Image_address2 = zext_ln123_2_fu_1480_p1;

assign Image_address3 = zext_ln123_1_fu_1437_p1;

assign Image_address4 = zext_ln118_5_fu_1458_p1;

assign Image_address5 = zext_ln118_3_fu_1415_p1;

assign Image_address6 = zext_ln119_4_fu_1469_p1;

assign Image_address7 = zext_ln119_2_fu_1343_p1;

assign Image_address8 = zext_ln119_3_fu_1426_p1;

assign Image_address9 = zext_ln118_5_fu_1458_p1;

assign Image_d0 = ((p_Result_s_fu_1087_p3[0:0] == 1'b1) ? result_V_2_fu_1209_p2 : val_fu_1201_p3);

assign add_ln111_fu_1224_p2 = (indvar_flatten7_reg_543 + 13'd1);

assign add_ln112_fu_1485_p2 = (select_ln111_fu_1254_p3 + 7'd1);

assign add_ln114_fu_1348_p2 = (mul_ln123_fu_1274_p2 + zext_ln118_1_fu_1322_p1);

assign add_ln118_1_fu_1442_p2 = (select_ln111_fu_1254_p3 + 7'd1);

assign add_ln118_2_fu_1530_p2 = (mul_ln118_fu_1498_p2 + mul_ln118_2_fu_1524_p2);

assign add_ln118_3_fu_1326_p2 = (mul_ln118_3_fu_1292_p2 + zext_ln118_1_fu_1322_p1);

assign add_ln118_4_fu_1409_p2 = ($signed(mul_ln118_3_fu_1292_p2) + $signed(sext_ln118_1_fu_1405_p1));

assign add_ln118_5_fu_1452_p2 = (mul_ln118_3_fu_1292_p2 + zext_ln118_4_fu_1448_p1);

assign add_ln118_fu_1399_p2 = ($signed(trunc_ln113_cast_fu_1359_p1) + $signed(8'd255));

assign add_ln119_1_fu_1337_p2 = (mul_ln119_1_fu_1316_p2 + zext_ln118_1_fu_1322_p1);

assign add_ln119_2_fu_1420_p2 = ($signed(mul_ln119_1_fu_1316_p2) + $signed(sext_ln118_1_fu_1405_p1));

assign add_ln119_3_fu_1463_p2 = (mul_ln119_1_fu_1316_p2 + zext_ln118_4_fu_1448_p1);

assign add_ln119_fu_1594_p2 = (and_ln119_fu_1558_p2 + and_ln119_1_fu_1588_p2);

assign add_ln123_1_fu_1474_p2 = (mul_ln123_fu_1274_p2 + zext_ln118_4_fu_1448_p1);

assign add_ln123_fu_1431_p2 = ($signed(mul_ln123_fu_1274_p2) + $signed(sext_ln118_1_fu_1405_p1));

assign add_ln127_fu_1751_p2 = (mul_ln127_1_fu_1745_p2 + mul_ln127_fu_1733_p2);

assign add_ln510_1_fu_1801_p2 = ($signed(zext_ln510_1_fu_1797_p1) + $signed(12'd3073));

assign add_ln510_fu_1127_p2 = ($signed(zext_ln510_fu_1123_p1) + $signed(12'd3073));

assign add_ln97_1_fu_970_p2 = (ap_phi_mux_indvar_flatten_phi_fu_514_p4 + 13'd1);

assign add_ln97_fu_982_p2 = (ap_phi_mux_j_phi_fu_525_p4 + 6'd1);

assign add_ln98_fu_1052_p2 = (select_ln97_reg_2115 + 7'd1);

assign and_ln119_1_fu_1588_p2 = (select_ln119_1_fu_1580_p3 & Image_q6);

assign and_ln119_fu_1558_p2 = (select_ln119_fu_1550_p3 & Image_q8);

assign and_ln122_fu_1635_p2 = (select_ln122_fu_1627_p3 & Image_q4);

assign and_ln124_fu_1676_p2 = (select_ln124_fu_1668_p3 & Image_q0);

assign and_ln54_2_fu_891_p2 = (tmp_data_V_reg_2060 & ap_sig_allocacmp_Mask_load_2);

assign and_ln54_3_fu_923_p2 = (tmp_data_V_reg_2060 & ap_sig_allocacmp_Mask_load_3);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd10];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((icmp_ln111_reg_2231_pp2_iter46_reg == 1'd0) & (ap_enable_reg_pp2_iter47 == 1'b1) & (1'b0 == Data_Out_TREADY_int_regslice)) | ((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (ap_enable_reg_pp2_iter46 == 1'b1) & (1'b0 == Data_Out_TREADY_int_regslice)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter47 == 1'b1) & ((1'b1 == ap_block_state78_io) | ((icmp_ln111_reg_2231_pp2_iter46_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice)))) | ((ap_enable_reg_pp2_iter46 == 1'b1) & ((1'b1 == ap_block_state77_io) | ((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter47 == 1'b1) & ((1'b1 == ap_block_state78_io) | ((icmp_ln111_reg_2231_pp2_iter46_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice)))) | ((ap_enable_reg_pp2_iter46 == 1'b1) & ((1'b1 == ap_block_state77_io) | ((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice)))));
end

assign ap_block_state10_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp1_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp2_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp2_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp2_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp2_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp2_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp2_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp2_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp2_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp2_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp2_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp2_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp2_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp2_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp2_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp2_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp2_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp2_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp2_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp2_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp2_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp2_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp2_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp2_stage0_iter45 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state77_io = ((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state77_pp2_stage0_iter46 = ((icmp_ln111_reg_2231_pp2_iter45_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state78_io = ((icmp_ln111_reg_2231_pp2_iter46_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

always @ (*) begin
    ap_block_state78_pp2_stage0_iter47 = ((icmp_ln111_reg_2231_pp2_iter46_reg == 1'd0) & (1'b0 == Data_Out_TREADY_int_regslice));
end

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1286 = ((empty_48_reg_2260_pp2_iter43_reg == 1'd0) & (empty_54_reg_2256_pp2_iter43_reg == 1'd0) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1295 = (((empty_54_reg_2256_pp2_iter43_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)) | ((empty_48_reg_2260_pp2_iter43_reg == 1'd1) & (icmp_ln111_reg_2231_pp2_iter43_reg == 1'd0)));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp2_iter46_tmp_data_V_3_reg_576 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_V_1_fu_1757_p1 = reg_657;

assign data_V_fu_1084_p1 = dc_reg_2197;

assign empty_45_fu_1230_p2 = ($signed(ap_phi_mux_i_phi_fu_558_p4) + $signed(6'd63));

assign empty_46_fu_1381_p2 = ((select_ln111_fu_1254_p3 == 7'd99) ? 1'b1 : 1'b0);

assign empty_47_fu_1387_p2 = ((select_ln111_fu_1254_p3 == 7'd0) ? 1'b1 : 1'b0);

assign empty_48_fu_1393_p2 = (empty_47_fu_1387_p2 | empty_46_fu_1381_p2);

assign empty_52_fu_1363_p2 = ((select_ln111_1_fu_1262_p3 == 6'd49) ? 1'b1 : 1'b0);

assign empty_53_fu_1369_p2 = ((select_ln111_1_fu_1262_p3 == 6'd0) ? 1'b1 : 1'b0);

assign empty_54_fu_1375_p2 = (empty_53_fu_1369_p2 | empty_52_fu_1363_p2);

assign grp_fu_1904_p0 = grp_fu_1904_p00;

assign grp_fu_1904_p00 = select_ln97_1_reg_2121_pp1_iter9_reg;

assign grp_fu_1904_p1 = 13'd100;

assign grp_fu_1904_p2 = grp_fu_1904_p20;

assign grp_fu_1904_p20 = select_ln97_reg_2115_pp1_iter10_reg;

assign grp_fu_625_p2 = (grp_load_fu_622_p1 & grp_fu_625_p1);

assign grp_fu_640_p2 = (indx_fu_252 + 32'd1);

assign icmp_ln111_fu_1242_p2 = ((indvar_flatten7_reg_543 == 13'd5000) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_1248_p2 = ((j_1_reg_565 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_976_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_514_p4 == 13'd5000) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_988_p2 = ((ap_phi_mux_i_1_phi_fu_536_p4 == 7'd100) ? 1'b1 : 1'b0);

assign indvars_iv_next155_fu_1236_p2 = (ap_phi_mux_i_phi_fu_558_p4 + 6'd1);

assign indvars_iv_next155_mid1_fu_1298_p2 = (ap_phi_mux_i_phi_fu_558_p4 + 6'd2);

assign indx_2_fu_1026_p2 = (ap_sig_allocacmp_indx_load_5 + 32'd1);

assign isNeg_1_fu_1807_p3 = add_ln510_1_fu_1801_p2[32'd11];

assign isNeg_fu_1133_p3 = add_ln510_fu_1127_p2[32'd11];

assign mantissa_1_fu_1783_p4 = {{{{1'd1}, {tmp_15_fu_1779_p1}}}, {1'd0}};

assign mantissa_fu_1109_p4 = {{{{1'd1}, {tmp_13_fu_1105_p1}}}, {1'd0}};

assign mul_ln118_3_fu_1292_p0 = mul_ln118_3_fu_1292_p00;

assign mul_ln118_3_fu_1292_p00 = select_ln111_2_fu_1280_p3;

assign mul_ln118_3_fu_1292_p1 = 13'd100;

assign mul_ln119_1_fu_1316_p0 = mul_ln119_1_fu_1316_p00;

assign mul_ln119_1_fu_1316_p00 = select_ln111_3_fu_1304_p3;

assign mul_ln119_1_fu_1316_p1 = 13'd100;

assign mul_ln119_fu_1571_p1 = mul_ln119_fu_1571_p10;

assign mul_ln119_fu_1571_p10 = Vertical_Sobel_4_fu_200;

assign mul_ln123_fu_1274_p0 = mul_ln123_fu_1274_p00;

assign mul_ln123_fu_1274_p00 = select_ln111_1_fu_1262_p3;

assign mul_ln123_fu_1274_p1 = 13'd100;

assign p_Result_1_fu_1761_p3 = data_V_1_fu_1757_p1[32'd63];

assign p_Result_s_fu_1087_p3 = data_V_fu_1084_p1[32'd63];

assign r_V_1_fu_1173_p2 = zext_ln15_fu_1119_p1 << sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1;

assign r_V_2_fu_1841_p2 = zext_ln15_1_fu_1793_p1 >> sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1;

assign r_V_3_fu_1847_p2 = zext_ln15_1_fu_1793_p1 << sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1;

assign r_V_fu_1167_p2 = zext_ln15_fu_1119_p1 >> sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1;

assign result_V_2_fu_1209_p2 = (32'd0 - val_fu_1201_p3);

assign result_V_6_fu_1883_p2 = (32'd0 - val_1_fu_1875_p3);

assign result_V_7_fu_1889_p3 = ((p_Result_1_fu_1761_p3[0:0] == 1'b1) ? result_V_6_fu_1883_p2 : val_1_fu_1875_p3);

assign select_ln111_1_fu_1262_p3 = ((icmp_ln112_fu_1248_p2[0:0] == 1'b1) ? indvars_iv_next155_fu_1236_p2 : ap_phi_mux_i_phi_fu_558_p4);

assign select_ln111_2_fu_1280_p3 = ((icmp_ln112_fu_1248_p2[0:0] == 1'b1) ? ap_phi_mux_i_phi_fu_558_p4 : empty_45_fu_1230_p2);

assign select_ln111_3_fu_1304_p3 = ((icmp_ln112_fu_1248_p2[0:0] == 1'b1) ? indvars_iv_next155_mid1_fu_1298_p2 : indvars_iv_next155_fu_1236_p2);

assign select_ln111_fu_1254_p3 = ((icmp_ln112_fu_1248_p2[0:0] == 1'b1) ? 7'd0 : j_1_reg_565);

assign select_ln119_1_fu_1580_p3 = ((Vertical_Sobel_5_fu_204[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln119_fu_1550_p3 = ((Vertical_Sobel_3_fu_196[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln122_fu_1627_p3 = ((Horizontal_Sobel_1_fu_212[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln124_fu_1668_p3 = ((Horizontal_Sobel_5_fu_228[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln97_1_fu_1002_p3 = ((icmp_ln98_fu_988_p2[0:0] == 1'b1) ? add_ln97_fu_982_p2 : ap_phi_mux_j_phi_fu_525_p4);

assign select_ln97_fu_994_p3 = ((icmp_ln98_fu_988_p2[0:0] == 1'b1) ? 7'd0 : ap_phi_mux_i_1_phi_fu_536_p4);

assign sext_ln118_1_fu_1405_p1 = $signed(add_ln118_fu_1399_p2);

assign sext_ln1311_1_fu_1821_p1 = $signed(sub_ln1311_1_fu_1815_p2);

assign sext_ln1311_fu_1147_p1 = $signed(sub_ln1311_fu_1141_p2);

assign sext_ln54_1_fu_952_p1 = $signed(trunc_ln54_1_reg_2096);

assign sext_ln54_2_fu_961_p1 = $signed(trunc_ln54_2_reg_2101);

assign sext_ln54_fu_867_p1 = $signed(trunc_ln_fu_857_p4);

assign sh_prom_i_i_i_i_i139_cast_cast_cast_cast_fu_1837_p1 = $unsigned(sh_prom_i_i_i_i_i139_cast_cast_cast_fu_1833_p1);

assign sh_prom_i_i_i_i_i139_cast_cast_cast_fu_1833_p1 = $signed(ush_1_fu_1825_p3);

assign sh_prom_i_i_i_i_i_cast_cast_cast_cast_fu_1163_p1 = $unsigned(sh_prom_i_i_i_i_i_cast_cast_cast_fu_1159_p1);

assign sh_prom_i_i_i_i_i_cast_cast_cast_fu_1159_p1 = $signed(ush_fu_1151_p3);

assign shl_ln55_1_fu_877_p2 = grp_load_fu_634_p1 << 32'd8;

assign shl_ln55_2_fu_909_p2 = ap_sig_allocacmp_Mask_load_6 << 32'd8;

assign shl_ln55_3_fu_941_p2 = ap_sig_allocacmp_Mask_load_7 << 32'd8;

assign shl_ln55_fu_846_p2 = grp_load_fu_634_p1 << 32'd8;

assign sub_ln1311_1_fu_1815_p2 = (11'd1023 - tmp_14_fu_1769_p4);

assign sub_ln1311_fu_1141_p2 = (11'd1023 - tmp_12_fu_1095_p4);

assign tmp_11_fu_1853_p3 = r_V_2_fu_1841_p2[32'd53];

assign tmp_12_fu_1095_p4 = {{data_V_fu_1084_p1[62:52]}};

assign tmp_13_fu_1105_p1 = data_V_fu_1084_p1[51:0];

assign tmp_14_fu_1769_p4 = {{data_V_1_fu_1757_p1[62:52]}};

assign tmp_15_fu_1779_p1 = data_V_1_fu_1757_p1[51:0];

assign tmp_2_fu_1865_p4 = {{r_V_3_fu_1847_p2[84:53]}};

assign tmp_6_fu_1179_p3 = r_V_fu_1167_p2[32'd53];

assign tmp_s_fu_1191_p4 = {{r_V_1_fu_1173_p2[84:53]}};

assign trunc_ln113_cast_fu_1359_p1 = select_ln111_fu_1254_p3;

assign trunc_ln_fu_857_p4 = {{grp_fu_625_p2[31:8]}};

assign ush_1_fu_1825_p3 = ((isNeg_1_fu_1807_p3[0:0] == 1'b1) ? sext_ln1311_1_fu_1821_p1 : add_ln510_1_fu_1801_p2);

assign ush_fu_1151_p3 = ((isNeg_fu_1133_p3[0:0] == 1'b1) ? sext_ln1311_fu_1147_p1 : add_ln510_fu_1127_p2);

assign val_1_fu_1875_p3 = ((isNeg_1_fu_1807_p3[0:0] == 1'b1) ? zext_ln662_1_fu_1861_p1 : tmp_2_fu_1865_p4);

assign val_fu_1201_p3 = ((isNeg_fu_1133_p3[0:0] == 1'b1) ? zext_ln662_fu_1187_p1 : tmp_s_fu_1191_p4);

assign zext_ln101_fu_1018_p1 = ap_sig_allocacmp_indx_load_4;

assign zext_ln103_fu_1047_p1 = indx_fu_252;

assign zext_ln106_2_fu_1080_p1 = grp_fu_1904_p3;

assign zext_ln114_fu_1354_p1 = add_ln114_fu_1348_p2;

assign zext_ln118_1_fu_1322_p1 = select_ln111_fu_1254_p3;

assign zext_ln118_2_fu_1332_p1 = add_ln118_3_fu_1326_p2;

assign zext_ln118_3_fu_1415_p1 = add_ln118_4_fu_1409_p2;

assign zext_ln118_4_fu_1448_p1 = add_ln118_1_fu_1442_p2;

assign zext_ln118_5_fu_1458_p1 = add_ln118_5_fu_1452_p2;

assign zext_ln119_2_fu_1343_p1 = add_ln119_1_fu_1337_p2;

assign zext_ln119_3_fu_1426_p1 = add_ln119_2_fu_1420_p2;

assign zext_ln119_4_fu_1469_p1 = add_ln119_3_fu_1463_p2;

assign zext_ln123_1_fu_1437_p1 = add_ln123_fu_1431_p2;

assign zext_ln123_2_fu_1480_p1 = add_ln123_1_fu_1474_p2;

assign zext_ln15_1_fu_1793_p1 = mantissa_1_fu_1783_p4;

assign zext_ln15_fu_1119_p1 = mantissa_fu_1109_p4;

assign zext_ln510_1_fu_1797_p1 = tmp_14_fu_1769_p4;

assign zext_ln510_fu_1123_p1 = tmp_12_fu_1095_p4;

assign zext_ln54_1_fu_872_p1 = indx_fu_252;

assign zext_ln54_2_fu_956_p1 = indx_fu_252;

assign zext_ln54_3_fu_965_p1 = indx_fu_252;

assign zext_ln54_fu_841_p1 = indx_fu_252;

assign zext_ln662_1_fu_1861_p1 = tmp_11_fu_1853_p3;

assign zext_ln662_fu_1187_p1 = tmp_6_fu_1179_p3;

assign zext_ln99_fu_1010_p1 = indx_fu_252;

always @ (posedge ap_clk) begin
    Vertical_Sobel_1_fu_188[0] <= 1'b0;
    Vertical_Sobel_4_fu_200[0] <= 1'b0;
end

endmodule //Sobel
